/*
 * File: app/view/DebtorAllocations.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.view.DebtorAllocations', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.debtorallocations',

    requires: [
        'CarePortal.view.undefinedViewModel10',
        'Ext.button.Button',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Date',
        'Ext.view.Table',
        'Ext.toolbar.Paging',
        'Ext.grid.column.Number'
    ],

    viewModel: {
        type: 'debtorallocations'
    },
    minWidth: 800,
    columnLines: true,
    store: 'Allocations',
    defaultListenerScope: true,

    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            ui: 'footer',
            items: [
                {
                    xtype: 'textfield',
                    itemId: 'invParam',
                    fieldLabel: 'Find Invoices',
                    hideLabel: true,
                    labelAlign: 'right',
                    labelWidth: 80,
                    name: 'invParam'
                },
                {
                    xtype: 'button',
                    iconCls: 'x-fa fa-search',
                    text: 'Find Allocations',
                    listeners: {
                        click: 'onButtonClick'
                    }
                },
                {
                    xtype: 'button',
                    itemId: 'cmdAllocateReceipts',
                    iconCls: 'x-fa fa-plus',
                    text: 'Allocate Receipts'
                },
                {
                    xtype: 'combobox',
                    fieldLabel: 'Filter by Category',
                    labelWidth: 120,
                    displayField: 'custNames',
                    valueField: 'ID'
                },
                {
                    xtype: 'datefield',
                    fieldLabel: 'Start date',
                    labelWidth: 70
                },
                {
                    xtype: 'datefield',
                    width: 209,
                    fieldLabel: 'Start Date',
                    labelWidth: 70
                }
            ]
        },
        {
            xtype: 'pagingtoolbar',
            dock: 'bottom',
            width: 360,
            displayInfo: true,
            store: 'Allocations'
        }
    ],
    columns: [
        {
            xtype: 'gridcolumn',
            width: 56,
            dataIndex: 'accno',
            text: 'Accno'
        },
        {
            xtype: 'gridcolumn',
            width: 229,
            dataIndex: 'debtor',
            text: 'Debtor'
        },
        {
            xtype: 'gridcolumn',
            width: 66,
            dataIndex: 'pid',
            text: 'Pid'
        },
        {
            xtype: 'gridcolumn',
            width: 202,
            dataIndex: 'patient',
            text: 'Patient'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'billNumber',
            text: 'BillNumber'
        },
        {
            xtype: 'gridcolumn',
            width: 156,
            dataIndex: 'AllocationDate',
            text: 'AllocationDate'
        },
        {
            xtype: 'numbercolumn',
            width: 89,
            align: 'right',
            dataIndex: 'InvoiceAmount',
            text: 'InvoiceAmount'
        },
        {
            xtype: 'numbercolumn',
            align: 'right',
            dataIndex: 'AmountAllocated',
            text: 'AmountAllocated'
        },
        {
            xtype: 'numbercolumn',
            align: 'right',
            dataIndex: 'invoiceBalance',
            text: 'InvoiceBalance'
        }
    ],

    onButtonClick: function(button, e, eOpts) {
        var invoicelist=Ext.data.StoreManager.lookup('InvoicesList');
        var invParam=button.up('panel').down('#invParam').getValue();
        invoicelist.load({
            params: {
                irParam: invParam
            },
            callback: function(records, operation, success) {


            },
            scope: this
        });
    }

});