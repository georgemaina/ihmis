/*
 * File: app/controller/CashBook.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.controller.CashBook', {
    extend: 'Ext.app.Controller',
    alias: 'controller.cashbook',

    models: [
        'PendingPrescription',
        'ItemsList',
        'PendingPatientsBills',
        'ledger',
        'Suppliers',
        'ReceiptModel',
        'CashSaleSummaries',
        'ItemSalesSummary',
        'cataloglist'
    ],
    stores: [
        'PendingPrescription',
        'OrderStocksStore',
        'ItemsListStore',
        'PendingPatientBills',
        'SuppliersStore',
        'PaidReceiptsStore',
        'DebtorsList',
        'GeneralLedgerStore',
        'CashpointsSummaryStore',
        'CashSaleSummariesStore',
        'ItemSalesSummaryStore',
        'CatalogListStore'
    ],
    views: [
        'ItemsList',
        'PendingBills',
        'CashSales',
        'Receipts',
        'Payments',
        'PaymentsAdj',
        'PrescriptionForm',
        'Dosage',
        'ShiftReport',
        'EndShift',
        'StartShift',
        'SupplierForm',
        'Suppliers',
        'CashSalesAdj',
        'Debtors',
        'GeneralLedger',
        'Shifts',
        'CashPointsSummary',
        'CollectionsBreakdown',
        'ItemSalesSummary',
        'DailyRevenueBreakdown',
        'CashbookReportsHeader',
        'CatalogList',
        'ReceiptsAdj'
    ],

    refs: {
        mainview: {
            selector: 'mainview',
            xtype: 'mainview'
        },
        stocklevels: {
            selector: 'stocklevels',
            xtype: 'stocklevels'
        },
        itemslist: {
            selector: 'itemslist',
            xtype: 'itemslist'
        },
        cashsales: {
            selector: 'cashsales',
            xtype: 'cashsales'
        },
        cashsalesadj: {
            selector: 'cashsalesadj',
            xtype: 'cashsalesadj'
        },
        receipts: {
            selector: 'receipts',
            xtype: 'receipts'
        },
        receiptsadj: {
            selector: 'receiptsadj',
            xtype: 'receiptsadj'
        },
        payments: {
            selector: 'payments',
            xtype: 'payments'
        },
        paymentsadj: {
            selector: 'paymentsadj',
            xtype: 'paymentsadj'
        },
        shiftsform: {
            selector: 'shiftsform',
            xtype: 'shiftsform'
        },
        prescriptionform: {
            selector: 'prescriptionform',
            xtype: 'prescriptionform'
        },
        dosage: {
            selector: 'dosage',
            xtype: 'dosage'
        },
        startshift: {
            selector: 'startshift',
            xtype: 'startshift'
        },
        shiftreport: {
            selector: 'shiftreport',
            xtype: 'shiftreport'
        },
        endshift: {
            selector: 'endshift',
            xtype: 'endshift'
        },
        debtors: {
            selector: 'debtors',
            xtype: 'debtors'
        },
        generalledger: {
            selector: 'generalledger',
            xtype: 'generalledger'
        },
        shifts: {
            selector: 'shifts',
            xtype: 'shifts'
        },
        shiftsreportheader: {
            selector: 'shiftsreportheader',
            xtype: 'shiftsreportheader'
        },
        cashbookreportsheader: {
            selector: 'cashbookreportsheader',
            xtype: 'cashbookreportsheader'
        },
        cataloglist: {
            selector: 'cataloglist',
            xtype: 'cataloglist'
        }
    },

    init: function(application) {
        this.control({
            '#openItemsList':{
                click:this.opeItemsList
            },
            '#mnuStartShift':{
                click:this.openShiftsForm
            },
            '#mnuEndShift':{
                click:this.openShiftsForm
            },
            '#mnuCashSaleAdj':{
                click:this.openCashSaleAdj
            },
            '#cmdGetCashItems':{
                click:this.openCashItemsList
            },
            '#txtSearchItems':{
                change:this.filterItems
            },
            '#mnuReceipts':{
                click:this.openReceipts
            },
            '#itemsList':{
                itemdblclick:this.addSelectedItems2
            },
            '#cataloglist':{
                itemdblclick:this.addSelectedItems3
            },
            '#cmdSaveSales':{
                click:this.saveSales
            },
            '#cmdSaveReceipt':{
                click:this.saveReceipt
            },
            '#department':{
                select:this.setDeptName
            },
            '#mnuReceiptsAdj':{
                click:this.openReceiptsAdj
            },
            '#mnuPayments':{
                click:this.openPayments
            },
            '#mnuPaymentsAdj':{
                click:this.openPaymentsAdj
            },
            '#levelsGrid':{
                itemclick:this.loadLevelsForm
            },
            '#saveStockAdjustments':{
                click:this.saveStockAdjustments
            },
            '#mnuPrescriptions':{
                click:this.openPrescriptions
            },
            '#pendingPrescGrid':{
                itemclick:this.showPrescriptions
            },
            '#cmdDispensDrugs':{
                click:this.openDispensWindow
            },
            '#mnuCashSale':{
                click:this.displayCashSale
            },
            '#drugsList':{
                click:this.loadSelectedDrugs
            },
            '#cmdRemoveDose':{
                click:this.removeDose
            },
            '#days':{
                change:this.getTotalDosage
            },
            '#Pid':{
                blur:this.loadPatientDetails
            },
            '#store':{
                select:this.loadPrescriptionOrder
            },
            '#issueDrugs':{
                click:this.issueDrugs
            },
            '#mnuPatientReturns':{
                click:this.openReturnOrders
            },
            '#cmdReturnDrugs':{
                click:this.returnDrugs
            },
            '#cmdPreviewPrescriptions':{
                click:this.previewDrugsToReturn
            },
            '#mnuIssuedDrugs':{
                click:this.previewIssuedDrugs
            },
            '#mnuInternalOrders':{
                click:this.previewInteralOrders
            },
            '#mnuStockAdjustments':{
                click:this.previewStockAdjustments
            },
            '#mnuStockMovements':{
                click:this.previewMovements
            },
            '#mnuStockValuation':{
                click:this.previewValuations
            },
            '#cmdPreviewValuation':{
                click:this.loadValuation
            },
            '#cancelOrder':{
                click:this.cancelOrder
            },
            '#issueType':{
                change:this.setIssueNo
            },
            '#prescParams':{
                //  specialkey:this.getPressedKey,
                change:this.filterPrescriptions
            },
            '#salesType':{
                change:this.getSalesType
            },
            '#pendingBills':{
                itemClick:this.loadBill
            },
            '#salesGrid':{
                itemClick:this.loadBill
            },
            '#startShift':{
                click:this.startShift
            },
            '#endShift':{
                click:this.endShift
            },
            '#reprint':{
                click:this.reprintReceipt
            },
            '#selectShifts':{
                click:this.openShifts
            },
            '#shiftsGrid':{
                itemclick:this.loadReceipts
            },
            "#cashSales":{
                afterrender:this.setReceiptNo
            },
            "#receipts":{
                afterrender:this.setReceiptNo1
            },
            '#cmdPreviewReport':{
                click:this.previewCashReport
            },
            '#deleteSelectedItem':{
                click:this.deleteSelectedItem
            },
            '#cashPoint':{
                change:this.setPaymentDetails
            },
            '#cmdSuppliers':{
                click:this.getSuppliers
            },
            '#cmdGLs':{
                click:this.openGlAccounts
            },
            '#cmdSaveSalesAdj':{
                click:this.saveSalesAdj
            },
            '#cmdPrintCashReport':{
                click:this.printCashReport
            },
            '#cmdReprint':{
                click:this.reprintReceipt
            },
            '#reprintParams':{
                change:this.filterReceipts
            },
            '#cmdGetDebtors':{
                click:this.openDebtors
            },
            '#cmdGetSuppliers':{
                click:this.openSuppliers
            },
            '#cmdGetLedgers':{
                click:this.openLedgers
            },
            '#debtorslist2':{
                itemdblclick:this.addReceiptItems
            },
            '#supplierslist':{
                itemdblclick:this.addReceiptItems
            },
            '#generalledgers':{
                itemdblclick:this.addReceiptItems
            },
            '#cmdSavePayment':{
                click:this.savePayments
            },
            '#cashSale':{
                change:this.clearGrid
            },
            '#ShiftReport':{
                click:this.openReports
            },
            '#CashPointsSummary':{
                click:this.openReports
            },
            '#CollectionsBreakdown':{
                click:this.openReports
            },
            '#DepartmentsRevenue':{
                click:this.openReports
            },
            '#DailyRevenueBreakdown':{
                click:this.openReports
            },
            '#PatientsSummary':{
                click:this.openReports
            },
            '#ItemSalesSummary':{
                click:this.openReports
            },
            '#cmdNewGlAccount':{
                click:this.openGlAccountsForm
            }

        });
    },

    openShiftsForm: function() {
        var shiftsForm=Ext.create("CarePortal.view.ShiftsForm",{});

         var shiftsWindow=Ext.create('Ext.window.Window', {
             title: 'Start Shift',
             resizable:false
         });

         shiftsWindow.add(shiftsForm);
         shiftsWindow.show();
    },

    openCashSaleAdj: function() {
        var cashSaleAdj=Ext.create("CarePortal.view.CashSalesAdj",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(cashSaleAdj);
                //Ext.Msg.alert('Test',centerContainer.getItemId());
    },

    openReceipts: function() {
        var receipts=Ext.create("CarePortal.view.Receipts",{});
        centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(receipts);
        //Ext.Msg.alert('Test',centerContainer.getItemId());
    },

    openCashItemsList: function(button) {

        //Ext.Msg.alert('Test','test');
        var itesmStore=Ext.data.StoreManager.lookup("CatalogListStore");
        itesmStore.load({
            callback: function(records, operation, success) {

            },
            scope: this
        });

        //var storeLoc=button.up("panel").down('#suppStore').getValue();
        var itemsList=Ext.create("CarePortal.view.CatalogList",{});
        var ordersWindow=Ext.create('Ext.window.Window', {
            title: 'Items List',
            resizable:false
        });



        ordersWindow.add(itemsList);
        ordersWindow.show();
        itemsList.down('#sourceID').setValue('Cashbook');

    },

    filterItems: function(field, newValue, oldValue, eOpts) {
        var grid = field.up('grid');
        grid.store.clearFilter();
        if (newValue) {
            var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
            grid.store.filter({
                filterFn: function(item) {
                    return matcher.test(item.get('item_description')) ||
                        matcher.test(item.get('partcode'));
                }
            });
        }
    },

    setOrderNo: function(field, newValue, oldValue, eOpts) {
        var orderNo=this.getOrderNo('4');

        this.getOrdersform().down('#orderDate').setValue(new Date());
    },

    getOrderNo: function(typeID) {
        var transNo=0;
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getTransNos',
            params: {
                typeID:typeID
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                transNo=resp[0].transNo;
               if(typeID==4){
                   this.getOrdersform().down('#orderNo').setValue(transNo);
               }else if(typeID==3){
                   //Ext.Msg.alert('Test',transNo);
                   this.getIssuedrugs().down('#issuenumber').setValue(transNo);
               }

            },
            failure:function(response){
                var resp = JSON.parse(response);
                Ext.Msg.alert('Error',resp.Error);
             },
            scope: this
        });


        return transNo;
    },

    addSelectedItems2: function(gridpanel, record, item, index, e, options) {
        var sourceID=this.getItemslist().down('#sourceID').getValue();
        var store =Ext.data.StoreManager.lookup('ItemsListStore');
        var store1 =Ext.data.StoreManager.lookup('OrderStocksStore');
        store.remove(record);
        store1.add(record);



    },

    saveOrder: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var orderStore =Ext.data.StoreManager.lookup('OrderStocksStore');
        var ordersRecord = orderStore.getRange();

        var gridData = Array();

        Ext.each(ordersRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
                    Ext.Msg.alert("Orders","Internal Order Saved Successfully");
                    form.reset();
                    //orderStore.load({});
                    orderStore.removeAll();
                    orderStore.sync();

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Order. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    setDeptName: function(field, record) {
        // Ext.Msg.alert('test',record.get('Description'));
        field.up('form').down('#deptName').setValue(record.get('Description'));
    },

    setSuppName: function(field, record) {
        field.up('form').down('#suppName').setValue(record.get('Description'));
    },

    selectPendingOrders: function(field, record) {
        var pendingOrders =Ext.data.StoreManager.lookup('ServiceOrderStore');
        pendingOrders.load({
            params:{
                store:record.get('ID')
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    loadDetailedOrder: function(gridpanel, record, item, index, e, eOpts) {
        var pendingOrders =Ext.data.StoreManager.lookup('OrderDetailStore');
        pendingOrders.load({
            params:{
                store:record.get('sup_storeid'),
                req_no:record.get('req_no')
            },
            callback: function(records, operation, success) {
                gridpanel.up('form').loadRecord(record);
            },
            scope: this
        });



    },

    saveSales: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var salesStore =Ext.data.StoreManager.lookup('CashSaleStore');
        var salesRecord = salesStore.getRange();

        var patientsList=Ext.data.StoreManager.lookup('PendingPatientBills');

        var receiptNo=button.up('form').down('#ReceiptNo').getValue();
        var payMode=button.up('form').down('#PayMode').getValue();
        var payer=button.up('form').down('#Payer').getValue();
        var pid=button.up('form').down('#Pid').getValue();
        var patient=button.up('form').down('#Pid').getValue();
        var cashpoint=button.up('form').down('#CashPoint').getValue();
         var shiftno=button.up('form').down('#ShiftNo').getValue();
        var names=button.up('form').down('#Names').getValue();
        var cashier=localStorage.getItem('UserName');
        var salesType=button.up('form').down('#salesType').getValue().salesType;

        var gridData = Array();

        Ext.each(salesRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
        //             Ext.Msg.alert("Sale","Sale Successful");

                    if(salesType=='cashSale'){
                        window.open('reports/newreceipt.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&payer='+payer+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=400,height=550,location=yes,resizable=no,scrollbars=no,status=yes");
                    }else if(salesType=='bill'){
                        window.open('reports/newreceipt2.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&payer='+payer+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=400,height=550,location=yes,resizable=no,scrollbars=no,status=yes");
                    }

                    form.reset();
                    salesStore.load({});
                    patientsList.load({});

                    this.setReceiptNo();

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not Service Order. Error='+action.result.errors.clientNo);
                },
                scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveSalesAdj: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var salesStore =Ext.data.StoreManager.lookup('PaidReceiptsStore');
        var salesRecord = salesStore.getRange();

        var patientsList=Ext.data.StoreManager.lookup('CashSalesStore');

        var receiptNo=button.up('form').down('#ReceiptNo').getValue();
        var payMode=button.up('form').down('#PayMode').getValue();
        var payer=button.up('form').down('#Payer').getValue();
        var pid=button.up('form').down('#Pid').getValue();
        var patient=button.up('form').down('#Pid').getValue();
        var cashpoint=button.up('form').down('#CashPoint').getValue();
        var shiftno=button.up('form').down('#ShiftNo').getValue();
        var names=button.up('form').down('#Names').getValue();
        var cashier=localStorage.getItem('UserName');
        var salesType=button.up('form').down('#salesType').getValue().salesType;

        var gridData = Array();

        Ext.each(salesRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
        //             Ext.Msg.alert("Sale","Sale Successful");

                    if(salesType=='cashSale'){
                        window.open('reports/newreceipt.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&payer='+payer+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=300,height=550,location=yes,resizable=no,scrollbars=no,status=yes");
                    }else if(salesType=='bill'){
                        window.open('reports/newreceipt2.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&payer='+payer+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=300,height=550,location=yes,resizable=no,scrollbars=no,status=yes");
                    }

                    form.reset();
                    salesStore.load({});
                    patientsList.load({});

                    this.setReceiptNo();

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not Adjust Sales.');
                },
                scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadLevelsForm: function(gridpanel, record, item, index, e, eOpts) {
        gridpanel.up('form').loadRecord(record);
    },

    saveStockAdjustments: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var levelsStore =Ext.data.StoreManager.lookup('StockLevelsStore');

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert("Orders","Stock level Updated Successfully");
                    form.reset();
                    levelsStore.load({});

                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not Stock levels. Error='+action.result.errors.clientNo);
                },
                scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openReceiptsAdj: function() {
        //Ext.Msg.alert('Test','Test');
        var receiptAdj=Ext.create("CarePortal.view.ReceiptsAdj",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(receiptAdj);

        // var pendingPresc =Ext.data.StoreManager.lookup('PendingPrescriptions');
        // pendingPresc.load({});
    },

    showPrescriptions: function(gridpanel, record, item, index, e, eOpts) {
        // Ext.Msg.alert('Selections','You selected '+ record.get('Names'));
        gridpanel.up('panel').up('panel').down('#Pid').setValue(record.get('Pid'));
        gridpanel.up('panel').up('panel').down('#Names').setValue(record.get('Names'));
        gridpanel.up('panel').up('panel').down('#EncounterNo').setValue(record.get('EncounterNo'));
        gridpanel.up('panel').up('panel').down('#PrescribeDate').setValue(record.get('PrescribeDate'));
        var prescDetails=gridpanel.up('panel').up('panel').down('#prescDetails');

        //**************************************************************************
        //Populate the prescription items
        //**************************************************************************

         var precStore=Ext.data.StoreManager.lookup("PrescriptionItemStore");

                var billSum=0;
                var data = [];
                precStore.load({
                    params: {
                        pid:record.get('Pid'),
                        encNr:record.get('EncounterNo'),
                        prescSource:"Prescription"
                    },
                    callback: function(records, operation, success) {
                        var tpl=new Ext.XTemplate(
                            '<Table id=pharmDetails>',
                            '<tr><td id=titles colspan=6>Prescriptions</td></tr>',
                            '<tr><th>Prescription No</th><th>Date</th><th>Description</th>',
                            ' <th>Dosage</th><th>Times Per Day</th><th>Days</th></tr>',
                            '<tpl for=".">',
                            '<tr><td>{Nr}</td><td>{PrescribeDate}</td><td>{Description}</td>',
                            '<td>{Dosage}</td><td>{TimesPerDay}</td><td>{Days}</td></tr>',
                            '<tr><td id=notes>Notes</td><td colspan=3 id=notes>{Notes}</td><td>Prescribed By:{Prescriber}</td><td><button id=edit>Edit</button><button id=delete>Delete</button></td></tr>',
                            '</tpl>',
                            '</table>'
                          );

                            precStore.each(function(record) {
                                data.push(record.getData());
                                //billSum += record.get('Total');
                            });

                            tpl.overwrite(prescDetails.body,data);
                    },
                    scope: this
                });

    },

    openPaymentsAdj: function() {
        var paymentsAdj = Ext.create('CarePortal.view.PaymentsAdj', {});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(paymentsAdj);


    },

    displayCashSale: function() {
        var salesForm = Ext.create('CarePortal.view.CashSales', {});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(salesForm);
    },

    loadSelectedDrugs: function(gridpanel, record, item, index, e, eOpts) {
        Ext.Msg.alert('Test',record.get('Pid'));
    },

    removeDose: function(button) {
        button.up('fieldset').destroy();
    },

    getTotalDosage: function(field, newValue, oldValue, eOpts) {
        var dose=field.up('fieldset').down('#dose').getValue();
        var timesperday=field.up('fieldset').down('#timesperday').getValue();
        var days=field.up('fieldset').down('#days').getValue();
        var total=parseInt(dose)*parseInt(timesperday)*parseInt(days);

        field.up('fieldset').down('#total').setValue(Math.round(total));

    },

    loadPatientDetails: function(field, e, eOpts) {
        var patientStore=Ext.data.StoreManager.lookup("PatientDetails");

        patientStore.load({
            params: {
                searchParam:field.getValue()
            },
            callback: function(records, operation, success) {
               // Ext.Msg.alert('Test',records[0].data.FirstName);
               // var resp = Ext.JSON.decode(response.responseText);
                names= records[0].data.FirstName+" "+records[0].data.LastName+" "+records[0].data.SurName;
                prescriber=records[0].data.Prescriber;
                prescdate=records[0].data.PrescribeDate;
                age=records[0].data.Age;
                payMode=records[0].data.Payment;
                encNr=records[0].data.EncounterNo;

                this.getCashsales().down('#Names').setValue(names);
                this.getCashsales().down('#Payer').setValue(names);
                this.getCashsales().down('#doctor').setValue(prescriber);
                this.getCashsales().down('#prescribeDate').setValue(prescdate);
                this.getCashsales().down('#age').setValue(age);
                this.getCashsales().down('#payMode').setValue(payMode);
                this.getCashsales().down('#encNr').setValue(encNr);

            },
            scope: this
        });

    },

    loadPrescriptionOrder: function(combo, record, eOpts) {
        //Ext.Msg.alert('Test',record.get('ID'));
        var prescStore=Ext.data.StoreManager.lookup("PrescriptionItemStore");
        var encNr=this.getIssuedrugs().down('#encNr').getValue();

        prescStore.load({
            params: {
                encNr:encNr,
                store:record.get('ID'),
                prescSource:'Prescription'
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    issueDrugs: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var orderStore =Ext.data.StoreManager.lookup('PrescriptionItemStore');
        var ordersRecord = orderStore.getRange();

        var gridData = Array();

        Ext.each(ordersRecord, function (record) {
            gridData.push(record.data);
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    gridData: Ext.util.JSON.encode(gridData)
                },
                success: function(form, action) {
                    Ext.Msg.alert("Prescription Order","Drugs Issued Successfully");
                    form.reset();
                    orderStore.removeAll();
                    orderStore.sync();

                    var peddingPrescStore=Ext.data.StoreManager.lookup("PendingPrescriptions");
                    peddingPrescStore.load({});


                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed', 'Could not save Order. Error='+action.result.errors.clientNo);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    openPayments: function() {
        var payments = Ext.create('CarePortal.view.Payments', {});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(payments);
    },

    returnDrugs: function(button) {
        //Ext.Msg.alert('test','test');
        var returnsStore=Ext.data.StoreManager.lookup('ReturnOrdersStore');
        //var ordersRecord = returnsStore.getRange();
        var requestparam=this.getReturnorders().down('#returnsparam').getValue();
        var sourcePresc=this.getReturnorders().down('#prescSource').getValue();
        var gridData = Array();

        var updatedRecords = this.getReturnorders().getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        returnsStore.proxy.extraParams = {
            selectedCount:params.length,
            pid:this.getReturnorders().down('#returnsparam').getValue()

        };

        returnsStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully returned drugs');
               // var returnsStore=Ext.data.StoreManager.lookup('BillStore');
                returnsStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating Bill');

            }
        });

    },

    previewDrugsToReturn: function(button) {
        var returnsStore =Ext.data.StoreManager.lookup('ReturnOrdersStore');
        var requestparam=this.getReturnorders().down('#returnsparam').getValue();
        var sourcePresc=this.getReturnorders().down('#prescSource').getValue();
        var storeLoc=this.getReturnorders().down('#storeLoc').getValue();
        returnsStore.load({
            params: {
                requestparam:requestparam,
                sourcePresc:sourcePresc,
                storeLoc:storeLoc
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    previewIssuedDrugs: function() {
        var formsContainer=Ext.create("CarePortal.view.DrugIssuesReports",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    previewInteralOrders: function() {
                var formsContainer=Ext.create("CarePortal.view.InternalOrdersReport",{});
                var centerContainer=this.getMainview().down("container[region=center]");
                centerContainer.removeAll();
                centerContainer.add(formsContainer);
    },

    previewStockAdjustments: function() {
        var formsContainer=Ext.create("CarePortal.view.StockAdjustmentsReport",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    onLaunch: function(application) {

    },

    previewMovements: function() {
        var formsContainer=Ext.create("CarePortal.view.StockMovementsReport",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    previewValuations: function() {
        var formsContainer=Ext.create("CarePortal.view.ValuationsReport",{});
        var centerContainer=this.getMainview().down("container[region=center]");
        centerContainer.removeAll();
        centerContainer.add(formsContainer);
    },

    loadValuation: function(button) {
        //Ext.Msg.alert('Test','test');
        var valuationStore =Ext.data.StoreManager.lookup('ValuationStore');
        var category=this.getDrugissuesreports().down('#itemCategory').getValue();

        valuationStore.load({
            params: {
                category:category
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    cancelOrder: function(button) {
               var reqno=button.up('panel').down('#requisionnumber').getValue();
                Ext.Ajax.request({
                    url: 'data/getDataFunctions.php?task=cancelOrder',
                    params: {
                        reqno:reqno
                    },
                    success: function(response){
                        var resp = Ext.JSON.decode(response.responseText);
                        Ext.Msg.alert('Order','Order No '+reqno+' Cancelled successfully');
                    },
                    failure:function(response){
                        var resp = JSON.parse(response);
                        Ext.Msg.alert('Error',resp.Error);
                     },
                    scope: this
                });

    },

    setIssueNo: function(field, newValue, oldValue, eOpts) {
         var orderNo=this.getOrderNo('3');

         this.getIssuedrugs().down('#issuenumber').setValue(orderNo);
    },

    getPressedKey: function(field, e, options) {
            if (e.getKey() == e.ENTER && field.getItemId()==='prescParams') {
             //   Ext.Msg.alert('Test',field.getItemId());
               this.searchPrescription();
            }else  if (e.getKey() == e.ENTER && field.getItemId()==='searchParam') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchItems();
            }else  if (e.getKey() == e.ENTER && field.getItemId()==='txtSearchReceipt') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchReceipt();
            }
    },

    searchPrescription: function() {
        var searchParam=this.getBills().down('#prescParams').getValue();
        var admSource=this.getBills().down('#admSource').getValue();
        var prescStore =Ext.data.StoreManager.lookup('PendingPrescriptions');

        if(admSource=='1'){
            encounterClass=1;
        }else{
            encounterClass=2;
        }


        prescStore.load({
            params: {
                prescParams: prescParams,
                encounterClass:encounterClass
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });

    },

    filterPrescriptions: function(field, newValue, oldValue, eOpts) {
        var grid = field.up('grid');
        grid.store.clearFilter();
        if (newValue) {
            var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
            grid.store.filter({
                filterFn: function(item) {
                    return matcher.test(item.get('Names')) ||
                        matcher.test(item.get('Pid'));
                }
            });
        }
    },

    getSalesType: function(field, newValue, oldValue, eOpts) {
        //Ext.Msg.alert('Radio Selection',field.getValue().salesType);
        if(field.getValue().salesType=='bill'){
            this.getCashsales().down('#patientDetails').show();
            this.getCashsales().down('#pendingBills').show();

        }else if(field.getValue().salesType=='cashSale'){
            this.getCashsales().down('#patientDetails').hide();
            this.getCashsales().down('#pendingBills').hide();
            this.getCashsales().down('#Payer').setValue('Walkin Patient');
        }
        this.setReceiptNo();
    },

    loadBill: function(gridpanel, record, item, index, e, options) {
        //Ext.Msg.alert('Test', gridpanel.getItemId());
        pid=record.get('Pid');
        names= record.get('Names');


        if(gridpanel.getItemId()=='pendingBills'){
            this.getCashsales().down('#Names').setValue(names);
            this.getCashsales().down('#Pid').setValue(pid);
            this.getCashsales().down('#Payer').setValue(names);
            billNumber=record.get('BillNumber');
            encNr=record.get('EncounterNo');
            this.getCashsales().down('#BillNumber').setValue(billNumber);
            this.getCashsales().down('#encNr').setValue(encNr);


            CashPoint=this.getCashsales().down('#CashPoint').getValue();
            ShiftNo=this.getCashsales().down('#ShiftNo').getValue();
            ReceiptNo=this.getCashsales().down('#ReceiptNo').getValue();
            var cashSaleStore =Ext.data.StoreManager.lookup('CashSaleStore');
             this.setReceiptNo();

            cashSaleStore.load({
                params: {
                    pid: pid,
                    cashpoint:CashPoint,
                    shiftNo:ShiftNo
                },
                callback: function(records, operation, success) {

                },
                scope: this

            });
        }else{
            billNumber=record.get('Pid');
            ShiftNo=record.get('Shift_no');
            CashPoint=record.get('cash_point');
            ReceiptNo=record.get('ref_no');
            this.getCashsalesadj().down('#Names').setValue(names);
            this.getCashsalesadj().down('#Payer').setValue(names);
            this.getCashsalesadj().down('#Pid').setValue(pid);
            this.getCashsalesadj().down('#ReceiptNo').setValue(record.get('ref_no'));
            this.getCashsalesadj().down('#CurrDate').setValue(record.get('currdate'));
            this.getCashsalesadj().down('#ShiftNo').setValue(record.get('Shift_no'));
            this.getCashsalesadj().down('#CashPoint').setValue(record.get('cash_point'));

            var cashStore =Ext.data.StoreManager.lookup('PaidReceiptsStore');

            cashStore.load({
                params: {
                    cashpoint:CashPoint,
                    shiftNo:ShiftNo,
                    receipt:ReceiptNo
                },
                callback: function(records, operation, success) {

                },
                scope: this
            });

        }

    },

    startShift: function(button) {
        var cashpoint=button.up('form').down('#cashpoint').getValue();
        // Ext.Msg.alert('Test',cashpoint);
        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    button.up('window').close();
                     var jsonResp = Ext.decode(action.response.responseText);
                    localStorage.setItem('ShiftNo',jsonResp.ShiftNo);
                    localStorage.setItem('shiftStatus','Opened');
                    localStorage.setItem('CashPoint',cashpoint);

                    centerDetails=Ext.create("CarePortal.view.CashSales",{});
                    centerContainer.removeAll();

                    centerContainer.add(centerDetails);
                    centerContainer.setTitle("Cash Sale");
                    this.setReceiptNo();

                },
                failure: function(form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);
                    if(jsonResp.ShiftStatus=='Active'){

                        button.up('window').close();
                        Ext.Msg.alert('Failed', 'Could not start shift. Shift already started \n Proceed to Cash Sales');
                        centerDetails=Ext.create("CarePortal.view.CashSales",{});
                        centerContainer.removeAll();

                        centerContainer.add(centerDetails);
                        centerContainer.setTitle("Cash Sale");
                        this.setReceiptNo();



                    }

                },
                scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }

    },

    endShift: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
                form.submit({
                    success: function(form, action) {
                        Ext.Msg.alert("End Shift","Shift Ended Successfully");
                        centerDetails=Ext.create("CarePortal.view.Home",{});
                        centerContainer.removeAll();

                        centerContainer.add(centerDetails);
                        centerContainer.setTitle("HMIS Dashboard");

                        localStorage.setItem('shiftStatus','Closed');
                         localStorage.setItem('ShiftNo','');
                        localStorage.setItem('CashPoint','');

                        button.up('window').close();


                    },
                    failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Could not End Shift.');
                    }
                });
            } else { // display error alert if the data is invalid
                Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
            }
    },

    reprintReceipt: function(button) {
        var grid=button.up('grid');
        var reprintType=grid.down('#reprintType').getValue().reprintType;
        if(reprintType===''){
            Ext.Msg.alert('Sales Type','Please select a Sales Type');
        }else{

            var srecords=grid.getSelectionModel().getSelection();

            var selectedRowIndexes = [];
            var pids='';

            Ext.iterate(srecords,function(record,index){

                selectedRowIndexes.push(grid.getStore().indexOf(record));

                if(grid.getSelectionModel().hasSelection()){
                    var receiptNo=record.get('ref_no');
                    var payMode=record.get('pay_mode');
                    var payer=record.get('payer');
                    var pid=record.get('Pid');
                    var cashpoint=record.get('cash_point');
                    var names=record.get('Names');
                    var shiftno=record.get('Shift_no');
                    var cashier=record.get('cashier');


                    if(reprintType=='CashSale'){
                        window.open('reports/newreceipt.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&payer='+payer+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=300,height=550,location=yes,resizable=no,scrollbars=no,status=yes");
                    }else if(reprintType=='Receipt'){
                        window.open('reports/newreceipt2.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&payer='+payer+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=300,height=550,location=yes,resizable=no,scrollbars=no,status=yes");
                    }

                }else{
                    Ext.Msg.alert('Test','You have not Selected any Item to Remove');
                }

            });
        }


    },

    setReceiptNo: function() {
        var transNo=0;
        //var cashPoint=this.getCashsales().down('#CashPoint').getValue();
        var cashPoint=localStorage.getItem('CashPoint');
        //Ext.Msg.alert('set Receipt',cashPoint);
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getNextReceiptNo',
            params: {
                cashpoint:cashPoint
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);

                this.getCashsales().down('#ReceiptNo').setValue(resp.nextReceipt);
                this.getCashsales().down('#ShiftNo').setValue(resp.shiftNo);
                this.getCashsales().down('#CurrDate').setValue(resp.currDate);
                this.getCashsales().down('#CashPoint').setValue(resp.cashPoint);

            },
            failure:function(response){
                // var resp = JSON.parse(response);
                 Ext.Msg.alert('Error',resp.Error);
            },
            scope: this
        });


        return transNo;
    },

    setReceiptNo1: function() {
        var transNo=0;
        //var cashPoint=this.getCashsales().down('#CashPoint').getValue();
        var cashPoint=localStorage.getItem('CashPoint');
        //Ext.Msg.alert('set Receipt',cashPoint);
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getNextReceiptNo',
            params: {
                cashpoint:cashPoint
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);

                this.getReceipts().down('#ReceiptNo').setValue(resp.nextReceipt);
                this.getReceipts().down('#ShiftNo').setValue(resp.shiftNo);
                this.getReceipts().down('#CurrDate').setValue(resp.currDate);
                this.getReceipts().down('#CashPoint').setValue(resp.cashPoint);

            },
            failure:function(response){
                // var resp = JSON.parse(response);
                 Ext.Msg.alert('Error',resp.Error);
            },
            scope: this
        });


        return transNo;
    },

    openShifts: function(button) {
        var shiftStore =Ext.data.StoreManager.lookup('ShiftsStore');
        shiftStore.load({});

        shifts=Ext.create("CarePortal.view.Shifts",{});
        //centerContainer.removeAll();
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Shifts",
            resizable:true,
            closable:true
        });

        containterWindows.add(shifts);
        containterWindows.show();

        shifts.down('#formStatus').setValue(button.up('grid').getItemId());
    },

    loadReceipts: function(gridpanel, record, item, index, e, options) {

        var formSource=gridpanel.up('grid').down('#formStatus').getValue();
        this.getShiftsreportheader().down('#cashPoint').setValue(record.get('CashPoint'));
        this.getShiftsreportheader().down('#shiftNo').setValue(record.get('ShiftNo'));

        if(formSource=='ShiftReport'){
            var receiptsStore =Ext.data.StoreManager.lookup('ReceiptStore');
            receiptsStore.load({
                params:{
                    cashpoint:record.get('CashPoint'),
                    shiftNo:record.get('ShiftNo')
                },
                callback: function(records, operation, success) {

                    //gridpanel.up('window').close();
                },
                scope: this
            });
        }else if(formSource=='ItemSalesSummary'){
            var itemsStore =Ext.data.StoreManager.lookup('ItemSalesSummaryStore');
            itemsStore.load({
                params:{
                    cashpoint:record.get('CashPoint'),
                    shiftNo:record.get('ShiftNo')
                },
                callback: function(records, operation, success) {

                    //gridpanel.up('window').close();
                },
                scope: this
            });
        }else if(formSource=='PatientsSummary'){
            var patientsStore =Ext.data.StoreManager.lookup('PatientsSummaryStore');
            patientsStore.load({
                params:{
                    cashpoint:record.get('CashPoint'),
                    shiftNo:record.get('ShiftNo')
                },
                callback: function(records, operation, success) {

                    //gridpanel.up('window').close();
                },
                scope: this
            });
        }


    },

    previewCashReport: function(button) {
        var formSource=button.up('panel').down('#formStatus').getValue();
               // Ext.Msg.alert('Test',button.up('panel').down('#formStatus').getValue());

        if(formSource=='ShiftReport'){
            var cashpoint=this.getCashbookreportsheader().down('#cashPoint').getValue();
            var shiftNo=this.getCashbookreportsheader().down('#shiftNo').getValue();

            var receiptsStore =Ext.data.StoreManager.lookup('ReceiptStore');
            receiptsStore.load({
                params:{
                    cashpoint:cashpoint,
                    shiftNo:shiftNo
                },
                callback: function(records, operation, success) {

                    //         gridpanel.up('window').close();
                },
                scope: this
            });
        }else if(formSource=='CashPointsSummary'){
            var startDate=this.getCashbookreportsheader().down('#startDate').getValue();
            var endDate=this.getCashbookreportsheader().down('#endDate').getValue();
            var summaryStore =Ext.data.StoreManager.lookup('CashpointsSummaryStore');
            summaryStore.load({
                params:{
                   startDate:startDate,
                    endDate:endDate
                },
                callback: function(records, operation, success) {

                    //         gridpanel.up('window').close();
                },
                scope: this
            });
        }else if(formSource=='CollectionsBreakdown'){
            var startDate=this.getCashbookreportsheader().down('#startDate').getValue();
            var endDate=this.getCashbookreportsheader().down('#endDate').getValue();
            var collectionsStore =Ext.data.StoreManager.lookup('CashSaleSummariesStore');
            collectionsStore.load({
                params:{
                    startDate:startDate,
                    endDate:endDate
                },
                callback: function(records, operation, success) {

                    //         gridpanel.up('window').close();
                },
                scope: this
            });
        }

    },

    deleteSelectedItem: function(button) {
        var itemsGrid=button.up('form').down('#itemsGrid');
        itemToDelete=itemsGrid.getView().getSelectionModel().getSelection();
        //itemsStore=Ext.data.StoreManager.lookup('CashSaleStore');
        itemsStore=itemsGrid.getStore();

        itemsStore.remove(itemToDelete);
    },

    setPaymentDetails: function(field, newValue, oldValue, eOpts) {
        //Ext.Msg.alert('Test',newValue);
        field.up('form').down('#paymentDate').setValue(new Date());
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getCashPoints',
            params: {
                cashpoint:newValue
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                //transNo=resp[0].transNo;
               // field.up('form').down('#description').setValue(resp[0].Description);
                field.up('form').down('#voucherNo').setValue(resp[0].NextReceiptNo);

            },
            failure:function(response){
                var resp = JSON.parse(response);
                Ext.Msg.alert('Error',resp.Error);
            },
            scope: this
        });
    },

    getSuppliers: function(button) {
        var suppliers=Ext.create("CarePortal.view.Suppliers",{});

        var suppliersWindow=Ext.create('Ext.window.Window', {
            title: 'Suppliers List',
            resizable:false
        });

        suppliersWindow.add(suppliers);
        suppliersWindow.show();
    },

    openGlAccounts: function(button) {
        //Ext.Msg.alert('Tes','Test');
        var glsForm=Ext.create("CarePortal.view.GeneralLedger",{});

        var glsWindow=Ext.create('Ext.window.Window', {
            title: 'Chart of Accounts',
            resizable:false
        });

        glsWindow.add(glsForm);
        glsWindow.show();
    },

    filterReceipts: function(field, newValue, oldValue, eOpts) {
        var grid = field.up('grid');
        grid.store.clearFilter();
        if (newValue) {
            var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
            grid.store.filter({
                filterFn: function(item) {
                    return matcher.test(item.get('Names')) ||
                        matcher.test(item.get('Pid'));
                }
            });
        }
    },

    openDebtors: function(button) {
        var debtorsForm=Ext.create("CarePortal.view.Debtors",{});

        var debtorsWindow=Ext.create('Ext.window.Window', {
            title: 'Debtors List',
            resizable:false
        });

        debtorsWindow.add(debtorsForm);
        debtorsWindow.show();
    },

    openSuppliers: function(button) {
        var suppliersForm=Ext.create("CarePortal.view.Suppliers",{});

        var suppliersWindow=Ext.create('Ext.window.Window', {
            title: 'Suppliers List',
            resizable:false
        });

        suppliersWindow.add(suppliersForm);
        suppliersWindow.show();
    },

    openLedgers: function(button) {
        var glsForm=Ext.create("CarePortal.view.GeneralLedger",{});

        var glsWindow=Ext.create('Ext.window.Window', {
            title: 'Chart of Accounts',
            resizable:false
        });

        glsWindow.add(glsForm);
        glsWindow.show();
    },

    addReceiptItems: function(gridpanel, record, item, index, e, options) {
        //Ext.Msg.alert('test',gridpanel.up('grid').getItemId());
        var sourcePanel=gridpanel.up('grid').getItemId();
        var store1 =Ext.data.StoreManager.lookup('LedgersStore');

        if(sourcePanel=='debtorslist2'){
            var store =Ext.data.StoreManager.lookup('DebtorsList');
            store1.add([
                {ledger: 'DB',code: record.get('accno') ,Name: record.get('name'),Amount: ''}
            ]);
            store.remove(record);
        }else if(sourcePanel=='supplierslist'){
            var store =Ext.data.StoreManager.lookup('SuppliersStore');
            store1.add([
                {ledger: 'SUP',code: record.get('SupID') ,Name: record.get('Description'),Amount: ''}
            ]);
            store.remove(record);
        }else if(sourcePanel=='generalledgers'){
            var store =Ext.data.StoreManager.lookup('GeneralLedgerStore');
            store1.add([
                {ledger: 'GL',code: record.get('AccountCode') ,Name: record.get('AccountName'),Amount: ''}
            ]);
            store.remove(record);
        }

    },

    saveReceipt: function(button) {
          var form = button.up('form').getForm(); // get the basic form
                var ledgerStore =Ext.data.StoreManager.lookup('LedgersStore');
                var ledgerRecord = ledgerStore.getRange();


                var receiptNo=button.up('form').down('#ReceiptNo').getValue();
                var payMode=button.up('form').down('#PayMode').getValue();
                var pid=button.up('form').down('#Pid').getValue();
                var patient=button.up('form').down('#Pid').getValue();
                var cashpoint=button.up('form').down('#CashPoint').getValue();
                var shiftno=button.up('form').down('#ShiftNo').getValue();
                var names=button.up('form').down('#PatientName').getValue();
                var cashier=localStorage.getItem('UserName');
        //         var salesType=button.up('form').down('#salesType').getValue().salesType;

                var gridData = Array();

                Ext.each(ledgerRecord, function (record) {
                    gridData.push(record.data);
                });

                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        params:{
                            gridData: Ext.util.JSON.encode(gridData)
                        },
                        success: function(form, action) {
                                window.open('reports/newreceipt.php?refno='+receiptNo+'&cashier='+cashier+'&paymode='+payMode+'&patientid='+pid+'&patientname='+names+'&total=total&rtext=rtext&cash_point='+cashpoint+"&shiftNo="+shiftno,"receipt","menubar=no,toolbar=no,width=300,height=550,location=yes,resizable=no,scrollbars=no,status=yes");

                            form.reset();
        //                     ledgerStore.clearData();
        //                     ledgerStore.removeAll();
                            button.up('form').down('#receiptsGrid').getStore().removeAll();
                            button.up('form').down('#receiptsGrid').getStore().sync();

                            this.setReceiptNo1();

                        },
                        failure: function(form, action) {
                            Ext.Msg.alert('Failed', 'Could not Service Order. Error='+action.result.errors.clientNo);
                        },
                        scope:this
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }
    },

    savePayments: function(button) {
          var form = button.up('form').getForm(); // get the basic form
                var ledgerStore =Ext.data.StoreManager.lookup('LedgersStore');
                var ledgerRecord = ledgerStore.getRange();
                 var CashPoint=button.up('form').down('#cashPoint').getValue();
                var voucherNo=button.up('form').down('#voucherNo').getValue();
                 var payMode=button.up('form').down('#payMode').getValue();



                var gridData = Array();

                Ext.each(ledgerRecord, function (record) {
                    gridData.push(record.data);
                });

                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        params:{
                            gridData: Ext.util.JSON.encode(gridData)
                        },
                        success: function(form, action) {
                            Ext.Msg.alert('Success', 'Successfully made payments');
                            window.open('reports/payment_voucher.php?cashpoint='+CashPoint+'&voucherNo'+voucherNo+'&payMode='+payMode ,"Payments","menubar=no,toolbar=no,width=300,height=550,location=yes,resizable=no,scrollbars=no,status=yes");

                            form.reset();
                            ledgerStore.load({});

                            this.setReceiptNo();

                        },
                        failure: function(form, action) {
                            Ext.Msg.alert('Failed', 'Could not send payments, pls check your payments');
                        },
                        scope:this
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }
    },

    printCashReport: function(button) {
        var formStatus=button.up('panel').down('#formStatus').getValue();
        var report='';
        var cashpoint=button.up('gridpanel').down('#cashPoint').getValue();
        var shiftNo=button.up('gridpanel').down('#shiftNo').getValue();

        if(formStatus==='ShiftReport'){
            report='shift_report_pdf';
        }else if(formStatus==='PatientsSummary'){
            report='shift_report_Summary_pdf';
        }else if(formStatus==='ItemSalesSummary'){
            report='shift_reportByItem_pdf';
        }else if(formStatus==='CashPointsSummary'){
            report='shift_reportByItem_pdf';
        }



        window.open('reports/'+report+'.php?cashpoint=' + cashpoint + '&shiftno=' + shiftNo, "Shift Report",
                            "menubar=no,toolbar=no,width=600,height=800,location=yes,resizable=yes,scrollbars=yes,status=yes");
    },

    clearGrid: function(field, newValue, oldValue, eOpts) {
        var store =Ext.data.StoreManager.lookup('CashSaleStore');
        store.removeAll();
    },

    openReports: function(button) {
        var strReport=button.getItemId();

        shiftReport=Ext.create("CarePortal.view."+strReport,{});
        centerContainer=button.up('panel').down("#cashbookReports");
        centerContainer.removeAll();

        centerContainer.add(shiftReport);

        shiftReport.down('#formStatus').setValue(strReport);

    },

    addSelectedItems3: function(gridpanel, record, item, index, e, options) {
        var store =Ext.data.StoreManager.lookup('ItemsListStore');
        var store1 =Ext.data.StoreManager.lookup('CashSaleStore');
        store.remove(record);
        store1.add(record);

    },

    openGlAccountsForm: function(button) {
        var glAccountForm=Ext.create("CarePortal.view.GlAccountForm",{});
        var glAccounWindows=Ext.create('Ext.window.Window', {
            title: 'GL Accounts Entry Form',
            resizable:false,
            closable:true
        });

        glAccounWindows.add(glAccountForm);
        glAccounWindows.show();

         var store =Ext.data.StoreManager.lookup('AccountGroupsStore');
        store.load({});
    }

});
