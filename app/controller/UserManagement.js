/*
 * File: app/controller/UserManagement.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.controller.UserManagement', {
    extend: 'Ext.app.Controller',
    alias: 'controller.usermanagement',

    stores: [
        'UserRolesStore'
    ],
    views: [
        'UserManagement',
        'UsersList'
    ],

    refs: {
        newuserform: {
            selector: 'newuserform',
            xtype: 'newuserform'
        },
        usermanagement: {
            selector: 'usermanagement',
            xtype: 'usermanagement'
        },
        userslist: {
            selector: 'userslist',
            xtype: 'userslist'
        }
    },

    loadUserRoles: function(gridpanel, record, item, index, e, eOpts) {
        //var ids=record.get('Roles');
        //Ext.Msg.alert('Test',record.get('UserName'));

        var userRolesStore=Ext.data.StoreManager.lookup('UserRolesStore');
        userRolesStore.load({
            params: {
                userName:record.get('UserName')
            }
        });
    },

    openUserForm: function(button) {
        userform= Ext.create('CarePortal.view.NewUserForm', {});
        var usersWin=Ext.create('Ext.window.Window', {
            title: 'New User Form',
            closable: true,
        });


        userform.query('textfield[name="formStatus"]')[0].setValue('insert');


        usersWin.add(userform);
        usersWin.show();
    },

    init: function(application) {
        this.control({
            '#usersGrid':{
                itemclick:this.loadUserRoles
            },
            '#cmdNewUser':{
                click:this.openUserForm
            },
            '#cmdSaveUser':{
                click:this.saveUser
            },
            'userslist actioncolumn[id=deleteUser]':{
                click:this.deleteUser
            },
            'userslist actioncolumn[id=updateUser]':{
                click:this.updateUser
            },
            '#updateRoles':{
                click:this.updateRoles
            }
        });
    },

    saveUser: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var pass1=button.up('form').getForm().findField('password1').getValue();
        var pass2=button.up('form').getForm().findField('password2').getValue();

        if(pass1!=pass2){
            Ext.Msg.alert('Confirm Password','Sorry the two passwords do not match <br>'+pass1);
        }else{
            if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    //password:CryptoJS.MD5(pass1)
                    password:pass1
                },
                success: function(form, action) {
                    Ext.Msg.alert('Success', 'Saved new Item successfully.');

                    var win = button.up('window');
                    win.removeAll();
                    win.close();

                    var userInfo=Ext.data.StoreManager.lookup('UsersListStore');
                    userInfo.load({});

                },
                failure: function(form, action) {
                        Ext.Msg.alert('Failed', 'Error updating company please check your input values');
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
        }


    },

    deleteUser: function(view, rowIndex, colIndex, item, e, record, row) {

        var username=record.get('UserName');

            Ext.Msg.show({
                title:'Delete User?',
                msg: 'Are you sure you want to delete '+username,
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                fn: function(rec) {
                    if (rec === "yes") {
                        Ext.Ajax.request({
                            url: 'data/manageUsers.php?task=deleteUser',
                            params: {
                                userName:username
                            },
                            waitMsg: 'Deleting User ...',
                            success: function(response){
                                var text = response.responseText;
                                Ext.Msg.alert('Delete','Record Successfully deleted');
                                var userslist=Ext.data.StoreManager.lookup('UsersListStore');
                                userslist.load({});

                            },
                            failure:function(response){
                                var resp = JSON.parseJSON(response);
                                Ext.Msg.alert('Error','There was a problem deleting the User, Contact System Administrator');
                            }
                        });

                    }
                }
            });
    },

    updateRoles: function(button) {
        var rolesStore=Ext.data.StoreManager.lookup('UserRolesStore');

        var updatedRecords = this.getUsermanagement().down('#rolesGrid').getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        rolesStore.proxy.extraParams = {
            selectedCount:params.length //,
            //UserName:this.getBills().down('#txtSearch').getValue()
        };

        rolesStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully updated Roles');
                var rolesStore=Ext.data.StoreManager.lookup('UserRolesStore');
                rolesStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating User Roles');

            }
        });
    },

    updateUser: function(view, rowIndex, colIndex, item, e, record, row) {
        userform= Ext.create('CarePortal.view.NewUserForm', {});
        var usersWin=Ext.create('Ext.window.Window', {
            title: 'Update Users',
             closable: true
        });

        userform.query('textfield[name="formStatus"]')[0].setValue('update');
        usersWin.add(userform);
        usersWin.show();
        userform.getForm().loadRecord(record);

    }

});
