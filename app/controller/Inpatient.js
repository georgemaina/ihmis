/*
 * File: app/controller/Inpatient.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.controller.Inpatient', {
    extend: 'Ext.app.Controller',
    alias: 'controller.inpatient',

    models: [
        'DebitDetails',
        'BillNumbers',
        'InsuranceCompanies',
        'NhifRates',
        'ClinicalRooms',
        'WardInfo',
        'ItemsList',
        'EncounterDetails',
        'OccupancyList',
        'ReceiptModel',
        'Wards',
        'Vitals',
        'BillModel',
        'AdmissionTypes',
        'Admissions'
    ],
    stores: [
        'ReceiptStore',
        'BillNumbersStore',
        'EncounterNosStore',
        'VitalsStore',
        'Invoices',
        'EncounterDetailStore',
        'DebitStore',
        'InsuranceCompaniesStore',
        'ItemsListStore',
        'OccupancyStore',
        'PendingBills',
        'AdmissionsStore',
        'NhifRatesStore',
        'NhifClaimStore',
        'WardsListStore'
    ],
    views: [
        'Discharge',
        'ItemsList',
        'WaitingList',
        'VitalsForm',
        'WardOccupancy',
        'Credit',
        'InvoicePanel',
        'InvoicesList',
        'Debit',
        'FinaliseInvoice',
        'InsuranceCredit',
        'MenuDiagram',
        'IpNotes',
        'Admissions',
        'PatientChart',
        'NhifCreditForm',
        'UpdateDates'
    ],

    refs: {
        debit: {
            selector: 'debit',
            xtype: 'debit'
        },
        credit: {
            selector: 'credit',
            xtype: 'credit'
        },
        bills: {
            selector: 'bills',
            xtype: 'bills'
        },
        chargebeds: {
            selector: 'chargebeds',
            xtype: 'chargebeds'
        },
        itemslist: {
            selector: 'itemslist',
            xtype: 'itemslist'
        },
        nhifcredit: {
            selector: 'nhifcredit',
            xtype: 'nhifcredit'
        },
        finaliseinvoice: {
            selector: 'finaliseinvoice',
            xtype: 'finaliseinvoice'
        },
        interiminvoice: {
            selector: 'interiminvoice',
            xtype: 'interiminvoice'
        },
        invoicedetails: {
            selector: 'invoicedetails',
            xtype: 'invoicedetails'
        },
        receipts: {
            selector: 'receipts',
            xtype: 'receipts'
        },
        insurancecredit: {
            selector: 'insurancecredit',
            xtype: 'insurancecredit'
        },
        vitals: {
            selector: 'vitals',
            xtype: 'vitals'
        },
        invoices: {
            selector: 'invoices',
            xtype: 'invoices'
        },
        waitinglist: {
            selector: 'waitinglist',
            xtype: 'waitinglist'
        },
        vitalsform: {
            selector: 'vitalsform',
            xtype: 'vitalsform'
        },
        admissiondata: {
            selector: 'admissiondata',
            xtype: 'admissiondata'
        },
        wardoccupancy: {
            selector: 'wardoccupancy',
            xtype: 'wardoccupancy'
        },
        invoiceslist: {
            selector: 'invoiceslist',
            xtype: 'invoiceslist'
        },
        invoicepanel: {
            selector: 'invoicepanel',
            xtype: 'invoicepanel'
        },
        menudiagram: {
            selector: 'menudiagram',
            xtype: 'menudiagram'
        },
        ipnotes: {
            selector: 'ipnotes',
            xtype: 'ipnotes'
        },
        admissions: {
            selector: 'admissions',
            xtype: 'admissions'
        },
        inpatientnotes: {
            selector: 'inpatientnotes',
            xtype: 'inpatientnotes'
        },
        nhifcredits: {
            selector: 'nhifcredits',
            xtype: 'nhifcredits'
        },
        updatedates: {
            selector: 'updatedates',
            xtype: 'updatedates'
        }
    },

    init: function(application) {
        this.control({
            '#cmdItemsList':{
                click:this.getItemsList
            },
            '#itemsList':{
                itemdblclick:this.addSelectedItem3
            },
            '#cmdAddRow':{
                click:this.addRow
            },
            '#cmdSaveDebits':{
                click:this.saveDebits
            },
            '#txtPid':{
                blur:this.getEncounter
            },
            '#cmdSearchBills':{
                click:this.searchBills
            },
            '#cmdCombineBills':{
                click:this.combineBills
            },
            '#txtSearch':{
                specialkey:this.getPressedKey
            },
            '#cmdUpdateBill':{
                click:this.updateBillChanges
            },
            '#deleteItem':{
                click:this.deleteBillItem
            },
            'bills actioncolumn[id=deletebill2]':{
                click:this.deleteBillItem
            },
            '#cmdPreviewInterim':{
                click:this.previewInterimInvoice
            },
            '#txtSearchInterim':{
                blur:this.getBillNumbers
            },
            '#cmdDeleteSelected':{
                click:this.removeSelectedItems
            },
            '#cmdDeleteReceipts':{
                click:this.removeSelectedReceipts
            },
            '#cmdUpdateReceipts':{
                click:this.updateReceipts
            },
            '#txtPid2':{
                blur:this.getEncounterDetails
            },
            '#creditAmount':{
                blur:this.getBalance
            },
            '#cmdSaveInsuranceCredit':{
                click:this.saveInsuranceCredit
            },
            '#cmdSearchReceipt':{
                click:this.searchReceipt
            },
            '#txtPid3':{
                blur:this.getEncounterDetails2
            },
            '#nhifClientType':{
                change:this.getNhifRates
            },
            '#cmdSaveNhif':{
                click:this.saveNifCredit
            },
            '#cmdDeleteRow':{
                click:this.deleteRow
            },
            '#SaveVitals':{
                click:this.saveVitals
            },
            'wardoccupancy actioncolumn[id=openVitals]':{
                click:this.openVitals
            },
            'wardoccupancy actioncolumn[id=openNotes]':{
                click:this.openNotes
            },
            'wardoccupancy actioncolumn[id=openChart]':{
                click:this.openChart
            },
            'wardoccupancy actioncolumn[id=openVitalsChart]':{
                click:this.openVitalsChart
            },
            'wardoccupancy actioncolumn[id=openPrescription]':{
                click:this.openPrescription
            },
            'wardoccupancy actioncolumn[id=openLab]':{
                click:this.openLab
            },
            'wardoccupancy actioncolumn[id=openServices]':{
                click:this.openServices
            },
            'wardoccupancy actioncolumn[id=openDiagnosis]':{
                click:this.openDiagnosis
            },
            'wardoccupancy actioncolumn[id=openXray]':{
                click:this.openXray
            },
            '#cmdSearchItems':{
                click:this.searchItems
            },
            '#searchParam':{
                specialkey:this.getPressedKey
            },
            '#cmdClose':{
                click:this.closewindow
            },
            'wardoccupancy actioncolumn[id=discharge]':{
                click:this.openDischargeForm
            },
            'wardoccupancy actioncolumn[itemId=transfer]':{
                click:this.openTransferWindow
            },
            '#saveDischarge':{
                click:this.discharge
            },
            '#cmdSaveNotes':{
                click:this.saveNotes
            },
            '#notesGrid':{
                itemclick:this.loadNotes
            },
            '#cmdSearchAdmissions':{
                click:this.openSearchWindow
            },
            '#txtSearchParam':{
                change:this.filterPatients
            },
            '#cmdDoctorsNotes':{
                click:this.openDoctorsNotes
            },
            '#cmdNursesNotes':{
                click:this.openNursingNotes
            },
            '#Occupancy':{
                click:this.openIpReports
            },
            '#IpMobidity':{
                click:this.openIpReports
            },
            '#Admissions':{
                click:this.openIpReports,
                itemdblclick:this.setPatientNames
            },
            '#Discharges':{
                click:this.openIpReports
            },
            '#NhifCredits':{
                click:this.openIpReports
            },
            '#DoctorsWorkload':{
                click:this.openIpReports
            },
            '#InvoicesList':{
                click:this.openIpReports
            },
            '#cmdPreviewIpReports':{
                click:this.loadIpReports
            },
            'discharges button#cmdDischargeSummary':{
                click:this.openDischargeSummary
            },
            'discharges button#cmdDischargeNotes':{
                click:this.openNursesNotes
            },
            '#cmdUpdateDates':{
                click:this.openUpdateDates
            },
            '#cmdSaveDates':{
                click:this.saveAdmDisDates
            },
            '#transferWard':{
                change:this.showWards
            },
            '#wardsList':{
                change:this.showWards
            }
        });
    },

    getItemsList: function(button) {
        var itemsList=Ext.create('CarePortal.view.ItemsList', {});
        var itemsListWindow=Ext.create('Ext.window.Window', {
                    title: 'Items List',
                    resizable:true,
                    minWidth:300,
                    minHeight:300
                });

        itemsListWindow.add(itemsList);
        itemsListWindow.show();

    },

    addSelectedItem3: function(gridpanel, record, item, index, e, options) {
        var store =Ext.data.StoreManager.lookup('ItemsListStore');
        var store1 =Ext.data.StoreManager.lookup('DebitStore');
        store.remove(record);
        store1.add(record);
    },

    addRow: function(button) {
         var invoice_item = new Inpatient.model.ItemsList({
             PartCode: 'wes',
             Description: 'sds',
             Category: 'sds',
             Price:'12'
         });
    },

    saveDebits: function(button) {
        var form=button.up('form');

        var debitStore =Ext.data.StoreManager.lookup('DebitStore');
        var debitRecord = debitStore.getRange();

        var pid=this.getDebit().down('#txtPid').getValue();
        var debitDate=this.getDebit().down('#debitDate').getValue();
        var debitno=this.getDebit().down('#debitNo').getValue();
        var billNumber=this.getDebit().down('#billNumber').getValue();
        var encounterNo=this.getDebit().down('#encounterNo').getValue();


        var gridData = Array();

        Ext.each(debitRecord, function (record) {
            gridData.push(record.data);
        });

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveDebit',
            params: {
                pid:pid,
                debitDate:debitDate,
                debitNo:debitno,
                billNumber:billNumber,
                encounterNo:encounterNo,
                gridData: Ext.util.JSON.encode(gridData)
            },success: function(response){
                  //var encDetails= Ext.util.JSON.decode(response.responseText);
                  Ext.Msg.alert("Debits","Debit Saved Successfully");
                  form.reset();
                  debitStore.load({});
            },
            scope:this
        });

    },

    getEncounter: function(textfield, The, eOpts) {
        var pid=textfield.up('form').down('#txtPid').getValue();

        Ext.Ajax.request({
             url: 'data/getDataFunctions.php?task=getEncounter',
            params: {
                pid: pid
            },
            success: function(response){

                var encDetails= Ext.decode(response.responseText);

                 pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;
               //  Ext.ComponentQuery.query("#pname")[0].setValue(pnames);
                textfield.up('form').down('#pname').setValue(pnames);
                textfield.up('form').down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);
                textfield.up('form').down('#encounterNo').setValue(encDetails.encounterNr[0].EncounterNr);

                this.getDebitNo();
            },
            scope:this
        });
    },

    searchBills: function(button) {
        var searchParam=this.getBills().down('#txtSearch').getValue();
        var billNo=this.getBills().down('#cmbBill1').getValue();
        var billStore =Ext.data.StoreManager.lookup('BillStore');
        billStore.load({
            params: {
                pid: searchParam,
                bill_number:billNo
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });

        var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');
                    billStore2.load({
                        params: {
                            pid: searchParam
                        },
                        callback: function(records, operation, success) {

                        },
                        scope: this

                    });


    },

    combineBills: function(button) {
        var pid=this.getBills().down('#txtSearch').getValue();
        var bill1=this.getBills().down('#cmbBill1').getValue();
        var bill2=this.getBills().down('#cmbBill2').getValue();
        var enc1=this.getBills().down('#cmbEnc1').getValue();
        var enc2=this.getBills().down('#cmbEnc2').getValue();

        Ext.Msg.show({
            title:'Merge Bills?',
            message: 'Are you sure you want to MERGE the two Bills?',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'yes') {
                    Ext.Ajax.request({
                            url: 'data/getDataFunctions.php?task=combineBills',
                            params: {
                                pid:pid,
                                bill1:bill1,
                                bill2:bill2,
                                enc1:enc1,
                                enc2:enc2,
                            }
                        });
                } else if (btn === 'no') {
                    console.log('No pressed');
                } else {
                    console.log('Cancel pressed');
                }
            }
        });




    },

    getPressedKey: function(field, e, options) {
            if (e.getKey() == e.ENTER && field.getItemId()==='txtSearch') {
             //   Ext.Msg.alert('Test',field.getItemId());
               this.searchBills();
            }else  if (e.getKey() == e.ENTER && field.getItemId()==='searchParam') {
             //   Ext.Msg.alert('Test',field.getItemId());
                this.searchItems();
            }
    },

    updateBillChanges: function(button) {
        var billStore=Ext.data.StoreManager.lookup('BillStore');

        var updatedRecords = this.getBills().getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        billStore.proxy.extraParams = {
            selectedCount:params.length,
            pid:this.getBills().down('#txtSearch').getValue()
        };

        billStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully updated Bill');
                var billStore=Ext.data.StoreManager.lookup('BillStore');
                billStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating Bill');

            }
        });
    },

    deleteBillItem: function(view, rowIndex, colIndex, item, e, record, row) {
        // var rec = button.up('grid').getViewModel().get('record');
        // Ext.Msg.alert("Button clicked", "Hey! " + record.get('ID'));
        var ID=record.get('ID');

        Ext.Msg.show({
            title:'Delete Bill Item?',
            msg: 'Are you sure you want to delete',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(rec) {
                if (rec === "yes") {
                    Ext.Ajax.request({
                        url: 'data/getDataFunctions.php?task=deleteBillItem',
                        params: {
                            ID:record.get('ID'),
                            pid:record.get('Pid')
                        },
                        waitMsg: 'Deleting Item ...',
                        success: function(response){
                            var resp = Ext.JSON.decode(response.responseText);
                            Ext.Msg.alert('Delete',resp.Error);
                            var billStore=Ext.data.StoreManager.lookup('BillStore');
                            billStore.load({});

                        },
                        failure:function(response){
                            var resp = JSON.parse(response);
                            Ext.Msg.alert('Error',resp.Error);

                            //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');
                        }
                    });

                }
            }
        });
    },

    previewInterimInvoice: function(button) {
        //reportswindow=Ext.create('Inpatient.view.InvoiceDetails', {});
        var invoiceDetails=this.getInteriminvoice().down('#invoiceDetails');

        var pid=this.getInteriminvoice().down('#txtSearchInterim').getValue();
        var billNumber=this.getInteriminvoice().down('#cmbBillNumbers').getValue();

        var billStore=Ext.data.StoreManager.lookup("Invoices");

        billStore.load({
            params: {
                pid:pid,
                bill_number:billNumber
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        var billSum=0;
        var data = [];

        billStore.each(function(record){
          //  console.log(record);
            data.push(record.getData());
            billSum += record.get('Total');
        });

         //var data1= billStore.proxy.reader.transform;

         var tpl=new Ext.XTemplate(
                        '<Table id=billDetails>',
                        '<tr><th>Date</th><th>Service Description</th><th>Ref No</th><th>Price</th><th>Qty</th><th>Total</th></tr>',
                        '<tpl for=".">',
                            '<tr><td>{Bill_Date}</td>',
                            '<td>{Description}</td>',
                            '<td>{ID}</td>',
                            '<td align=right>{Price}</td>',
                            '<td>{Qty}</td>',
                            '<td align=right>{Total}</td></tr>',
                        '</tpl>',
                        '<tr><td colspan=2 class=totals>Totals</td><td class=totals></td><td class=totals> 0</td><td>{[this.getBillTotal() ]}</td></tr>',
                        '</table>',
                      {
                        getBillTotal:function(){
                            return billSum.toFixed(2);
                        }
                      }
         );


        tpl.overwrite(invoiceDetails.body,data);





    },

    getBillNumbers: function(pid,admType) {

        //var searchParam=this.getBills().down('#txtSearch').getValue();
        var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');
        billStore2.load({
            params: {
                pid: pid,
                admType:admType
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });


    },

    removeSelectedItems: function(button) {
        var grid=button.up('grid');

        var srecords=grid.getSelectionModel().getSelection();

        var selectedRowIndexes = [];
        var pids='';

        Ext.iterate(srecords,function(record,index){

            selectedRowIndexes.push(grid.getStore().indexOf(record));

            if(grid.getSelectionModel().hasSelection()){
                pids=pids+record.get('ID')+",";
                Ext.Msg.show({
                    title:'Delete Bill Items?',
                    msg: 'Are you sure you want to delete',
                    buttons: Ext.Msg.YESNOCANCEL,
                    icon: Ext.Msg.QUESTION,
                    fn: function(rec) {
                        if (rec === "yes") {
                            Ext.Ajax.request({
                                url: 'data/getDataFunctions.php?task=deleteBillItem',
                                params: {
                                    ID:pids,
                                    pid:record.get('Pid')
                                },
                                waitMsg: 'Deleting Item ...',
                                success: function(response){
                                    var resp = Ext.JSON.decode(response.responseText);
                                    Ext.Msg.alert('Delete',resp.Error);
                                    var billStore=Ext.data.StoreManager.lookup('BillStore');
                                    billStore.load({});

                                },
                                failure:function(response){
                                    var resp = JSON.parse(response);
                                    Ext.Msg.alert('Error',resp.Error);

                                    //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');
                                }
                            });

                        }
                    }
                });

            }else{
                 Ext.Msg.alert('Test','You have not Selected any Item to Remove');
            }

        });
    },

    removeSelectedReceipts: function(button) {
         var grid=button.up('grid');

                var srecords=grid.getSelectionModel().getSelection();

                var selectedRowIndexes = [];
                var pids='';

                Ext.iterate(srecords,function(record,index){

                    selectedRowIndexes.push(grid.getStore().indexOf(record));

                    if(grid.getSelectionModel().hasSelection()){
                        pids=pids+record.get('Sale_ID')+",";
                        Ext.Msg.show({
                            title:'Delete Receipt Items?',
                            msg: 'Are you sure you want to delete',
                            buttons: Ext.Msg.YESNOCANCEL,
                            icon: Ext.Msg.QUESTION,
                            fn: function(rec) {
                                if (rec === "yes") {
                                    Ext.Ajax.request({
                                        url: 'data/getDataFunctions.php?task=deleteReceiptItem',
                                        params: {
                                            ID:pids,
                                            pid:record.get('Pid')
                                        },
                                        waitMsg: 'Deleting Receipt ...',
                                        success: function(response){
                                            var resp = Ext.JSON.decode(response.responseText);
                                            Ext.Msg.alert('Delete',resp.Error);
                                            var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');
                                            receiptStore.load({});

                                        },
                                        failure:function(response){
                                            var resp = JSON.parse(response);
                                            Ext.Msg.alert('Error',resp.Error);

                                            //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');
                                        }
                                    });

                                }
                            }
                        });

                    }else{
                         Ext.Msg.alert('Test','You have not Selected any Item to Remove');
                    }

                });
    },

    updateReceipts: function(button) {


        var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');

        var updatedRecords = this.getReceipts().getStore().getUpdatedRecords();
        params=[];
        Ext.each(updatedRecords,function(record){
         params.push(record.data);
        });


        receiptStore.proxy.extraParams = {
            selectedCount:params.length,
            pid:this.getReceipts().down('#txtSearchReceipt').getValue()
        };

        Ext.Msg.alert('Update','Successfully updated Receipt');

        receiptStore.sync({
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Update','Successfully updated Receipt');
                var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');
                receiptStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response.responseText);
                Ext.Msg.alert('Error','Error Updating Receipt');

            }
        });
    },

    getEncounterDetails: function(textField, the, eOpts) {
        //Ext.Msg.alert('current Form',textField.getValue());


        var pid=textField.getValue();
        // var pnames='as';
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getEncounter',
            params: {
                pid: pid
            },
            success: function(response){
                var encDetails= Ext.util.JSON.decode(response.responseText);
                pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;

                this.getInsurancecredit().down('#pname').setValue(pnames);
                this.getInsurancecredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);
                this.getInsurancecredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);
                this.getInsurancecredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);
                this.getInsurancecredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);
                this.getInsurancecredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);
                this.getInsurancecredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);

                var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');
                billnumberStore.load({
                    params:{
                        pid:pid
                    }
                });

                this.generateCreditNo();
                this.getBillAmount(pid,encDetails.encounterNr[0].BillNumber);

            },
            scope: this
        });
    },

    generateCreditNo: function() {
         // var pnames='as';
                Ext.Ajax.request({
                    url: 'data/getDataFunctions.php?task=getCreditNo',
                    success: function(response){
                         var respText= Ext.util.JSON.decode(response.responseText);
                         if(respText.credits[0].creditNo==1){
                             creditNo=1001;
                         }else{
                             creditNo=respText.credits[0].creditNo;
                         }

                        this.getInsurancecredit().down('#creditNo').setValue(creditNo);

                    },
                    scope: this
                });
    },

    getBillAmount: function(pid, billNumber) {
        var pid=this.getInsurancecredit().down('#txtPid2').getValue();
        var billNumber=this.getInsurancecredit().down('#billNumber').getValue();

        Ext.Ajax.request({
             url: 'data/getDataFunctions.php?task=getTotalBill',
             params:{
                 pid:pid,
                 bill_number:billNumber
             },
             success: function(response){
                 var respText= Ext.util.JSON.decode(response.responseText);

                 this.getInsurancecredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);

             },
             scope: this
         });
    },

    getBalance: function(textField,the,eOpts) {
             var invoiceAmount=this.getInsurancecredit().down('#invoiceAmount').getValue();
             var creditAmount=textField.getValue();
             var balance=parseInt(invoiceAmount-creditAmount);

             this.getInsurancecredit().down('#balance').setValue(balance);
    },

    saveInsuranceCredit: function(button) {
        var form = button.up('form'); // get the form panel
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', action.result.msg);

                    form.reset();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed',  action.result.msg);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    searchReceipt: function(button) {
        var searchParam=this.getReceipts().down('#txtSearchReceipt').getValue();

        var receiptStore =Ext.data.StoreManager.lookup('ReceiptStore');
        receiptStore.load({
            params: {
                pid: searchParam
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });


    },

    getEncounterDetails2: function(textField, the, eOpts) {
                var pid=textField.getValue();
                // var pnames='as';
                Ext.Ajax.request({
                    url: 'data/getDataFunctions.php?task=getEncounter',
                    params: {
                        pid: pid
                    },
                    success: function(response){
                        var encDetails= Ext.util.JSON.decode(response.responseText);
                        pnames=encDetails.encounterNr[0].FirstName+" "+encDetails.encounterNr[0].LastName+" "+encDetails.encounterNr[0].SurName;

                        this.getNhifcredit().down('#pname').setValue(pnames);
                        this.getNhifcredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);
                        this.getNhifcredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);
                        this.getNhifcredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);
                        this.getNhifcredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);
                        this.getNhifcredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);
                        this.getNhifcredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);
                        this.getNhifcredit().down('#ward').setValue(encDetails.encounterNr[0].Ward);

                        var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');
                        billnumberStore.load({
                            params:{
                                pid:pid
                            }
                        });

                       this.generateNhifCreditNo();
                       this.getBillAmount2(pid,encDetails.encounterNr[0].BillNumber);

                    },
                    scope: this
                });
    },

    generateNhifCreditNo: function() {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getNhifCreditNo',
            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);
                if(respText.credits[0].creditNo==1){
                    creditNo=1001;
                }else{
                    creditNo=respText.credits[0].creditNo;
                }

                this.getNhifcredit().down('#creditNo').setValue(creditNo);

            },
            scope: this
        });
    },

    getBillAmount2: function(pid, billNumber) {
        var pid=this.getNhifcredit().down('#txtPid3').getValue();
        var billNumber=this.getNhifcredit().down('#billNumber').getValue();

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getTotalBill',
            params:{
                pid:pid,
                bill_number:billNumber
            },
            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);

                this.getNhifcredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);

            },
            scope: this
        });
    },

    getNhifRates: function(comboField, newValue, oldValue, eOpts) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getNhifRates',
            params:{
                rate:newValue
            },
            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);

                var rateCalc=respText.nhifRates[0].rateCalc;
                this.getNhifcredit().down('#creditPerDay').setValue(respText.nhifRates[0].RateValue);
                this.getNhifcredit().down('#rateCalc').setValue(rateCalc);

                var rateValue;
                if(rateCalc==1){
                    rateValue=respText.nhifRates[0].RateValue;

                }else{
                    var days=this.getNhifcredit().down('#days').getValue();
                    var rates=respText.nhifRates[0].RateValue;
                    rateValue=parseInt(rates * days);
                }
                 this.getNhifcredit().down('#creditAmount').setValue(rateValue);

                var invoiceAmount= this.getNhifcredit().down('#invoiceAmount').getValue();

                var balance=parseInt(invoiceAmount-rateValue);
                this.getNhifcredit().down('#balance').setValue(balance);


            },
            scope: this
        });
    },

    saveNifCredit: function(button) {
        var form = button.up('form'); // get the form panel
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function(form, action) {
                    Ext.Msg.alert('Success', action.result.msg);

                    form.reset();
                },
                failure: function(form, action) {
                    Ext.Msg.alert('Failed',  action.result.msg);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    deleteRow: function(button) {
        var itemsGrid=button.up('form').down('#itemsGrid');
        itemToDelete=itemsGrid.getView().getSelectionModel().getSelection();
        itemsStore=Ext.data.StoreManager.lookup('DebitStore');

        itemsStore.remove(itemToDelete);
    },

    getDebitNo: function() {
        Ext.Ajax.request({
            url: 'data/getInpatientFunctions.php?task=getDebitNo',

            success: function(response){
                var respText= Ext.util.JSON.decode(response.responseText);
                var debitNo=respText.debits[0].debitNo;

                this.getDebit().down('#debitNo').setValue(debitNo);


            },
            scope: this
        });
    },

    saveVitals: function(button) {
        //Ext.Msg.alert('Test',button.getItemId());
        var encNo=button.up('form').down('#encounterNo').getValue();
        var form = button.up('panel').getForm(); // get the basic form
                    if (form.isValid()) { // make sure the form contains valid data before submitting
                        form.submit({
                            params:{
                               pid:button.up('form').down('#pid').getValue(),
                               encounterNo:encNo,
                            },
                            success: function (form, action) {
                                Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');
                                button.up('form').getForm().reset();
                                button.up('window').hide();

                                var vitalsStore=Ext.data.StoreManager.lookup("VitalsStore");
                                vitalsStore.load({});

                                this.getController('Main').getStatusLogs(encNo);

                            },
                            failure: function (form, action) {
                                var jsonResp = Ext.decode(action.response.responseText);

                                Ext.Msg.alert('Failed', 'Could not save Vitals. \n Error=' + jsonResp.error);
                            }
                        });
                    } else { // display error alert if the data is invalid
                        Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                    }
    },

    openVitals: function(view, rowIndex, colIndex, item, e, record, row) {
        var vitals=Ext.create('CarePortal.view.VitalsForm', {});
        var vitalsWindow=Ext.create('Ext.window.Window', {
            title: 'Patients Vitals',
            resizable:false
        });

        vitals.down('#pid').setValue(record.get('PID'));
        vitals.down('#names').setValue(record.get('Names'));
        vitals.down('#encounterNo').setValue(record.get('EncounterNo'));
        vitals.down('#Dob').setValue(record.get('BirthDate'));

        vitalsWindow.add(vitals);
        vitalsWindow.show();

        var vitalsStore=Ext.data.StoreManager.lookup("VitalsStore");
        vitalsStore.load({
            params:{
                pid:record.get('PID'),
                encNr:record.get('EncounterNo')
            },
            scope: this
        });


    },

    openNotes: function(view, rowIndex, colIndex, item, e, record, row) {
        var notes=Ext.create('CarePortal.view.IpNotes', {});
        var notesWindow=Ext.create('Ext.window.Window', {
            title: 'Patients Notes',
            resizable:false
        });

        notes.down('#pid').setValue(record.get('PID'));
        notes.down('#names').setValue(record.get('Names'));
        notes.down('#encounterNo').setValue(record.get('EncounterNo'));
        notes.down('#dob').setValue(record.get('BirthDate'));
        notes.down('#sex').setValue(record.get('Sex'));
        notes.down('#paymode').setValue(record.get('PaymentMode'));
        notes.down('#admissiondate').setValue(record.get('AdmissionDate'));
        notes.down('#wardno').setValue(record.get('WardID'));
        notes.down('#roomno').setValue(record.get('RoomNo'));
        notes.down('#bedno').setValue(record.get('BedNo'));

        notesWindow.add(notes);
        notesWindow.show();

        var notesStore=Ext.data.StoreManager.lookup("NotesStore");
        notesStore.load({
            params:{
                pid:record.get('PID'),
                encNr:record.get('EncounterNo'),
                locationNr:record.get('WardID')
            },
            scope: this
        });

    },

    searchItems: function(button) {
         var searchParam=button.up('grid').down('#txtSearchItemlocs').getValue();

                var itemsListStore =Ext.data.StoreManager.lookup('ItemsListStore');
                itemsListStore.load({
                    params: {
                        searchParam: searchParam
                    },
                    callback: function(records, operation, success) {

                    },
                    scope: this

                });
    },

    closewindow: function(button) {
            button.up('window').close();
    },

    openDischargeForm: function(view, rowIndex, colIndex, item, e, record, row) {
        var discharge=Ext.create('CarePortal.view.Discharge', {});
        var dischargeWindow=Ext.create('Ext.window.Window', {
            title: 'Discharge Patient',
            resizable:false
        });

        var d=new Date();

        discharge.down('#pid').setValue(record.get('PID'));
        discharge.down('#names').setValue(record.get('Names'));
        discharge.down('#encounterNo').setValue(record.get('EncounterNo'));
        discharge.down('#Dob').setValue(record.get('BirthDate'));
        discharge.down('#dischargeDate').setValue(d);
        discharge.down('#dischargeTime').setValue(d);

        dischargeWindow.add(discharge);
        dischargeWindow.show();

    },

    discharge: function(button) {
        Ext.Msg.alert('Test',button.getItemId());

        var form = button.up('form').getForm(); // get the basic form

        Ext.Msg.show({
            title:'Save Changes?',
            message: 'You are closing a tab that has unsaved changes. Do you want to save changes?',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'yes') {
                    console.log('Yes pressed');
                } else if (btn === 'no') {
                    console.log('No pressed');
                } else {
                    console.log('Cancel pressed');
                }
            }
        });

        if (form.isValid()) { // make sure the form contains valid data before submitting
            Ext.Msg.show({
            title:'Discharge Patient?',
            message: 'Are you sure you want to Discharge this Patient?',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            fn: function(btn) {
                if (btn === 'yes') {
                    form.submit({
                            success: function (form, action) {
                                Ext.Msg.alert('Thank you!', 'Patient Discharged Successfully.');
                                button.up('form').getForm().reset();
                                button.up('window').hide();

                            },
                            failure: function (form, action) {
                                var jsonResp = Ext.decode(action.response.responseText);

                                Ext.Msg.alert('Failed', 'Could not Discharge patient \n Error=' + jsonResp.error);
                            }
                        });
                } else if (btn === 'no') {
                     button.up('form').getForm().reset();
                     button.up('window').hide();
                } else {
                    console.log('Cancel pressed');
                }
            }
        });

        } else { // display error alert if the data is invalid
               Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    getWaitingList: function(wardNo) {
        var waitingPanel=this.getWaitinglist();


        var waitingStore=Ext.data.StoreManager.lookup("WaitingListStore");

        waitingStore.load({
            params: {
                wardNo:wardNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=2 class=titles>Waiting List</td></tr>',
                                '<tr><td class=titles>Pid</td>',
                                    '<td class=titles>Names</td>',
                                    '<td class=titles>EncNo</td>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{Pid}</td>',
                                    '<td><div class=content>{Names}</div></td>',
                                    '<td><div class=content>{EncounterNr}</div></td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                waitingStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(waitingPanel.body,data);
            },
            scope: this
        });
    },

    openChart: function(view, rowIndex, colIndex, item, e, record, row) {
        var diagram=Ext.create('CarePortal.view.MenuDiagram', {});
        var patientInfo=Ext.create('CarePortal.view.PatientDetais', {});
        var diagramWindow=Ext.create('Ext.window.Window', {
            title: 'Chart Folder',
            resizable:true,
            height : 600,
            width  : 350,
            items :[
                patientInfo,
                diagram
            ]
        });

        vitals.down('#pid').setValue(record.get('PID'));
        vitals.down('#names').setValue(record.get('Names'));
        vitals.down('#encounterNo').setValue(record.get('EncounterNo'));
        vitals.down('#Dob').setValue(record.get('BirthDate'));

        // diagramWindow.add(patientInfo,diagram);
        diagramWindow.show();
    },

    openPrescription: function(view, rowIndex, colIndex, item, e, record, row) {
         var prescriptions=Ext.create('CarePortal.view.PrescriptionForm', {});
        var prescriptionsWindow=Ext.create('Ext.window.Window', {
            title: 'Patients Prescriptions',
            resizable:false
        });

        prescriptions.down('#pid').setValue(record.get('PID'));
        prescriptions.down('#names').setValue(record.get('Names'));
        prescriptions.down('#encounterNo').setValue(record.get('EncounterNo'));
        prescriptions.down('#Dob').setValue(record.get('dateBirth'));

        prescriptionsWindow.add(prescriptions);
        prescriptionsWindow.show();


    },

    openLab: function(view, rowIndex, colIndex, item, e, record, row) {
        var labtests=Ext.create('CarePortal.view.LabTests', {});
        var labtestsWindow=Ext.create('Ext.window.Window', {
            title: 'Patients labtests',
            resizable:false
        });

        labtests.down('#pid').setValue(record.get('PID'));
        labtests.down('#names').setValue(record.get('Names'));
        labtests.down('#encounterNo').setValue(record.get('EncounterNo'));
        labtests.down('#Source').setValue("Inpatient");

        labtestsWindow.add(labtests);
        labtestsWindow.show();

        var pendingTests=Ext.data.StoreManager.lookup("PendingTestsStore");
        pendingTests.load({
            params: {
                labNo:record.get('LabNo'),
                encNr:record.get('EncounterNo')
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });
    },

    openServices: function(view, rowIndex, colIndex, item, e, record, row) {
        var Services=Ext.create('CarePortal.view.Services', {});
        var ServicesWindow=Ext.create('Ext.window.Window', {
            title: 'Patients Services',
            resizable:false
        });

        Services.down('#pid').setValue(record.get('PID'));
        Services.down('#names').setValue(record.get('Names'));
        Services.down('#encounterNo').setValue(record.get('EncounterNo'));
        //Services.down('#PrescribeDate').setValue(new Date("d-m-Y"));

        ServicesWindow.add(Services);
        ServicesWindow.show();

        var serviceStore=Ext.data.StoreManager.lookup("ProceduresAndServices");
        serviceStore.load({
            params:{
                pid:record.get('PID'),
                encNr:record.get('EncounterNo')
            },
            scope: this
        });
    },

    openXray: function(view, rowIndex, colIndex, item, e, record, row) {
        var Services=Ext.create('CarePortal.view.Radiology', {});
        var ServicesWindow=Ext.create('Ext.window.Window', {
            title: 'Radiology Services',
            resizable:false
        });

        Services.down('#pid').setValue(record.get('PID'));
        Services.down('#names').setValue(record.get('Names'));
        Services.down('#encounterNo').setValue(record.get('EncounterNo'));
        //Services.down('#PrescribeDate').setValue(new Date("d-m-Y"));

        ServicesWindow.add(Services);
        ServicesWindow.show();
    },

    openDiagnosis: function(view, rowIndex, colIndex, item, e, record, row) {
        var Services=Ext.create('CarePortal.view.Diagnosis', {});
        var ServicesWindow=Ext.create('Ext.window.Window', {
            //title: 'Patients Services',
            resizable:false
        });

        Services.down('#pid').setValue(record.get('PID'));
        Services.down('#names').setValue(record.get('Names'));
        Services.down('#encounterNo').setValue(record.get('EncounterNo'));
        Services.setTitle("Inpatient Diagnosis");

        //Services.down('#PrescribeDate').setValue(new Date("d-m-Y"));

        var dob=record.get('BirthDate');

        ServicesWindow.add(Services);
        ServicesWindow.show();

        var diagnosisStore=Ext.data.StoreManager.lookup("DiagnosisStore");
        diagnosisStore.load({
            params:{
                pid:record.get('PID'),
                encNr:record.get('Names')
            },
            scope: this
        });

        var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');
        icd10Store.load({
            params:{
                dob:dob,
                diagType:'IP'
            }
        });

    },

    saveNotes: function(button) {
        var form = button.up('form').getForm(); // get the basic form
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var locationNr=button.up('form').down('#wardno').getValue();
        var pid=button.up('form').down('#pid').getValue();
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    encounterNo:encounterNo,
                    locationNr:locationNr
                },
                success: function (form, action) {

                    button.up('form').down('#notes').reset();
                    //Ext.Msg.alert('Thank you!', 'The Notes has been saved Successfully.');

                    var notesStore=Ext.data.StoreManager.lookup("NotesStore");
                    notesStore.load({
                        params:{
                            pid:pid,
                            encNr:encounterNo,
                            locationNr:locationNr
                        },
                        scope: this
                    });


                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Notes. \n Error=' + jsonResp.error);
                },scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadNotes: function(gridpanel, record, item, index, e, eOpts) {
        gridpanel.up('form').down('#notes').setValue(record.get('Notes'));
    },

    openSearchWindow: function(button) {
        var admissionType=button.up('panel').down('#formStatus').getValue();
        if(admissionType=='IP'){
            admType='1';
        }else{
            admType='2';
        }
        var admissions=Ext.create('CarePortal.view.Admissions', {});
        var admissionsWindow=Ext.create('Ext.window.Window', {
            title: 'Admissions List',
            srollable:'both',
            resizable:false,
        });


        var admStore =Ext.data.StoreManager.lookup('AdmissionsStore');
        admStore.load({
            params: {
                admType: admType
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });

        admissionsWindow.add(admissions);
        admissionsWindow.show();

        admissions.down('#formStatus').setValue('Invoice');

    },

    filterPatients: function(field, newValue, oldValue, eOpts) {
         var grid = field.up('grid');
                grid.store.clearFilter();
                if (newValue) {
                    var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
                    grid.store.filter({
                        filterFn: function(item) {
                            return matcher.test(item.get('names')) ||
                                matcher.test(item.get('pid')) || matcher.test(item.get('phone'));
                        }
                    });
                }
    },

    setPatientNames: function(gridpanel, record, item, index, e, eOpt) {
        if(gridpanel.up('grid').down('#formStatus').getValue()=="Invoice"){
            this.getInvoicepanel().down("#txtInvoicePid").setValue(record.get('pid'));
            this.getInvoicepanel().down("#txtPatientName").setValue(record.get('names'));
            this.getInvoicepanel().down("#encNr").setValue(record.get('encounter_nr'));

            this.getBillNumbers(record.get('pid'),record.get('encounter_class_nr'));
        }

    },

    openDoctorsNotes: function(button) {
        var encNo=button.up('form').down("#encounterNo").getValue();
        var pid=button.up('form').down("#pid").getValue();



            //   Ext.Msg.alert('Test',slipNo);
            window.open('reports/patientContinuationCardex.php?pid='+pid+"&enc="+encNo,
                        "Doctors Notes","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");


    },

    openNursingNotes: function(button) {
        var btnSource=button.up('panel').getItemId();
        //Ext.Msg.alert('Test',btnSource);
        var rec = button.lookupViewModel().get('record');
        if(btnSource=='Discharges'){
            var enc=rec.get('encounter_nr');
            var pid=rec.get('pid');
        }else{
            var enc=button.up('form').down("#encounterNo").getValue();
            var pid=button.up('form').down("#pid").getValue();
        }


        if(pid!==''){
            //   Ext.Msg.alert('Test',slipNo);
            window.open('reports/patientNursesCardex.php?pid='+pid+"&enc="+enc,
                        "Nursing Cardex","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            Ext.Msg.alert('Error',"Please select a patient to open notes");
        }

    },

    openVitalsChart: function(view, rowIndex, colIndex, item, e, record, row) {
        var pChart=Ext.create('CarePortal.view.PatientChart', {});
                var chartWindow=Ext.create('Ext.window.Window', {
                    title: 'Patients Vitals Chart',
                    resizable:true
                });

                pChart.down('#pid').setValue(record.get('PID'));
                pChart.down('#names').setValue(record.get('Names'));
                pChart.down('#encounterNo').setValue(record.get('EncounterNo'));
                pChart.down('#dob').setValue(record.get('BirthDate'));
                pChart.down('#sex').setValue(record.get('Sex'));
                pChart.down('#paymode').setValue(record.get('PaymentMode'));
                pChart.down('#admissiondate').setValue(record.get('AdmissionDate'));
                pChart.down('#wardno').setValue(record.get('WardID'));
                pChart.down('#roomno').setValue(record.get('RoomNo'));
                pChart.down('#bedno').setValue(record.get('BedNo'));

        var vitalsStore=Ext.data.StoreManager.lookup("VitalsChartStore");
        vitalsStore.load({
            params:{
                pid:record.get('PID'),
                encNr:record.get('EncounterNo')
            },
            scope: this
        });

                chartWindow.add(pChart);
                chartWindow.show();
    },

    openIpReports: function(button) {
        var strReport=button.getItemId();

        shiftReport=Ext.create("CarePortal.view."+strReport,{});
        centerContainer=button.up('panel').down("#IPReports");
        centerContainer.removeAll();

        centerContainer.add(shiftReport);

         button.up('panel').up('panel').setTitle(strReport);
    },

    loadIpReports: function(button) {
        //Ext.Msg.alert('Test',button.up('grid').getItemId());
        var formSource=button.up('grid').getItemId();
        if(formSource=='Discharges'){
             var receiptsStore =Ext.data.StoreManager.lookup('ReceiptStore');
                receiptsStore.load({
                    params:{
                        cashpoint:cashpoint,
                        shiftNo:shiftNo
                    },
                    callback: function(records, operation, success) {

                //         gridpanel.up('window').close();
                    },
                    scope: this
                });
        }else if(formSource=='Discharges'){

        }
    },

    openDischargeSummary: function(button) {
        var rec = button.lookupViewModel().get('record');
        var pid=rec.get('pid');
        var enc=rec.get('encounter_nr');

        if(pid!==''){
            //   Ext.Msg.alert('Test',slipNo);
            window.open('reports/patientNursesCardex.php?pid='+pid+"&enc="+enc,
                        "Nursing Cardex","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            Ext.Msg.alert('Error',"Please select a patient to open Discharge Summary");
        }

    },

    openNursesNotes: function(button) {
        var rec = button.lookupViewModel().get('record');
        var pid=rec.get('pid');
        var enc=rec.get('encounter_nr');

        if(pid!==''){
            //   Ext.Msg.alert('Test',slipNo);
            window.open('reports/patientNursesCardex.php?pid='+pid+"&enc="+enc,
                        "Nursing Cardex","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            Ext.Msg.alert('Error',"Please select a patient to open Discharge Summary");
        }

    },

    openUpdateDates: function(button) {
        var datesForm=Ext.create('CarePortal.view.UpdateDates', {});
        var datesWindow=Ext.create('Ext.window.Window', {
            title: 'Update Dates',
            resizable:false
        });

        var pid="";
        var admType="";

        var selectedKeys=this.getBills().getView().getSelectionModel().getSelection();
        //Ext.Msg.alert('Test',selectedKeys.length);
        if(selectedKeys.length>0){
            Ext.each(selectedKeys, function (record) {
                pid=record.get('Pid');
                admType=record.get('EncounterClass');

                datesForm.down('#txtSearchInterim').setValue(pid);
                datesForm.down('#Name').setValue(record.get('Name'));
                //apptsForm.down('#encounterNo').setValue(record.get('EncounterNo'));
               // apptsForm.down('#Dob').setValue(record.get('DateOfBirth');

            });

        }else{
            Ext.Msg.alert('Patient Select Error',"Please Select a Patient to Schedule Appointment");
        }

         this.getBillNumbers(pid,admType);

        datesWindow.add(datesForm);
        datesWindow.show();
    },

    saveAdmDisDates: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=updateAdmDis',
            params: {
                pid:button.up('form').down('#txtSearchInterim').getValue(),
                encounterNr:button.up('form').down('#encNr').getValue(),
                encounterClass:button.up('form').down('#encounterClass').getValue(),
                billNumber:button.up('form').down('#billNumber').getValue(),
                admDate:button.up('form').down('#admDate').getValue(),
                disDate:button.up('form').down('#disDate').getValue(),

            },success: function(response){
                //var encDetails= Ext.util.JSON.decode(response.responseText);
                Ext.Msg.alert("Admission Discharge Dates","Update Saved Successfully");
        //         form.reset();
        //         debitStore.load({});
            },
            scope:this
        });
    },

    openTransferWindow: function(view, rowIndex, colIndex, item, e, record, row) {
        var transfers=Ext.create('CarePortal.view.PatientTransfer', {});
        var transferWindow=Ext.create('Ext.window.Window', {
            title: 'Patients Transfer Form',
            resizable:false
        });

        transfers.down('#pid').setValue(record.get('PID'));
        transfers.down('#names').setValue(record.get('Names'));
        transfers.down('#encounterNo').setValue(record.get('EncounterNo'));
        transfers.down('#dob').setValue(record.get('BirthDate'));
        transfers.down('#sex').setValue(record.get('Sex'));
        transfers.down('#admissiondate').setValue(record.get('AdmissionDate'));
        transfers.down('#paymode').setValue(record.get('PaymentMode'));

        var wardName=view.up('grid').down('#wardTitle').getValue();
        transfers.down('#wardName').setValue(wardName);
        transfers.down('#wardno').setValue(record.get('WardID'));

        transfers.down('#roomno').setValue(record.get('RoomNo'));
        transfers.down('#bedno').setValue(record.get('BedNo'));

        transferWindow.add(transfers);
        transferWindow.show();

    },

    showWards: function(field, newValue, oldValue, eOpts) {
        var transContainer=field.up('form').down('#transWindow');
        var beds=Ext.create("CarePortal.view.AssignBeds",{});
        var wards=Ext.create("CarePortal.view.WardsList",{});
        var wrdNo=field.up('form').down('#wardno').getValue();

        if(field.getValue().transferWard=='Wards'){
            transContainer.removeAll();
            transContainer.add(wards);

            var wardsListStore =Ext.data.StoreManager.lookup('WardsListStore');
            wardsListStore.load({
                params:{
                    wrdNo:wrdNo
                },
                callback: function(records, operation, success) {

                    //         gridpanel.up('window').close();
                },
                scope: this
            });


         }else if(field.getValue().transferWard=='Beds'){
            transContainer.removeAll();
            transContainer.add(beds);
            field.up('form').down('#wardsList').hide();
             beds.down('#transType').setValue(field.getValue().transferWard);
             beds.down('#wardID').setValue(wrdNo);
             beds.down('#pid').setValue(field.up('form').down('#pid').getValue());
             beds.down('#names').setValue(field.up('form').down('#names').getValue());
             beds.down('#encNo').setValue(field.up('form').down('#encounterNo').getValue());


         }


    }

});
