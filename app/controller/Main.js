/*
 * File: app/controller/Main.js
 *
 * This file was generated by Sencha Architect version 4.3.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarePortal.controller.Main', {
    extend: 'Ext.app.Controller',

    models: [
        'Diagnosis',
        'Vitals',
        'Prescriptions',
        'OPAdmissions',
        'ClinicalRooms',
        'WardInfo',
        'ClinicsInfo',
        'Announcements',
        'Radiology',
        'Investigations',
        'Notes',
        'MenusModel',
        'SubMenuModels',
        'PatientDetails',
        'AdmissionTypes',
        'EncountersList',
        'County',
        'NextOfKin',
        'StatusLogs',
        'NotesTypes',
        'ServicesList',
        'ProceduresAndServices',
        'ServiceOrdesrModel',
        'Allergies',
        'PendingPrescription',
        'MenuItems',
        'MenuGroups',
        'Appointments'
    ],
    stores: [
        'VitalsStore',
        'PrescriptionStore',
        'OPAdmissionsStore',
        'ClinicalRoomsStore',
        'ClinicInfoStore',
        'OPAdmissions',
        'Prescriptions',
        'ClinicsStore',
        'AnnouncementStore',
        'RadiologyStore',
        'InvestigationsStore',
        'NotesStore',
        'GridStore',
        'ChartStore',
        'AdmissionTypeStore',
        'DiagnosisStore',
        'PatientDetails',
        'EncountersListStore',
        'CountyStore',
        'NextOfKin',
        'StatusLogsStore',
        'NoteTypesStore',
        'ProceduresAndServices',
        'ServicesStore',
        'OrderDetailStore',
        'AllergiesStore',
        'RadiologyListStore',
        'LabTestStore',
        'InvoicesList',
        'ReceiptsList',
        'CreditSlipsStore',
        'PendingPrescription',
        'MenuItemsStore',
        'MenuGroupStore',
        'AppointmentsStore',
        'NhifRatesStore'
    ],
    views: [
        'Portal',
        'PortalPanel',
        'ChartPortlet',
        'GridPortlet',
        'Message',
        'HeaderPanel',
        'Investigations',
        'DoctorsNotes',
        'Complains',
        'DoctorsArea',
        'PatientStatus',
        'RoomAllocation',
        'TriagePanel',
        'Announcements',
        'WardsTable',
        'OpdVisits',
        'OutpatientList',
        'AdmissionData',
        'AdmitInpatient',
        'AdmitOutpatient',
        'MenuDiagram',
        'DontorsNotesEntry',
        'WardOccupancy',
        'VitalsForm',
        'Notes',
        'AssignBeds',
        'CashSales',
        'ItemsMaster',
        'SystemAdmin',
        'PrescriptionForm',
        'PaymentsAdj',
        'Payments',
        'Login',
        'LabItems',
        'LabTests',
        'Services',
        'Diagnosis',
        'MCH',
        'Immunization',
        'Radiology',
        'VitalsLists',
        'Appointments',
        'AppointmentsForm',
        'ClinicsList'
    ],

    refs: {
        msg: {
            autoCreate: true,
            selector: 'message',
            xtype: 'message'
        },
        viewport: {
            selector: 'viewport',
            xtype: 'portal'
        },
        headerpanel: {
            selector: 'headerpanel',
            xtype: 'headerpanel'
        },
        vitals: {
            selector: 'vitals',
            xtype: 'vitals'
        },
        diagnosispanel: {
            selector: 'diagnosispanel',
            xtype: 'diagnosispanel'
        },
        investigations: {
            selector: 'investigations',
            xtype: 'investigations'
        },
        doctorsnotes: {
            selector: 'doctorsnotes',
            xtype: 'doctorsnotes'
        },
        radiology: {
            selector: 'radiology',
            xtype: 'radiology'
        },
        viewport: {
            selector: 'viewport',
            xtype: 'triagepanel'
        },
        announcements: {
            selector: 'announcements',
            xtype: 'announcements'
        },
        vitalsform: {
            selector: 'vitalsform',
            xtype: 'vitalsform'
        },
        patientinfo: {
            selector: 'patientinfo',
            xtype: 'patientinfo'
        },
        patientstatus: {
            selector: 'patientstatus',
            xtype: 'patientstatus'
        },
        admissiondata: {
            selector: 'admissiondata',
            xtype: 'admissiondata'
        },
        admitinpatient: {
            selector: 'admitinpatient',
            xtype: 'admitinpatient'
        },
        admitoutpatient: {
            selector: 'admitoutpatient',
            xtype: 'admitoutpatient'
        },
        doctorsnotesentry: {
            selector: 'doctorsnotesentry',
            xtype: 'dontorsnotesentry'
        },
        wardoccupancy: {
            selector: 'wardoccupancy',
            xtype: 'wardoccupancy'
        },
        notes: {
            selector: 'notes',
            xtype: 'notes'
        },
        assignbeds: {
            selector: 'assignbeds',
            xtype: 'assignbeds'
        },
        login: {
            selector: 'login',
            xtype: 'login'
        },
        cashsales: {
            selector: 'cashsales',
            xtype: 'cashsales'
        },
        systemadmin: {
            selector: 'systemadmin',
            xtype: 'systemadmin'
        },
        cashsales: {
            selector: 'cashsales',
            xtype: 'cashsales'
        },
        prescriptionform: {
            selector: 'prescriptionform',
            xtype: 'prescriptionform'
        },
        cashsalesadj: {
            selector: 'cashsalesadj',
            xtype: 'cashsalesadj'
        },
        payments: {
            selector: 'payments',
            xtype: 'payments'
        },
        paymentsadj: {
            selector: 'paymentsadj',
            xtype: 'paymentsadj'
        },
        labitems: {
            selector: 'labitems',
            xtype: 'labitems'
        },
        labtests: {
            selector: 'labtests',
            xtype: 'labtests'
        },
        services: {
            selector: 'services',
            xtype: 'services'
        },
        diagnosis: {
            selector: 'diagnosis',
            xtype: 'diagnosis'
        },
        mch: {
            selector: 'mch',
            xtype: 'mch'
        },
        register: {
            selector: 'register',
            xtype: 'register'
        },
        immunization: {
            selector: 'immunization',
            xtype: 'immunization'
        },
        vitalslists: {
            selector: 'vitalslists',
            xtype: 'vitalslists'
        },
        appointments: {
            selector: 'appointments',
            xtype: 'appointments'
        },
        appointmentsform: {
            selector: 'appointmentsform',
            xtype: 'appointmentsform'
        },
        outpatientlist: {
            selector: 'outpatientlist',
            xtype: 'outpatientlist'
        },
        clinicslist: {
            selector: 'clinicslist',
            xtype: 'clinicslist'
        }
    },

    control: {
        "panel[isPortlet]": {
            beforeclose: 'onPortletBeforeClose',
            close: 'onPortletClose'
        },
        "#Services": {
            change: 'onServicesChange'
        }
    },

    onPortletBeforeClose: function(panel, eOpts) {
        // Provide a custom fade out effect when a portlet is removed from the portal
        if (!panel.closing) {
            panel.closing = true;
            panel.el.animate({
                opacity: 0,
                callback: panel.doClose,
                scope: panel
            });
        }
        return false;

    },

    onPortletClose: function(panel, eOpts) {
        this.showMsg('"' + panel.title + '" was removed');
    },

    onServicesChange: function(field, newValue, oldValue, eOpts) {
        var v = field.getValue();
        var record = field.findRecord(field.valueField || field.displayField, v);
        //Ext.Msg.alert('Test',record.get('Price'));

        field.up('form').down('#Price').setValue(record.get('Price'));
        field.up('form').down('#Qty').setValue(1);
    },

    showMsg: function(msg) {
        var msgId = Ext.id(),
            msgCmp = this.getMsg();

        this.msgId = msgId;
        msgCmp.update(msg);
        msgCmp.show();

        Ext.defer(this.clearMsg, 3000, this, [msgId]);
    },

    clearMsg: function(msgId) {
        if (msgId === this.msgId) {
            this.getMsg().hide();
        }
    },

    init: function(application) {
        this.control({
            "#mnuHome":{
                click:this.openHome
            },
            "#mnuDoctorsArea":{
                click:this.openDoctorsArea
            },
            "outpatientlist":{
                itemclick:this.updateHeaderDetails//,
                //itemdblclick:this.getPatientData
            },
            '#OutpatientAdmissions':{
                itemdblclick:this.openAdmissionData
            },
            '#mnuNursingArea':{
                click:this.openTriage
            },
            '#txtOpSearch':{
                change:this.searchPatients
            },
            '#cmdNew':{
                click:this.openEntryForm
            },
            '#cmdSave':{
                click:this.saveForm
            },
            '#menusPanel':{
                render:this.buildMenus
            },
            'menu':{
                click:this.getSelectedMenu
            },
            '#searchBox':{
                specialkey:this.getPressedKey,
                //change:this.searchPatientRegister
            },
            '#cmdRegister':{
                click:this.openRegister
            },
            'patientinfo button#viewPatients':{
                click:this.getViewPatient
            },
            'patientinfo button#updatePatients':{
                click:this.updatePatientInfo
            },
            '#cmdSearch':{
                click:this.searchPatient
            },
            '#cmdAdmitInpatient':{
                click:this.showAdmissionform
            },
            '#cmdAdmitOutpatient':{
                click:this.showAdmissionform
            },
            '#cancelAdmit':{
                click:this.cancelAdmission
            },
            '#savePatient':{
                click:this.savePatient
            },
            '#saveOpAdmission':{
                click:this.saveOpAdmission
            },
            '#saveIpAdmission':{
                click:this.saveIpAdmission
            },
            '#btnVitals':{
                afterrender:this.createVitals
            },
            'outpatientlist button#viewPatients':{
                click:this.getViewPatient
            },
            'outpatientlist button#transferPatient':{
                click:this.openTransferForm
            },
            'outpatientlist button#openAssignRoom':{
                click:this.openAssignRoom
            },
            'outpatientlist actioncolumn[itemId=transferClinic]':{
                click:this.openTransferClinic
            },
            'clinicslist actioncolumn[id=transferOP]':{
                click:this.transferClinic
            },
            '#btnNotes':{
                afterrender:this.createNotes
            },
            '#btnDiagnosis':{
                afterrender:this.createDiagnosis
            },
            '#btnLabtest':{
                afterrender:this.createLabTest
            },
            '#btnRadiology':{
                afterrender:this.createRadiology
            },
            '#btnServices':{
                afterrender:this.createServices
            },
            '#btnPrescriptions':{
                afterrender:this.createPrescription
            },
            '#btnImmunizations':{
                afterrender:this.createImmunization
            },
            '#btnMch':{
                afterrender:this.createMch
            },
            '#btnReports':{
                afterrender:this.openAdmissionHistory
            },
            '#cmdAddComplaints':{
                click:this.addComplaints
            },
            '#waitingList':{
                afterrender:this.getSelectedPatient
            },
            'assignbeds':{
                itemclick:this.assignBed
            },
        //     'clinicslist':{
        //         itemclick:this.transferClinic
        //     },
            'wardslist':{
                itemclick:this.transferWard
            },
            '#cmdLogin':{
                click:this.login
            },
            '#systemAdmin':{
                click:this.openSystemAdmin
            },
            '#logout':{
                click:this.logout
            },
            '#loginWindow':{
                beforerender:this.checkLoginStatus
            },
            '#cmdSaveLabTest':{
                click:this.saveLabTest
            },
            '#refreshLogs':{
                click:this.loadEncounterLogs
            },
            '#cmdSearchPatients':{
                click:this.searchPatient
            },
            '#cmdAddServices':{
                click:this.saveProceduresAndServices
            },
            '#Services':{
                click:this.loadServices
            },
            '#age':{
                change:this.getDob
            },
            '#months':{
                change:this.getDob
            },
            '#cmdSaveDiagnosis':{
                click:this.saveDiagnosis
            },
            '#cmdSaveMch':{
                click:this.saveMch
            },
            '#cmdAddAllergies':{
                click:this.addAllergies
            },
            '#cmdAddInsurance':{
                click:this.addInsurance
            },
            '#cmdSaveRadiology':{
                click:this.saveRadiology
            },
            '#txtPaymentSearch':{
                change:this.filterPayments
            },
            '#cmdPrintVoucher':{
                click:this.openPaymentVoucher
            },
            '#cmdPrintCheque':{
                click:this.openCheque
            },
            '#cmdOpenVouchers':{
                click:this.openPaymentList
            },
            '#type_nr':{
                change:this.clearNotes
            },
            '#cmdPrintCreditSlip':{
                click:this.printCreditSlip
            },
            '#txtPid':{
                onblur:this.getPatientNames
            },
            '#cmdRePrintCreditSlip':{
                click:this.rePrintCreditSlip
            },
            '#creditSlips':{
                itemclick:this.populateSlip
            },
            '#assignRoom':{
                click:this.assignRoom
            },
            '#opWaitingList':{
                itemclick:this.loadPatientDetails
            },
            '#Radiology':{
                change:this.onRadiologyChange
            },
            '#admSource':{
                change:this.changeEncounterClass
            },
            '#cmdNewMenu':{
                click:this.openMenuForm
            },
            '#cmdSaveMenu':{
                click:this.saveMenuGroup
            },
            '#apttCalendar':{
                select:this.loadAppointments
            },
            '#cmdScheduleAppointment':{
                click:this.openAppoinmentsWindow
            },
            '#txtSearchGL':{
                //specialkey:this.getPressedKey3,
                change:this.filterGls
            },
            '#deleteNote':{
                click:this.deleteNote
            },
            '#cmdPatientHistory':{
                click:this.openPatientHistory
            }
        });
    },

    openDoctorsArea: function() {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=checkUserRole',
            waitMsg: 'checkin user permissions ...',
            success: function(response){
                var text = response.responseText;
               // Ext.Msg.alert('Dashboard','You are allowed to access Doctors Area');
                headerPanel=Ext.create("CarePortal.view.HeaderPanel",{});

                doctorsArea=Ext.create("CarePortal.view.DoctorsArea",{});
                centerContainer=this.getViewport().down("#PortalDetails");
                centerContainer.removeAll();

                centerContainer.add(headerPanel,doctorsArea);
                //this.openHome();

            },
            failure:function(response){
               // var resp = JSON.parseJSON(response);
                Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
            },
              scope: this
        });


    },

    openHome: function() {
        // Set the localStorage value to true
                localStorage.setItem("LoggedIn", true);
                homeArea=Ext.create("CarePortal.view.Portal",{});

                 this.getView().destroy();

                Ext.widget(homeArea);

                homeArea.down('#companyTitle').setValue(localStorage.getItem('CompanyName'));

                centerContainer=homeArea.down("#PortalDetails");
                centerContainer.removeAll();

               // centerContainer.add(homeArea);

               // this.getAnnouncements();work
    },

    updateHeaderDetails: function(gridpanel, record, item, index, e, eOpts) {
        // Ext.Msg.alert('Test',record.get('FirstName'));

        // this.getHeaderpanel().down('#PatientName').setValue(record.get('Names'));
        // this.getHeaderpanel().down('#Age').setValue(record.get('Age'));
        // this.getHeaderpanel().down('#Gender').setValue(record.get('Gender'));
        // this.getHeaderpanel().down('#PID').setValue(record.get('Pid'));
        // this.getHeaderpanel().down('#EncounterNo').setValue(record.get('EncounterNo'));

        var encNo=record.get('EncounterNo');

        var presStore=Ext.data.StoreManager.lookup("PrescriptionStore");

        presStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                //this.getVitals(encNo);
            },
            scope: this
        });


        // this.getVitals(record.get('EncounterNo'));
        // this.getDiagnosis(record.get('EncounterNo'));
        // this.getInvestigations(record.get('EncounterNo'));
        // this.getNotes(record.get('EncounterNo'));
        // this.getRadiology(record.get('EncounterNo'));
        // this.getProcedures(record.get('EncounterNo'));
    },

    getPatientData: function(gridpanel, record, item, index, e, eOpts) {
        this.openDoctorsArea();

        var encNo=record.get('EncounterNo');

        var presStore=Ext.data.StoreManager.lookup("PrescriptionStore");

        presStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                this.getVitals(encNo);
                this.getDiagnosis(encNo);
            },
            scope: this
        });


    },

    getVitals: function(encNo) {
        var vitalsStore=Ext.data.StoreManager.lookup("VitalsStore");
        var vitalsPanel=this.getViewport().down("#vitals");

        vitalsStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=vitals>',
                    '<tr><td class=titles>ID</td><td class=titles>Time</td><td class=titles>Description</td><td class=titles>Values</td></tr>',
                        '<tpl for=".">',
                             '<tr>',
                                '<td>{VitalID}</td>',
                                '<td>{VitalsTime}</td>',
                                '<td>{Description}</td>',
                                "<tpl if='Value &gt;= Lower' && 'Value &lt;= Upper'>",
                                    '<td class=good>{Value}</td>',
                                '<tpl else>',
                                    '<td class=danger>{Value}</td>',
                                '</tpl>',
                             '</tr>',
                        '</tpl>',
                    '</table>'
                );

                var data = [];
                vitalsStore.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(vitalsPanel.body,data);


            },scope:this

        });

    },

    getInvestigations: function(encNo) {
        var investigationsPanel=this.getViewport().down("#investigations");
        var investigationsStore=Ext.data.StoreManager.lookup("InvestigationsStore");

        investigationsStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                        '<tr><td colspan=5 class=titles>INVESTIGATIONS</td></tr>',
                                '<tr><td class=titles>Status</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>TimeRequested</td>',
                                    '<td class=titles>BatchNo</td>',
                                    '<td class=titles>RequestedBy</td>',
                                '</tr>',
                         '<tpl for=".">',

                                '<tr>',
                                    '<tpl if="Status == pending">',
                                        '<td class=status1>{Status}</td>',
                                    '<tpl else>',
                                         '<td class=status1>{Status}</td>',
                                    '</tpl>',
                                    '<td>{Description}</td>',
                                    '<td>{TimeRequested}</td>',
                                    '<td>{BatchNo}</td>',
                                    '<td>{RequestedBy}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];
                investigationsStore.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(investigationsPanel.body,data);

            },
            scope: this
        });



    },

    getRadiologyOld: function(encNo) {
        var radiologyPanel=this.getViewport().down("#radiologyPanel");
        var radiologyStore=Ext.data.StoreManager.lookup("RadiologyStore");

        radiologyStore.load({
            params: {
                encNr:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                        '<tr><td colspan=5 class=titles>RADIOLOGY TESTS</td></tr>',
                                '<tr><td class=titles>Status</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>TimeRequested</td>',
                                    '<td class=titles>BatchNo</td>',
                                    '<td class=titles>RequestedBy</td>',
                                '</tr>',
                         '<tpl for=".">',

                                '<tr>',
                                    '<tpl if="Status == pending">',
                                        '<td class=status1>{Status}</td>',
                                    '<tpl else>',
                                         '<td class=status1>{Status}</td>',
                                    '</tpl>',
                                    '<td>{Description}</td>',
                                    '<td>{TimeRequested}</td>',
                                    '<td>{BatchNo}</td>',
                                    '<td>{RequestedBy}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                      var data = [];

                        radiologyStore.each(function(record) {
                            data.push(record.getData());
                        });

                        tpl.overwrite(radiologyPanel.body,data);
            },
            scope: this
        });



    },

    getProcedures: function(encNo) {
        var procPanel=this.getViewport().down("#complains");
        var procStore=Ext.data.StoreManager.lookup("ProcedureStore");

        procStore.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                        '<tr><td colspan=4 class=titles>Services & Procedures Rendered</td></tr>',
                                '<tr><td class=titles>No</td>',
                                    '<td class=titles>PartCode</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>Qty</td>',
                                    '<td class=titles>Cost</td>',
                                    '<td class=titles>Time</td></tr>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{No}</td>',
                                    '<td>{PartCode}</td>',
                                    '<td style="width:300px;"><div class=content>{Description}</div></td>',
                                    '<td>{Qty}</td>',
                                    '<td>{Price}</td>',
                                    '<td>{RequestTime}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                procStore.each(function(record) {
                    data.push(record.getData());
                });

                tpl.overwrite(procPanel.body,data);
            },
            scope: this
        });



    },

    openAdmissionData: function() {

        var dt=new Date();
        var regDate=Ext.Date.format(dt,'d-m-Y H:i:s');

                var rec = button.lookupViewModel().get('record');
                //Ext.Msg.alert("Button clicked", "Hey! " + rec.get("EncounterNo"));
                var sourceForm=button.up('grid').getItemId();

                if(sourceForm==='patientInfo'){
                    encounterNo=rec.get('CurrentEncounter');
                    var names=rec.get('FirstName')+' '+rec.get('LastName')+ ' '+rec.get('SurName');

                }else if(sourceForm==='OutpatientAdmissions'){
                    encounterNo=rec.get('EncounterNo');
                    var names=rec.get('Names');

                }else if(sourceForm==='register'){

                }

                var encStore =Ext.data.StoreManager.lookup('EncountersListStore');
                encStore.load({
                    params: {
                        pid: rec.get('Pid')
                    },
                    callback: function(records, operation, success) {

                    },
                    scope: this
                });


                admissionDetails=Ext.create("CarePortal.view.AdmissionData",{});
                centerContainer=this.getViewport().down("#detailsPanel");
                //centerDetails=Ext.create("CarePortal.view.SystemAdmin",{});
                centerContainer.removeAll();

                centerContainer.add(admissionDetails);
                centerContainer.setTitle('Patient Admission Data');



                this.getAdmissiondata().down('#pid').setValue(rec.get('Pid'));
                this.getAdmissiondata().down('#pid2').setValue(rec.get('Pid'));
                this.getAdmissiondata().down('#pid3').setValue(rec.get('Pid'));
                this.getAdmissiondata().down('#fileNumber').setValue(rec.get('fileNumber'));
                this.getAdmissiondata().down('#names').setValue(names);
                this.getAdmissiondata().down('#dob').setValue(rec.get('DateOfBirth'));
                this.getAdmissiondata().down('#gender').setValue(rec.get('Gender'));
                this.getAdmissiondata().down('#registrationDate').setValue(rec.get('EncounterDate')+" "+rec.get('EncounterTime'));
                this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);
                this.getAdmissiondata().down('#encounterNr2').setValue(encounterNo);
                this.getAdmissiondata().down('#encounterDate').setValue(rec.get('EncounterDate'));
                this.getAdmissiondata().down('#encounterDate2').setValue(rec.get('EncounterDate'));
                this.getAdmissiondata().down('#phone').setValue(rec.get('Phone'));


                if(encounterNo===''){
                    this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);
                    this.getAdmissiondata().down('#admissionButtons').setHidden(false);
                    this.getAdmissiondata().down('#menuDiagram').setHidden(true);
                }else{
                    this.getAdmissiondata().down('#admissionStatus').setValue('The Patient is Currentlly Admited in '+rec.get('Department'));
                    this.getAdmissiondata().down('#admissionButtons').setHidden(true);
                    this.getAdmissiondata().down('#menuDiagram').setHidden(false);
                    if(rec.get('EncounterClass')==1){
                        this.getAdmissiondata().down('#inpatientDetails').setHidden(false);
                        this.getAdmissiondata().down('#inpatient').setValue(rec.get('Department'));
                        this.getAdmissiondata().down('#ward').setValue(rec.get('ConsultationFee'));
                        this.getAdmissiondata().down('#financeClass').setValue(rec.get('PaymentMode'));


                    }else{
                        this.getAdmissiondata().down('#outpatientDetails').setHidden(false);
                        this.getAdmissiondata().down('#outpatient').setValue(rec.get('EncounterClass'));
                        this.getAdmissiondata().down('#department').setValue(rec.get('Department'));
                        this.getAdmissiondata().down('#consultationFee').setValue(rec.get('ConsultationFee'));
                        this.getAdmissiondata().down('#financePlan').setValue(rec.get('PaymentMode'));
                    }
                }
    },

    openAdmissionData1: function(pid,encNo,names) {
        // var pid=sessionStorage.getItem('pid');
        var names=sessionStorage.getItem('names');
        //if(pid===''){
        var pid=sessionStorage.getItem('pid');
        var dt=new Date();
        var regDate=Ext.Date.format(dt,'d-m-Y H:i:s');
        //}

        //Ext.Msg.alert('Rest',pid+' '+names);

        var encounterNo=sessionStorage.getItem('encounterNo');

                var encStore =Ext.data.StoreManager.lookup('EncountersListStore');
                encStore.load({
                    params: {
                        pid: pid
                    },
                    callback: function(records, operation, success) {

                    },
                    scope: this
                });


                admissionDetails=Ext.create("CarePortal.view.AdmissionData",{});
                centerContainer=this.getViewport().down("#detailsPanel");
                //centerDetails=Ext.create("CarePortal.view.SystemAdmin",{});
                centerContainer.removeAll();

                centerContainer.add(admissionDetails);
                centerContainer.setTitle('Patient Admission Data');



                this.getAdmissiondata().down('#pid').setValue(pid);
                this.getAdmissiondata().down('#pid2').setValue(pid);
                this.getAdmissiondata().down('#pid3').setValue(pid);
                this.getAdmissiondata().down('#fileNumber').setValue(sessionStorage.getItem('fileNumber'));
                this.getAdmissiondata().down('#names').setValue(names);
                this.getAdmissiondata().down('#dob').setValue(sessionStorage.getItem('dob'));
                this.getAdmissiondata().down('#gender').setValue(sessionStorage.getItem('gender'));
                this.getAdmissiondata().down('#registrationDate').setValue(regDate);
                this.getAdmissiondata().down('#phone').setValue(regDate);

        //         this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);
        //         this.getAdmissiondata().down('#encounterNr2').setValue(sessionStorage.getItem('encounterNo'));
        //         this.getAdmissiondata().down('#encounterDate').setValue(sessionStorage.getItem('EncounterDate'));
        //         this.getAdmissiondata().down('#encounterDate2').setValue(sessionStorage.getItem('EncounterDate'));

                if(encounterNo===''){
                    this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);
                    this.getAdmissiondata().down('#admissionButtons').setHidden(false);
                    this.getAdmissiondata().down('#menuDiagram').setHidden(true);
                }
    },

    openTriage: function() {
                //headerPanel=Ext.create("CarePortal.view.HeaderPanel",{});

                triageArea=Ext.create("CarePortal.view.TriagePanel",{});
                centerContainer=this.getViewport().down("#PortalDetails");
                centerContainer.removeAll();

                centerContainer.add(triageArea);
    },

    getAnnouncements: function() {
        //newsWindow = Ext.create('CarePortal.view.Announcements', {});
        newsWindow=this.getViewport().down("#announcements");

        var newsStore=Ext.data.StoreManager.lookup("AnnouncementStore");

        newsStore.load({
            params: {},
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=announcements>',
                    '<tpl for="Announcements">',
                    '<tr>',
                    '<td class=titles>{title}</td></tr>',
                    '<tr><td>{body}</td></tr>',
                    '</tpl>',
                   '</table>'
                );
                var data1=newsStore.proxy.reader.rawData;
                tpl.overwrite(newsWindow.body,data1);
            },
            scope: this
        });

    },

    searchPatients: function(field, newValue, oldValue, eOpts) {

        if(newValue.length>2){
            //Ext.Msg.alert('test',newValue);
            var opStore=Ext.data.StoreManager.lookup("OPAdmissionsStore");

                opStore.load({
                    params: {
                        searchParam:newValue
                    },
                    callback: function(records, operation, success) {
                    },
                    scope: this
                });
        }

    },

    getPortalData: function(store, encNo) {
        store.load({
            params: {
                encNo:encNo
            },
            callback: function(records, operation, success) {

            },scope:this

        });

        var data = [];

        store.each(function(record) {
            data.push(record.getData());
        });

        return data;
    },

    openEntryForm: function(button) {
        var callingPanel=button.up('panel').getItemId();
        //Ext.Msg.alert('Form Name',callingPanel);
        if(callingPanel==='vitals'){
            var entryForm=Ext.create('CarePortal.view.VitalsForm', {});
            var strTitle="Vitals Form";
        }

        var entryWindow=Ext.create('Ext.window.Window', {
            title: strTitle,
            resizable:true,
            minWidth:300,
            minHeight:300
        });

        // this.getHeaderpanel().down('#PatientName').setValue(record.get('Names'));
        // this.getHeaderpanel().down('#Age').setValue(record.get('Age'));
        // this.getHeaderpanel().down('#Gender').setValue(record.get('Gender'));
        // this.getHeaderpanel().down('#PID').setValue(record.get('Pid'));
        // this.getHeaderpanel().down('#EncounterNo').setValue(record.get('EncounterNo'));

        entryWindow.add(entryForm);
        entryWindow.show();

    },

    buildMenus: function(navPanel, eOpts) {
        var accordPanel, menu,menuItem,groupID;

        var strMenusStore=Ext.data.StoreManager.lookup('MenusStore');

        strMenusStore.load(function(records,operation,success){

            Ext.each(records,function(root) {

                menu = Ext.create("Ext.menu.Menu", {
                    floating: false,
                    title:root.get('menuName'),
                    icon:root.get('sImage'),
                    bodyStyle: 'background:#e8eaed; color:white;!important;',
                    header: {
                        style: 'background:#1b5f87;color:white;font-weight:bold;'
                    }
                });
                navPanel.add(menu);

                Ext.each(root, function (rec){
                    Ext.each(rec.get('subMenus'), function (items) {
                        //console.log(items);
                        menuItem = Ext.create("Ext.menu.Item", {
                            text: items.subMenuName,
                            icon:items.sImage,
                            itemId:items.Nr,
                            link:items.url,
                            dispType:items.dispType,
                            admType:items.ID,
                            style:'font-size: 28px;'
                        });
                        menu.add(menuItem);
                    });

                });


            });
        });
    },

    getSelectedMenu: function(menu, item, eOpts) {
        //Ext.Msg.alert('test','test '+item.link + '-'+item.admType);
            centerContainer=this.getViewport().down("#detailsPanel");
        if(item.dispType==1){

            var shiftStatus=localStorage.getItem('shiftStatus');

            if(item.link==='CashSales' && shiftStatus==='Closed' ){

                        centerDetails=Ext.create("CarePortal.view.StartShift",{});
                        centerContainer.removeAll();
                        var containterWindows=Ext.create('Ext.window.Window', {
                            title: 'Start Shift',
                            resizable:false,
                            closable:true
                        });

                        containterWindows.add(centerDetails);
                        containterWindows.show();
                        Ext.Msg.alert('Info','You have not opened a Shift: Status='+shiftStatus);
            }else{

                centerDetails=Ext.create("CarePortal.view."+item.link,{});
                centerContainer.removeAll();

                centerContainer.add(centerDetails);
                centerContainer.setTitle(item.text);

                if(item.admType=="122"){
                    centerDetails.down('#formStatus').setValue('IP');
                    centerContainer.setTitle("Inpatient Invoices");
                }else{
                    centerDetails.down('#formStatus').setValue('OP');
                    centerContainer.setTitle("Outpatient Invoices");
                }

            }


            //centerDetails.query('textfield[name="formStatus"]')[0].setValue('insert');

        }else if(item.dispType==2){

            centerDetails=Ext.create("CarePortal.view."+item.link,{});
            centerContainer.removeAll();
            var containterWindows=Ext.create('Ext.window.Window', {
                title: item.text,
                resizable:true,
                closable:true,
                layout:'fit'
            });

            containterWindows.add(centerDetails);
            containterWindows.show();

            //centerDetails.query('textfield[name="formStatus"]')[0].setValue('insert');

        }

    },

    getPressedKey: function(field, e, options) {
           if (e.getKey() == e.ENTER) {
                this.searchPatient();
            }
    },

    openRegister: function(button) {
        register=Ext.create("CarePortal.view.Register",{});

        var containterWindows=Ext.create('Ext.window.Window', {
            title: "Patient Registration",
            resizable:false,
            closable:true
        });

        containterWindows.add(register);
        containterWindows.show();

        register.down('#formStatus').setValue("Insert");
    },

    getViewPatient: function(button) {
        //Ext.Msg.alert("Button clicked", "Hey! " +  button.lookupViewModel());
        var rec = button.lookupViewModel().get('record');

        var sourceForm=button.up('grid').getItemId();

        if(sourceForm==='patientInfo'){
            encounterNo=rec.get('CurrentEncounter');
            var names=rec.get('FirstName')+' '+rec.get('LastName')+ ' '+rec.get('SurName');

        }else if(sourceForm==='OutpatientAdmissions'){
            encounterNo=rec.get('EncounterNo');
            var names=rec.get('Names');

        }

        var encStore =Ext.data.StoreManager.lookup('EncountersListStore');
        encStore.load({
            params: {
                pid: rec.get('Pid')
            },
            callback: function(records, operation, success) {

            },
            scope: this
        });


        admissionDetails=Ext.create("CarePortal.view.AdmissionData",{});
        centerContainer=this.getViewport().down("#detailsPanel");
        //centerDetails=Ext.create("CarePortal.view.SystemAdmin",{});
        centerContainer.removeAll();

        centerContainer.add(admissionDetails);
        centerContainer.setTitle('Patient Admission Data');

        this.getStatusLogs(encounterNo);

        this.getAdmissiondata().down('#pid').setValue(rec.get('Pid'));
        this.getAdmissiondata().down('#pid2').setValue(rec.get('Pid'));
        this.getAdmissiondata().down('#pid3').setValue(rec.get('Pid'));
        this.getAdmissiondata().down('#fileNumber').setValue(rec.get('fileNumber'));
        this.getAdmissiondata().down('#names').setValue(names);
        this.getAdmissiondata().down('#dob').setValue(rec.get('DateOfBirth'));
        this.getAdmissiondata().down('#gender').setValue(rec.get('Gender'));
        this.getAdmissiondata().down('#registrationDate').setValue(rec.get('EncounterDate')+" "+rec.get('EncounterTime'));
        this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);
        this.getAdmissiondata().down('#encounterNr2').setValue(encounterNo);
        this.getAdmissiondata().down('#encounterDate').setValue(rec.get('EncounterDate'));
        this.getAdmissiondata().down('#encounterDate2').setValue(rec.get('EncounterDate'));

        if(encounterNo===''){
            this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);
            this.getAdmissiondata().down('#admissionButtons').setHidden(false);
            this.getAdmissiondata().down('#menuDiagram').setHidden(true);
        }else{
            this.getAdmissiondata().down('#admissionStatus').setValue('The Patient is Currentlly Admited in '+rec.get('Department'));
            this.getAdmissiondata().down('#admissionButtons').setHidden(true);
            this.getAdmissiondata().down('#menuDiagram').setHidden(false);
            if(rec.get('EncounterClass')==1){
                this.getAdmissiondata().down('#inpatientDetails').setHidden(false);
                this.getAdmissiondata().down('#inpatient').setValue(rec.get('Department'));
                this.getAdmissiondata().down('#ward').setValue(rec.get('ConsultationFee'));
                this.getAdmissiondata().down('#financeClass').setValue(rec.get('PaymentMode'));

            }else{
                this.getAdmissiondata().down('#outpatientDetails').setHidden(false);
                this.getAdmissiondata().down('#outpatient').setValue(rec.get('EncounterClass'));
                this.getAdmissiondata().down('#department').setValue(rec.get('Department'));
                this.getAdmissiondata().down('#consultationFee').setValue(rec.get('ConsultationFee'));
                this.getAdmissiondata().down('#financePlan').setValue(rec.get('PaymentMode'));
            }
        }


    },

    searchPatient: function() {
        var searchParam=this.getPatientinfo().down('#searchBox').getValue();
        var patientsStore =Ext.data.StoreManager.lookup('PatientDetails');
        patientsStore.load({
            params: {
                searchParam: searchParam
            },
            callback: function(records, operation, success) {

            },
            scope: this

        });
    },

    showAdmissionform: function(button) {
        //Ext.Msg.alert('Test',button.getItemId());
        if(button.getItemId()=='cmdAdmitInpatient'){
            this.getAdmissiondata().down('#admitInpatient').setHidden(false);
            this.getAdmissiondata().down('#admitOutpatient').setHidden(true);
            this.getAdmissiondata().down('#admitInpatient').down('#sourcePanel').setValue('direct');
        }else if(button.getItemId()=='cmdAdmitOutpatient'){
             this.getAdmissiondata().down('#admitOutpatient').setHidden(false);
             this.getAdmissiondata().down('#admitInpatient').setHidden(true);
        }

        // var itemsStore =Ext.data.StoreManager.lookup('Consultations');
        //         itemsStore.load({
        //             params: {
        //                 searchParam: 'Yes'
        //             },
        //             callback: function(records, operation, success) {

        //             },
        //             scope: this

        //         });

    },

    cancelAdmission: function(button) {
        //if(button.getItemId('#cmdAdmitInpatient')){
            this.getAdmissiondata().down('#admitInpatient').setHidden(true);
            this.getAdmissiondata().down('#admitOutpatient').setHidden(true);

        // }else if(button.getItemid('#cmdAdmitOutpatient')){
        //     this.getAdmissiondata().down('#admitOutpatient').setHidden(false);
        //     this.getAdmissiondata().down('#admitInpatient').setHidden(true);
        // }
    },

    savePatient: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        //var entryForm=form.getItemId();
        var pid=button.up('panel').down('#Pid').getValue();
        var name_first=button.up('panel').down('#name_first').getValue();
        var name_2=button.up('panel').down('#name_2').getValue();
        var name_last=button.up('panel').down('#name_last').getValue();
        var names=name_first+' '+name_2+' '+name_last;
        var dob1=button.up('panel').down('#date_birth').getValue();
        var dob=Ext.Date.format(dob1,"d-m-Y");
        var formStatus=button.up('panel').down('#formStatus').getValue();

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                  pid: pid
                },
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'The Patient has been registered Successfully. \n NoW admit the patient');
                     this.getLastPatient();


                    sessionStorage.setItem("fileNumber",button.up('panel').down('#fileNumber').getValue());
                    sessionStorage.setItem("names",names);
                    sessionStorage.setItem("dob",dob);
                    sessionStorage.setItem("gender",button.up('panel').down('#sex').getValue());
        //             sessionStorage.setItem("registrationDate",button.up('panel').down('#registrationDate').getValue());
                    sessionStorage.setItem("paymentMethod",button.up('panel').down('#insurance').getValue());

                    button.up('form').getForm().reset();
                    button.up('window').hide();
                    //this.getViewPatient(button);

                    if(formStatus=="insert"){
                        this.openAdmissionData1();
                    }

                    var patientsStore =Ext.data.StoreManager.lookup('PatientDetails');
                    patientsStore.load({
                        params:{
                            pid:sessionStorage.getItem('pid')
                        }
                    });

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Patient. \n Error=' + jsonResp.error);
                },
                scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveOpAdmission: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
                //var entryForm=form.getItemId();
                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        success: function (form, action) {
                            Ext.Msg.alert('Thank you!', 'The Patient has been Admitted Successfully.');
                            button.up('panel').getForm().reset();
                            button.up('panel').hide();


                            centerDetails=Ext.create("CarePortal.view.OutpatientList",{});
                            centerContainer.removeAll();

                            centerContainer.add(centerDetails);
                            centerContainer.setTitle('Outpatient List');
        //                     this.getViewPatient(button);
                            var opStore =Ext.data.StoreManager.lookup('OPAdmissionsStore');
                             opStore.load({});

                                            },
                        failure: function (form, action) {
                            var jsonResp = Ext.decode(action.response.responseText);

                            Ext.Msg.alert('Failed', 'Could not save Patient. \n Error=' + jsonResp.error);
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }

        // this.getAdmissiondata().down('#admissionButtons').setHidden(true);
        // this.getAdmissiondata().down('#outpatientDetails').setHidden(false);
    },

    saveForm: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        var pid=button.up('form').down('#pid').getValue();
        var encNr=button.up('form').down('#encounterNo').getValue();

        //var entryForm=form.getItemId();
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    pid:pid,
                    encNr:encNr
                },
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');
                    button.up('form').getForm().reset();
                    button.up('window').hide();

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'Could not save Vitals. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    saveIpAdmission: function(button) {
         var form = button.up('panel').getForm(); // get the basic form
                //var entryForm=form.getItemId();
                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        success: function (form, action) {
                            Ext.Msg.alert('Thank you!', 'The Admission has been saved Successfully.');
                            button.up('form').getForm().reset();
                            button.up('form').hide();

                        },
                        failure: function (form, action) {
                            var jsonResp = Ext.decode(action.response.responseText);

                            Ext.Msg.alert('Failed', 'Could not save Admission Data. \n Error=' + jsonResp.error);
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }

        var srcPanel=button.up('form').down('#sourcePanel').getValue();

        if(srcPanel==="direct"){
            this.getAdmissiondata().down('#admissionButtons').setHidden(true);
            this.getAdmissiondata().down('#admissionDetails').setHidden(false);

        }else if(srcPanel==="transfer"){

            var pid=button.up('form').down('#pid').getValue();
            var encNo=button.up('form').down('#encounter_nr').getValue();
            var names=button.up('form').down('Names').getValue();
            this.openAdmissionData1(pid,encNo,names);
            this.getAdmissiondata().down('#admissionButtons').setHidden(true);
            this.getAdmissiondata().down('#admissionDetails').setHidden(false);
        }


    },

    createVitals: function(component, eOpts) {

        //Ext.Msg.alert('Thank you!',this.getPatientstatus().down('#pid'));
        component.getEl().on('click', function() {
            // Ext.Msg.alert('Thank you!',component.up('panel').up('panel').getItemId());

            var vitals=Ext.create("CarePortal.view.VitalsForm",{});
            //centerContainer.removeAll();
            var containterWindows=Ext.create('Ext.window.Window', {
                title:"Vitals Entry Form",
                resizable:false,
                closable:true
            });

            containterWindows.add(vitals);
            containterWindows.show();
            var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();

            vitals.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
            vitals.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
            vitals.down('#encounterNo').setValue(encNr);
            vitals.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());

            var vitalsStore =Ext.data.StoreManager.lookup('VitalsStore');
            vitalsStore.load({
                params:{
                    encNr:encNr
                }
            });

        });




    },

    createNotes: function(component, eOpts) {
         component.getEl().on('click', function() {

                        //var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');
                         //    icd10Store.load({});
                        var notes=Ext.create("CarePortal.view.Notes",{});
                        var containterWindows=Ext.create('Ext.window.Window', {
                            title:"Patient Notes",
                            resizable:false,
                            closable:true
                        });

                      var notesStore =Ext.data.StoreManager.lookup('NoteTypesStore');
                       notesStore.load({});

                        containterWindows.add(notes);
                        containterWindows.show();
                     var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();

                    notes.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
                    notes.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
                    notes.down('#encounterNo').setValue(encNr);
                    notes.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());

             var control = Ext.create('CarePortal.controller.Main');
                control.loadNotes(encNr,component);
                });

    },

    createDiagnosis: function(component,eOpts) {
        component.getEl().on('click', function() {

            var diagnosis=Ext.create("CarePortal.view.Diagnosis",{});
            var containterWindows=Ext.create('Ext.window.Window', {
                title:"Diagnosis Entry Form",
                resizable:false,
                closable:true
            });

            var dob=component.up('panel').up('panel').down('#dob').getValue();

            var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');
            icd10Store.load({
                params:{
                    dob:dob,
                    diagType:'OP'
                }
            });


            containterWindows.add(diagnosis);
            containterWindows.show();

            var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();
            diagnosis.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
            diagnosis.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
            diagnosis.down('#encounterNo').setValue(encNr);
            diagnosis.down('#Dob').setValue(dob);
            diagnosis.down('#formStatus').setValue('OP');

             var control = Ext.create('CarePortal.controller.Main');
                control.loadDiagnosis(encNr,component);

        });
    },

    createLabTest: function(component, eOpts) {
         component.getEl().on('click', function() {

             var labtest=Ext.create("CarePortal.view.LabTests",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"lab Tests Entry Form",
                 resizable:false,
                 closable:true,
                 width:1400
             });

             containterWindows.add(labtest);
             containterWindows.show();

             var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();

             labtest.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             labtest.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             labtest.down('#encounterNo').setValue(encNr);
             labtest.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
             labtest.down('#Source').setValue('Dashboard');

             var control = Ext.create('CarePortal.controller.Main');
               control.loadLabTest(encNr);
         });
    },

    createRadiology: function(component, eOpts) {
         component.getEl().on('click', function() {

             var radiology=Ext.create("CarePortal.view.Radiology",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"Radiology Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(radiology);
             containterWindows.show();

             var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();

             radiology.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             radiology.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             radiology.down('#encounterNo').setValue(encNr);
             radiology.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());

             var radiologyStore =Ext.data.StoreManager.lookup('RadiologyListStore');
             radiologyStore.load({});


              var control = Ext.create('CarePortal.controller.Main');
                        control.loadRadiology(encNr);


         });
    },

    createServices: function(component,eOpts) {
         component.getEl().on('click', function() {

             var services=Ext.create("CarePortal.view.Services",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"Service and Procedures Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(services);
             containterWindows.show();
             var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();

             services.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
             services.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             services.down('#encounterNo').setValue(encNr);
             services.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());

             var control = Ext.create('CarePortal.controller.Main');
                control.loadServices(encNr,component);
             //this.loadServices(encNr,component);
         });
    },

    createPrescription: function(component, eOpts) {
         component.getEl().on('click', function() {

             var pid=component.up('panel').up('panel').down('#pid').getValue();
             var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();

             var prescription=Ext.create("CarePortal.view.PrescriptionForm",{});
             var containterWindows=Ext.create('Ext.window.Window', {
                 title:"Prescriptions Entry Form",
                 resizable:false,
                 closable:true
             });

             containterWindows.add(prescription);
             containterWindows.show();

             prescription.down('#pid').setValue(pid);
             prescription.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
             prescription.down('#encounterNo').setValue(encNr);
             prescription.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());

              var prescriptionStore=Ext.data.StoreManager.lookup("PrescriptionStore");
                prescriptionStore.load({
                    params:{
                        pid:pid,
                        encNr:encNr,
                        prescSource:'Prescription'
                    },
                    scope: this
                });
         });
    },

    addComplaints: function(button) {
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var complaint=button.up('form').down('#type_nr').getValue();
        var comment=button.up('form').down('#notes').getValue();

        //var notesPanel=button.up('form').down('#notesPanel');

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveComplaints',
            params: {
                pid:pid,
                encNr:encounterNo,
                type_nr:complaint,
                notes:comment
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                //Ext.Msg.alert('Error',resp.Error);
                button.up('form').down('#notes').setValue("");
                var notesStore=Ext.data.StoreManager.lookup("NotesStore");
                notesStore.load({
                    params:{
                        pid:pid,
                        encNr:encounterNo,
                        locationNr:locationNr
                    },
                    scope: this
                });

            },
            scope:this
        });
        //this.loadNotes(encounterNo,notesPanel);
        //this.getNotes(encounterNo);
    },

    loadNotes: function(encounterNr,component) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        notesPanel=this.getNotes().down("#notesPanel");


        var notesStore=Ext.data.StoreManager.lookup("NotesStore");

        notesStore.load({
            params: {
                encNr:encounterNr
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=4 class=titles>DOCTORS NOTES & COMPLAINTS</td></tr>',
                                '<tr><td class=titles>Note Type</td>',
                                    '<td class=titles>Note</td>',
                                    '<td class=titles>Time</td>',
                                    '<td class=titles>TreatedBy</td>',
                                    '<td class=titles>Update</td>',
                                    '<td class=titles>Delete</td>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{NotesType}</td>',
                                    '<td style="width:400px;"><div class=content>{Notes}</div></td>',
                                    '<td>{CreateTime}</td>',
                                    '<td>{TreatedBy}</td>',
                                    '<td><a id={ID} href="#"><img src="icons/update2.gif"></a></td>',
                                    '<td><a id={ID} href="javascript:void(0);" onclick = "this.deleteNote();"><img src="icons/delete2.gif"></a></td>',
                                '</tr>',
                        '</tpl>',{
                            deleteNote: function(id) {
                                return Ext.Msg.alert('Test',id);
                            },
                            getLinkId: function(values) {
                                Ext.Msg.alert('link ' + values + ' clicked');
                                var result = Ext.id();
                                this.addListener.defer(1, this, [result]);
                                return result;
                            },
                            addListener: function(id) {
                                Ext.get(id).on('click', function(e){
                                    e.stopEvent();
                                    Ext.Msg.alert('link ' + id + ' clicked');
                                });
                            }
                        },
                        '</table>'
                    );

                var data = [];

                notesStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(notesPanel.body,data);
            },
            scope: this
        });
    },

    loadAllergies: function(component) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        allergiesPanel=this.getRegister().down("#allergiesPanel");


        var allergiesStore=Ext.data.StoreManager.lookup("AllergiesStore");

        allergiesStore.load({
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=4 class=titles>ALLERGIES</td></tr>',
                                '<tr><td class=titles>Allergy</td>',
                                    '<td class=titles>Description</td>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{Allergy}</td>',
                                    '<td style="width:400px;"><div class=content>{Allergy}</div></td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                allergiesStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(allergiesPanel.body,data);
            },
            scope: this
        });
    },

    loadServices: function(encounterNr,component) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        servicesPanel=this.getServices().down("#servicesPanel");


        var serviceStore=Ext.data.StoreManager.lookup("ProceduresAndServices");

        serviceStore.load({
            params: {
                encNr:encounterNr
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=4 class=titles>PATIENT SERVICES AND PROCEDURES</td></tr>',
                                '<tr><td class=titles>Date</td>',
                                    '<td class=titles>Service</td>',
                                    '<td class=titles>Cost</td>',
                                    '<td class=titles>Comment</td>',
                                    '<td class=titles>TreatedBy</td>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{InputDate}</td>',
                                    '<td style="width:400px;"><div class=content>{Description}</div></td>',
                                    '<td>{Total}</td>',
                                    '<td>{Comment}</td>',
                                    '<td>{InputBy}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                serviceStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(servicesPanel.body,data);
            },
            scope: this
        });
    },

    loadDiagnosis: function(encounterNr,component) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        diagnosisPanel=this.getDiagnosis().down("#diagnosisPanel");
        encounterNr=this.getDiagnosis().down("#encounterNo").getValue();

        var diagnosisStore=Ext.data.StoreManager.lookup("DiagnosisStore");

        diagnosisStore.load({
            params: {
                encNr:encounterNr
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=4 class=titles>PATIENT DIAGNOSIS</td></tr>',
                                '<tr><td class=titles>Code</td>',
                                    '<td class=titles>Description</td>',
                                    '<td class=titles>Time</td>',
                                    '<td class=titles>Type</td>',
                         '<tpl for=".">',
                                '<tr>',
                                    '<td>{Code}</td>',
                                    '<td style="width:400px;"><div class=content>{Description}</div></td>',
                                    '<td>{Time}</td>',
                                    '<td>{Type}</td>',
                                '</tr>',
                        '</tpl>',
                        '</table>'
                    );

                var data = [];

                diagnosisStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(diagnosisPanel.body,data);
            },
            scope: this
        });
    },

    getSelectedPatient: function(component, eOpts) {
        component.getEl().on('click', function(e,t) {
               e.stopEvent();
            var patient=t.innerHTML;
            var str1=patient.split(" ");
            var pid=str1[0];
            var encNo = str1[str1.length - 1];
            var names=str1.slice(1,-1);

              //Ext.Msg.alert('Test','Select Pid is '+names);
               var assignBeds=Ext.create("CarePortal.view.AssignBeds",{});
               var containterWindows=Ext.create('Ext.window.Window', {
                   title:"Assign Occupant",
                   resizable:true,
                   closable:true,
                   height:600,
                   width:1000,
                   layout : {
                        type: 'vbox',
                        align: 'stretch'
                   }
               });


                var assMsg=assignBeds.down('#assMsg').getValue();
                var ward=component.up('grid').down('#wardTitle').getValue();
                var wardID=component.up('grid').down('#wardID').getValue();
                assignBeds.down('#ward').setValue(ward);
                assignBeds.down('#assMsg').setValue(assMsg +" PID " + t.innerHTML + ".Thank You");
                assignBeds.down('#wardID').setValue(wardID);
                assignBeds.down('#encNo').setValue(encNo);
                assignBeds.down('#pid').setValue(pid);
                assignBeds.down('#names').setValue(names);


                     containterWindows.add(assignBeds);
                     containterWindows.show();






           });
    },

    assignBed: function(gridpanel, record, item, index, e, options) {
        var transType=gridpanel.up('panel').down('#transType').getValue();
        Ext.Msg.alert('Test','ward No is '+transType);
        if(record.get('PID')===''){
          //   var columns = grid.getView().headerCt.getGridColumns();
            if(transType=="Beds"){
                transType="transferWardBed";
                mode="transferbed";
            }else{
                 transType="assignBed";
                 mode="";
            }

            var encNo=gridpanel.up('grid').down('#encNo').getValue();
            var wrdNo=gridpanel.up('grid').down('#wardID').getValue();
            var rm=record.get('RoomNo');
            var bd=record.get('BedNo');

             Ext.Ajax.request({
                    url: 'data/getDataFunctions.php?task='+transType,
                    waitMsg: 'wait while we assign a bed ...',
                 params:{
                     encNr:encNo,
                     wrdNo:wrdNo,
                     roomNo:rm,
                     bed:bd,
                     mode:mode
                 },
                    success: function(response){
                        var text = response.responseText;

                       // Ext.Msg.alert('Success','Successfully Assigned Bed to '+this.getAssignbeds().down('#encNo').getValue());
                        gridpanel.up('window').close();

                        var occupancyStore=Ext.data.StoreManager.lookup("OccupancyStore");
                        occupancyStore.load({
                            params:{
                               wardId:wrdNo
                            }
                        });

                        var waitingStore=Ext.data.StoreManager.lookup("WaitingListStore");
                        waitingStore.load({
                             params: {
                                wardNo:wrdNo
                            }
                        });



                    },
                    failure:function(response){
                       // var resp = JSON.parseJSON(response);
                        Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
                    },
                      scope: this
                });
        }
    },

    login: function(button) {
        //Ext.Msg.alert('login',button.up('form').down('#username').getValue());

        var username=button.up('form').down('#username').getValue();
        var password=button.up('form').down('#password').getValue();
        var userGroup=button.up('form').down('#userGroup').getValue();

        var form = button.up('panel').getForm(); // get the basic form

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                success: function (form, action) {

                    localStorage.setItem("LoggedIn",true);
                    localStorage.setItem("UserName",username);
                    console.log("logged Username "+action.result.userNameSession);

                    //this.getLogin().destroy();
                    button.up("viewport").destroy();
                    this.openHome();

                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Error', 'Problem Signing in. \n Error=' + jsonResp.Error);
                },
                scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }


    },

    openSystemAdmin: function(button) {
        centerContainer=this.getViewport().down("#detailsPanel");
        centerDetails=Ext.create("CarePortal.view.SystemAdmin",{});
        centerContainer.removeAll();

        centerContainer.add(centerDetails);
        centerContainer.setTitle('System Admin');
    },

    logout: function(button) {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=logOut',
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                 localStorage.setItem("LoggedIn", false);
                button.up('viewport').destroy();
                Ext.create("CarePortal.view.Login",{});
            },

            failure: function(response, opts) {
                console.log('server-side failure with status code ' + response.status);
            }
        });

        //Ext.widget(homeArea);
        // centerContainer=homeArea.down("#PortalDetails");
        // centerContainer.removeAll();

    },

    checkLoginStatus: function(component, eOpts) {

    },

    saveLabTest: function(button) {
        var form = button.up('panel').getForm(); // get the basic form
        var encNr= this.getLabtests().down('#encounterNo').getValue();

        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    encNr:encNr
                },
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Saved Lab Request Successfully.');
        //             button.up('form').getForm().reset();
        //             button.up('window').close();
                    this.loadLabTest(encNr);
                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem with the Request. \n Error=' + jsonResp.error);
                },
                  scope:this
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadEncounterLogs: function() {
        var notesStore=Ext.data.StoreManager.lookup("NotesStore");
        notesStore.load({
            params:{
                //encNr:encounterNr
            }
        });


        var tpl=new Ext.XTemplate(
            '<Table id=notes>',
            '<tr><td colspan=5>Vitals</td></tr>',
            '<tr><td>Weight</td><td>Height</td><td>Temperature</td><td>BP</td><td>Pulse</td><td>Respiratory</td></tr>',

            '</table>'
        );

        var data = [];
        notesStore.each(function(record) {
            data.push(record.getData());
        });

        tpl.overwrite(component.body,data);
    },

    searchPatientRegister: function(field, newValue, oldValue, eOpts) {
        if(newValue.length>2){
            //Ext.Msg.alert('test',newValue);
            var ptsStore=Ext.data.StoreManager.lookup("PatientDetails");

                ptsStore.load({
                    params: {
                        searchParam:newValue
                    },
                    callback: function(records, operation, success) {
                    },
                    scope: this
                });
        }
    },

    getPressedKey2: function(field, e, options) {
        var ptsStore=Ext.data.StoreManager.lookup("PatientDetails");

        ptsStore.load({
            params: {
                searchParam:field.getValue()
            },
            callback: function(records, operation, success) {
            },
            scope: this
        });

    },

    updatePatientInfo: function(button) {
        var rec = button.lookupViewModel().get('record');
        //Ext.Msg.alert('Test',rec.get('FirstName'));
        register=Ext.create("CarePortal.view.Register",{});

        var containterWindows=Ext.create('Ext.window.Window', {
            title: "Patient Registration",
            resizable:false,
            closable:true
        });

        containterWindows.add(register);
        containterWindows.show();

        register.down('#Pid').setValue(rec.get('Pid'));
        register.down('#name_first').setValue(rec.get('FirstName'));
        register.down('#name_2').setValue(rec.get('LastName'));
        register.down('#name_last').setValue(rec.get('SurName'));
        var dt=rec.get('DateOfBirth');
        var dob=Ext.Date.format(dt,'d-m-Y');
        register.down('#date_birth').setValue(dob);

        //(Ext.Date.diff(new Date(2000, 02, 29), new Date(2015, 03, 03), Ext.Date.YEAR); // returns 4 expected 5!

        var age=Ext.Date.diff(dob, new Date(), Ext.Date.YEAR); // returns 4 expected 5!

        register.down('#age').setValue(age);
        register.down('#months').setValue(rec.get('Months'));
        register.down('#sex').setValue(rec.get('Gender'));
        register.down('#citizenship').setValue(rec.get('Village'));
        register.down('#county').setValue(rec.get('County'));
        register.down('#addr_zip').setValue(rec.get('Address'));
        register.down('#phone_1_nr').setValue(rec.get('Phone'));
        register.down('#nat_id_nr').setValue(rec.get('IDNumber'));
        register.down('#next_of_kin').setValue(rec.get('NextOfKin'));
        register.down('#kin_relations').setValue(rec.get('KinRelations'));
        register.down('#next_of_kin2').setValue(rec.get('NextOfKin'));
        register.down('#kin_relations2').setValue(rec.get('KinRelations'));
        register.down('#insurance').setValue(rec.get('PaymentMode'));
        register.down('#formStatus').setValue("Update");
    },

    getStatusLogs: function(encounterNr) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        logsPanel=this.getAdmissiondata().down("#statusLogs");
        vitalsPanel=this.getAdmissiondata().down("#vitalsLog");

        var vitalsStore=Ext.data.StoreManager.lookup("VitalsStore");
        vitalsStore.load({
            params: {
                encNr:encounterNr
            },
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=vitals>',
                    '<tr><td colspan=7 class=titles>PATIENTS VITALS</td></tr>',
                    '<tr><td class=titles>Weight</td>',
                    '<td class=titles>Height</td>',
                    '<td class=titles>BP</td>',
                    '<td class=titles>Temp</td>',
                    '<td class=titles>Pulse</td>',
                    '<td class=titles>Respiration</td>',
                    '<td class=titles>BMI</td>',
                    '<tpl for=".">',
                    '<tr>',
                    '<td>{Weight}</td>',
                    '<td>{Height}</td>',
                    '<td>{Systolic}/{Diastolic}</td>',
                    '<td>{Temperature}</td>',
                    '<td>{Pulse}</td>',
                    '<td>{Respiration}</td>',
                    '<td>{Bmi}</td>',
                    '</tr>',
                    '</tpl>',
                    '</table>'
                );

                var data = [];

                vitalsStore.each(function(record) {
                    data.push(record.getData());
                });

                //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(vitalsPanel.body,data);
            },
            scope: this
        });

        var logsStore=Ext.data.StoreManager.lookup("StatusLogsStore");

        logsStore.load({
            params: {
                labNo:encounterNr
            },
            callback: function(records, operation, success) {
                var tpl=new Ext.XTemplate(
                    '<Table id=notes>',
                    '<tr><td colspan=4 class=titles>PATIENT ENCOUNTERS LOGS</td></tr>',
                    '<tr><td class=titles>Time</td>',
                    '<td class=titles>Type</td>',
                    '<td class=titles>Status</td>',
                    '<td class=titles>InputBy</td>',
                    '<tpl for=".">',
                    '<tr>',
                    '<td>{UpdateTime}</td>',
                    '<td>{StatusType}</td>',
                    '<td style="width:400px;"><div class=content>{Status}</div></td>',
                    '<td>{InputBy}</td>',
                    '</tr>',
                    '</tpl>',
                    '</table>'
                );

                var data2 = [];

                logsStore.each(function(record) {
                    data2.push(record.getData());
                });

                //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(logsPanel.body,data2);
            },
            scope: this
        });
    },

    saveProceduresAndServices: function(button) {
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var Services=button.up('form').down('#Services').getValue();
        var Qty=button.up('form').down('#Qty').getValue();
        var price=button.up('form').down('#Price').getValue();
        var comment=button.up('form').down('#Comments').getValue();

        var servicesPanel=button.up('form').down('#servicesPanel');
          button.disable();
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveProcedures',
            params: {
                pid:pid,
                encNr:encounterNo,
                service:Services,
                price:price,
                qty:Qty,
                comments:comment
            },
            success: function(response){

                var resp = Ext.JSON.decode(response.responseText);
               // Ext.Msg.alert('Success','Procedure/Service Added Successfully');

                //this.getNotes(encounterNo);

            },
            scope:this
        });
        // button.up('panel').down('#Services').clear();
         Ext.defer(function () {
             button.enable();
         }, 2000);

        this.loadServices(encounterNo,servicesPanel);
    },

    getDob: function(field, newValue, oldValue, eOpts) {
        if(field.getItemId()=='age'){
            var params='age';
        }else if(field.getItemId()=='months'){
             var params='months';
        }

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getDOB',
            params: {
                params:newValue,
                dateVal:params
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                //Ext.Msg.alert('Error',resp.dob);

                field.up('form').down('#date_birth').setValue(resp.dob);

            },
            scope:this
        });
    },

    saveDiagnosis: function(button) {
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var icdCode=button.up('form').down('#ICD_10_code').getValue();
        var comment=button.up('form').down('#comment').getValue();
        var patientStatus=button.up('form').down('#patientStatus').getValue();
        var visitType=button.up('form').down('#type').getValue();

        var diagnosisPanel=button.up('form').down('#diagnosisPanel');

                Ext.Ajax.request({
                     url: 'data/getDataFunctions.php?task=saveDiagnosis',
                    params: {
                        pid:pid,
                        encNr:encounterNo,
                        icdCode:icdCode,
                        patientStatus:patientStatus,
                        visitType:visitType,
                        comment:comment
                    },
                    success: function(response){
                       var resp = Ext.JSON.decode(response.responseText);
                        Ext.Msg.alert('Success',resp.Error);

                        //this.getNotes(encounterNo);

                    },
                    scope:this
                });
        this.loadDiagnosis(encounterNo,diagnosisPanel);
    },

    createMch: function(component, eOpts) {


        component.getEl().on('click', function() {

                var mch=Ext.create("CarePortal.view.MCH",{});
                //centerContainer.removeAll();
                var containterWindows=Ext.create('Ext.window.Window', {
                    title:"MCH Entry Form",
                    resizable:false,
                    closable:true
                });

                containterWindows.add(mch);
                containterWindows.show();

            mch.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
            mch.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
            mch.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
            mch.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
        });
    },

    saveMch: function(button) {
        Ext.Msg.alert('Thank you!', 'Saved MCH Request Successfully.');
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();

        var form = button.up('panel').getForm(); // get the basic form
                var encNr= this.getMch().down('#encounterNo').getValue();

                if (form.isValid()) { // make sure the form contains valid data before submitting
                    form.submit({
                        params:{
                            encNr:encounterNo,
                            pid:pid
                        },
                        success: function (form, action) {
                            Ext.Msg.alert('Thank you!', 'Saved MCH Request Successfully.');
                            button.up('form').getForm().reset();
                            button.up('window').close();
                        },
                        failure: function (form, action) {
                            var jsonResp = Ext.decode(action.response.responseText);

                            Ext.Msg.alert('Failed', 'There was a problem with the Request. \n Error=' + jsonResp.error);
                        }
                    });
                } else { // display error alert if the data is invalid
                    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
                }

    },

    addAllergies: function(button) {
        var allergy=button.up('form').down('#allergyName').getValue();
        var allergyDescription=button.up('form').down('#allergyDescription').getValue();
        var allergiesPanel=button.up('form').down('#allergiesPanel');

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveAllergy',
            params: {
                allergy:allergy,
                allergyDescription:allergyDescription
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Success',resp.Error);

                //this.getNotes(encounterNo);

            },
            scope:this
        });

        this.loadAllergies(allergiesPanel);
    },

    addInsurance: function(button) {
        var allergy=button.up('form').down('#allergyName').getValue();
        var allergyDescription=button.up('form').down('#allergyDescription').getValue();
        var allergiesPanel=button.up('form').down('#allergiesPanel');

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveAllergy',
            params: {
                allergy:allergy,
                allergyDescription:allergyDescription
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Success',resp.Error);

                //this.getNotes(encounterNo);

            },
            scope:this
        });

        this.loadAllergies(allergiesPanel);
    },

    createImmunization: function(component, eOpts) {
        component.getEl().on('click', function() {

            var immunization=Ext.create("CarePortal.view.Immunization",{});
            var containterWindows=Ext.create('Ext.window.Window', {
                title:"Immunization Entry Form",
                resizable:false,
                closable:true
            });

            containterWindows.add(immunization);
            containterWindows.show();

            immunization.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());
            immunization.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());
            immunization.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());
            immunization.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());
        });
    },

    saveRadiology: function(button) {
        var pid=button.up('form').down('#pid').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var xrayTest=button.up('form').down('#Radiology').getValue();
        var comment=button.up('form').down('#Comments').getValue();
        var price=button.up('form').down('#Price').getValue();
        // var visitType=button.up('form').down('#type').getValue();

        var radiologyPanel=button.up('form').down('#radiologyPanel');

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=saveRadiology',
            params: {
                pid:pid,
                encNr:encounterNo,
                radiology:xrayTest,
                 price:price,
               // visitType:visitType,
                comment:comment
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                Ext.Msg.alert('Success',resp.Error);

                //this.getNotes(encounterNo);

            },
            scope:this
        });
        this.loadRadiology(encounterNo);
    },

    loadRadiology: function(encounterNo) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        radiologyPanel=this.getRadiology().down("#radiologyPanel");
        encounterNr=this.getRadiology().down("#encounterNo").getValue();

        var radiologyStore=Ext.data.StoreManager.lookup("RadiologyStore");

        radiologyStore.load({
            params: {
                encNr:encounterNr
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                                '<tr><td colspan=5 class=titles>RADIOLOGY TESTS</td></tr>',
                                        '<tr><td class=titles>Status</td>',
                                            '<td class=titles>Description</td>',
                                            '<td class=titles>TimeRequested</td>',
                                            '<td class=titles>BatchNo</td>',
                                            '<td class=titles>RequestedBy</td>',
                                        '</tr>',
                                 '<tpl for=".">',

                                        '<tr>',
                                            '<tpl if="Status == pending">',
                                                '<td class=status1>{Status}</td>',
                                            '<tpl else>',
                                                 '<td class=status1>{Status}</td>',
                                            '</tpl>',
                                            '<td>{Description}</td>',
                                            '<td>{TimeRequested}</td>',
                                            '<td>{BatchNo}</td>',
                                            '<td>{RequestedBy}</td>',
                                        '</tr>',
                                '</tpl>',
                                '</table>'
                    );

                var data = [];

                radiologyStore.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(radiologyPanel.body,data);
            },
            scope: this
        });
    },

    loadLabTest: function(encounterNo) {
        //vitalsPanel = Ext.create('CarePortal.view.Vitals', {});
        labTestPanel=this.getLabtests().down("#labTestPanel");
        encounterNr=this.getLabtests().down("#encounterNo").getValue();

        var ltest=Ext.data.StoreManager.lookup("PendingTestsStore");

        ltest.load({
            params: {
                encNr:encounterNr
            },
            callback: function(records, operation, success) {
                    var tpl=new Ext.XTemplate(
                        '<Table id=investigations>',
                                '<tr><td colspan=5 class=titles>LABORATORY TESTS</td></tr>',
                                        '<tr><td class=titles>Status</td>',
                                            '<td class=titles>Description</td>',
                                            '<td class=titles>TimeRequested</td>',
                                            '<td class=titles>BatchNo</td>',
                                            '<td class=titles>RequestedBy</td>',
                                        '</tr>',
                                 '<tpl for=".">',

                                        '<tr>',
                                            '<tpl if="Status == pending">',
                                                '<td class=status1>{Status}</td>',
                                            '<tpl else>',
                                                 '<td class=status1>{Status}</td>',
                                            '</tpl>',
                                            '<td>{TestName}</td>',
                                            '<td>{TimeRequested}</td>',
                                            '<td>{BatchNo}</td>',
                                            '<td>{Requestedby}</td>',
                                        '</tr>',
                                '</tpl>',
                                '</table>'
                    );

                var data = [];

                ltest.each(function(record) {
                    data.push(record.getData());
                });

                 //var data1=notesStore.proxy.reader.rawData;
                tpl.overwrite(labTestPanel.body,data);
            },
            scope: this
        });
    },

    openTransferForm: function(button) {

        //Ext.Msg.alert('Test',button.getItemId());

        var rec = button.lookupViewModel().get('record');
        encounterNo=rec.get('EncounterNo');
        pid=rec.get('Pid');
        names=rec.get('Names');


        var admission=Ext.create("CarePortal.view.IpTransfer",{});
        var admission=Ext.create("CarePortal.view.AdmitInpatient",{});
        admission.down('#encounter_nr').setValue(encounterNo);
        admission.down('#pid3').setValue(pid);
        admission.down('#Names').setValue(names);
        admission.down('#sourcePanel').setValue('transfer');
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Inpatient Admission Form",
            resizable:false,
            closable:true
        });

        containterWindows.add(admission);
        containterWindows.show();
    },

    getLastPatient: function() {
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getlastPatient',
            waitMsg: 'checkin user patient ...',
            success: function(response){

                var resp = Ext.JSON.decode(response.responseText);
                sessionStorage.setItem("pid",resp.pid);
                sessionStorage.setItem("pid2",resp.pid);
                sessionStorage.setItem("pid3",resp.pid);


            },
            failure:function(response){
        //         var resp = JSON.parseJSON(response);
        //         Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
            },
            scope: this
        });

    },

    filterPayments: function(field, newValue, oldValue, eOpts) {
        var grid = field.up('grid');
                grid.store.clearFilter();
                if (newValue) {
                    var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
                    grid.store.filter({
                        filterFn: function(item) {
                            return matcher.test(item.get('payee')) ||
                                matcher.test(item.get('toward'));
                        }
                    });
                }
    },

    openPaymentVoucher: function(button) {
        var cheqID = '';
        var voucherNo='';
        var selectedKeys=button.up('grid').getView().getSelectionModel().getSelection();

        var result = '';
        var ID = '';
        Ext.each(selectedKeys, function (record) {

            result =record.get('Ledger');

            ID = selectedKeys;
            if(ID.length>1){
                cheqID += record.get('ID') + ',';
               // Ext.Msg.alert('Test',cheqID);
                voucherNo+=record.get('Voucher_No');
            }else{
                cheqID = record.get('ID');
                voucherNo=record.get('Voucher_No');
            }

            if(record.get('Cash_Point')=='P06'){
                window.open('reports/payment_voucher.php?cheqID='+cheqID,
                                    "Export Out Patient Invoices","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");
            }else{
                window.open('reports/petty_cash.php?cheqID='+cheqID,"Petty cash","menubar=yes,toolbar=no,width=600,height=550,location=yes,resizable=yes,scrollbars=yes,status=yes");

            }

        });


    },

    openPaymentList: function(button) {
        var paymentList=Ext.create('CarePortal.view.PaymentsList', {});


        var listWindow=Ext.create('Ext.window.Window', {
            title: 'Payments List',
            resizable:false,
            height:700,width:1000
        });



        listWindow.add(paymentList);
        listWindow.show();
    },

    deleteNotes: function(component, eOpts) {
            component.getEl().on('click', function() {
                 Ext.Msg.alert('Thank you!',component.up('panel').up('panel').getItemId());

                });
    },

    openAdmissionHistory: function(component, eOpts) {
        component.getEl().on('click', function() {
            var pid=component.up('panel').up('panel').down('#pid').getValue();
            var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();
             window.open('reports/patientAdmissionHistory.php?pid='+pid+'&enc='+encNr,
                         "Patient Admission History","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");

         });
    },

    clearNotes: function(field, newValue, oldValue, eOpts) {
        field.up('form').down('#notes').setValue("");
    },

    deleteNote: function(view, rowIndex, colIndex, item, e, record, row) {
        //Ext.Msg.alert('Test',record.get('NotesType'));
        view.getStore().remove(record);
         Ext.Ajax.request({
             url: 'data/getDataFunctions.php?task=deleteRecord',
             params: {
                 ID:record.get("Nr"),
                 tableName:'care_encounter_notes',
                 idColumn:'nr',
                 batch_nr:record.get("Nr")
             },
             success: function(response){
                 var resp = Ext.JSON.decode(response.responseText);
                 //Ext.Msg.alert("Selected Column","Removed record with partcode "+record.get('PartCode'));

                 //this.getNotes(encounterNo);

             },
             failure: function (form, action) {
                 var jsonResp = Ext.decode(action.response.responseText);

                 Ext.Msg.alert('Failed', 'There was a problem with the Request. \n Error=' + jsonResp.error);
             },
             scope:this
         });
    },

    printCreditSlip: function(button) {
        var pid=button.up('grid').down("#txtPid").getValue();
        window.open('reports/creditslipnew.php?pid='+pid, "Cridit Slips","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");


    },

    getPatientNames: function(field, newValue, oldValue, eOpts) {
        //Ext.Msg.alert('Test',newValue);
        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=getPatientNames',
            params: {
                pid:newValue
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);
                names=resp[0].names;
                field.up('grid').down("#txtNames").setValue(names);

            },
            failure:function(response){
                var resp = JSON.parse(response);
                Ext.Msg.alert('Error',resp.Error);
            },
            scope: this
        });

    },

    rePrintCreditSlip: function(button) {
        var slipNo=button.up('grid').down("#txtSlipNo").getValue();
        var pid=button.up('grid').down("#txtPid").getValue();


        if(pid!==''){
         //   Ext.Msg.alert('Test',slipNo);
            window.open('reports/creditslipnew.php?pid='+pid+"&slipNo="+slipNo+"&reprint=REPRINT",
                        "Crid Sips","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");
        }else{
            Ext.Msg.alert('Error',"Please select a patient to Reprint Slip");
        }



    },

    populateSlip: function(gridpanel, record, item, index, e, eOpts) {
        //Ext.Msg.alert('Test',record.get('Pid'));
        gridpanel.up('grid').down("#txtPid").setValue(record.get('Pid'));
        gridpanel.up('grid').down("#txtNames").setValue(record.get('Names'));
        gridpanel.up('grid').down("#txtSlipNo").setValue(record.get('SlipNo'));


    },

    openAssignRoom: function(button) {

        var rec = button.lookupViewModel().get('record');
        //Ext.Msg.alert('Test',rec.get('Pid'));

        var assignRoom=Ext.create("CarePortal.view.AssignOpRoom",{});
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Assign Patient to Doctors Room",
            resizable:true,
            closable:true
        });

        assignRoom.down('#pid').setValue(rec.get('Pid'));
        assignRoom.down('#names').setValue(rec.get('Names'));
        assignRoom.down('#encounterNo').setValue(rec.get('EncounterNo'));
        assignRoom.down('#Dob').setValue(rec.get('DateOfBirth'));

        containterWindows.add(assignRoom);
        containterWindows.show();
    },

    assignRoom: function(button) {
        var pid=button.up('form').down('#pid').getValue();
        var names=button.up('form').down('#names').getValue();
        var encounterNo=button.up('form').down('#encounterNo').getValue();
        var dob=button.up('form').down('#Dob').getValue();
        var roomNo=button.up('form').down('#roomNo').getValue();
        var attendingDoctor=button.up('form').down('#attendingDoctor').getValue();
        var priority=button.up('form').down('#priority').getValue();

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=asignOpRoom',
            params: {
                pid:pid,
                name:names,
                encounterNo:encounterNo,
                dob:dob,
                roomNo:roomNo,
                attendingDoctor:attendingDoctor,
                priority:priority
            },
            success: function(response){
                var resp = Ext.JSON.decode(response.responseText);

                var roomsStore=Ext.data.StoreManager.lookup("AssignedRoomsStore");
                roomsStore.load({});

            },
            failure:function(response){
                var resp = JSON.parse(response);
                Ext.Msg.alert('Error',resp.Error);
            },
            scope: this
        });

    },

    loadPatientDetails: function(gridpanel, record, item, index, e, eOpts) {
         var presStore=Ext.data.StoreManager.lookup("PrescriptionStore");
        presStore.load({
            params: {
                encNo:record.get("Encounter_Nr")
            }
        });

         var vitalsStore=Ext.data.StoreManager.lookup("VitalsStore");

        vitalsStore.load({
            params: {
                encNr:record.get("Encounter_Nr")
            }
        });

         var notesStore =Ext.data.StoreManager.lookup('NoteTypesStore');
         notesStore.load({
             params: {
                 encNr:record.get("Encounter_Nr")
             },
         });

        var serviceStore=Ext.data.StoreManager.lookup("ProceduresAndServices");
        serviceStore.load({
            params:{
                pid:record.get('Pid'),
                encNr:record.get('Encounter_Nr')
            },
            scope: this
        });

        var diagnosisStore=Ext.data.StoreManager.lookup("DiagnosisStore");
        diagnosisStore.load({
            params:{
                pid:record.get('Pid'),
                encNr:record.get('Encounter_Nr')
            },
            scope: this
        });
    },

    onRadiologyChange: function(field, newValue, oldValue, eOpts) {
        var v = field.getValue();
                var record = field.findRecord(field.valueField || field.displayField, v);
                //Ext.Msg.alert('Test',record.get('Price'));

                field.up('form').down('#Price').setValue(record.get('Price'));
               // field.up('form').down('#Qty').setValue(1);
    },

    changeEncounterClass: function(field, newValue, oldValue, eOpts) {
        //Ext.Msg.alert('test',field.up('grid').getItemId());
        var source=field.up('grid').getItemId();

        if(source=='pendingBills'){
            var encClass=Ext.data.StoreManager.lookup("PendingPatientBills");

            encClass.load({
                params: {
                    class:newValue
                },
                callback: function(records, operation, success) {
                },
                scope: this
            });
        }else if(source=='prescGrid'){
            var encClass=Ext.data.StoreManager.lookup("PendingPrescription");
             encClass.load({
                params: {
                    class:newValue
                },
                callback: function(records, operation, success) {
                },
                scope: this
            });
        }


    },

    openMenuForm: function(button) {
        var menuForm=Ext.create("CarePortal.view.MenusForm",{});
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Menus Form",
            resizable:true,
            closable:true
        });

        containterWindows.add(menuForm);
        containterWindows.show();
    },

    saveMenuGroup: function(button) {
          var form = button.up('panel').getForm(); // get the basic form
        if (form.isValid()) { // make sure the form contains valid data before submitting
            form.submit({
                params:{
                    GroupID:button.up('form').down('#groupID').getRawValue()
                },
                success: function (form, action) {
                    Ext.Msg.alert('Thank you!', 'Saved MCH Request Successfully.');
                    //button.up('form').getForm().reset();
                   // button.up('window').close();
                },
                failure: function (form, action) {
                    var jsonResp = Ext.decode(action.response.responseText);

                    Ext.Msg.alert('Failed', 'There was a problem with the Request. \n Error=' + jsonResp.error);
                }
            });
        } else { // display error alert if the data is invalid
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');
        }
    },

    loadAppointments: function(datepicker, date, eOpts) {
        var appointmentsPanel=this.getAppointments().down("#appointmentsPanel");
        appointmentsPanel.removeAll();

        var apptsStore=Ext.data.StoreManager.lookup("AppointmentsStore");
        var me = this;

        apptsStore.load({
            params: {
                apptDate:date
            },
            callback: function(records, operation, success) {
                //Ext.Msg.alert('Test',records.length);
                var failure=records.length;
                if(failure>0){
                        var tpl=new Ext.XTemplate(
                        '<Table id=notes>',
                        '<tr><td colspan=5 class=titles>Scheduled Appointments</td></tr>',
                        '<tr><td class=titles>Date/Time/Details</td>',
                        '<td class=titles>Patient</td>',
                        '<td class=titles>Appointments</td>',
                        '<td class=titles>Status</td>',
                        '<td class=titles>Actions</td></>',
                        '<tpl for=".">',
                        '<tr><td>{date}</td><td>{names}</td><td>{purpose}</td><td>{urgency}</td><td><button class="button apptButton1" onclick="this.editAppt()">Edit</button></td></tr>',
                        '<tr><td>{time}</td><td>{date_birth}</td><td></td><td>{appt_status}</td><td><button class="button apptButton1">Admit</button></td></tr>',
                        '<tr><td>{to_dept_nr}</td><td>{sex}</td><td></td><td></td><td><button class="button apptButton1">Cancel Appt</button></td></tr>',
                        '<tr><td colspan=5></ hr></td></tr>',
                        '</tpl>',
                        '</table>',
                        {
                            editAppt: function(){
                                Ext.Msg.alert('Test','Test test');
                                me.getMain().editAppointment();
                            }
                        }
                    );

                    var data = [];

                    apptsStore.each(function(record) {
                        data.push(record.getData());
                    });

                    //var data1=notesStore.proxy.reader.rawData;
                    tpl.overwrite(appointmentsPanel.body,data);
                }else{
                     var tpl2=new Ext.XTemplate(
                      '<Table id=notes>',
                        '<tr><td colspan=5 class=titles></br></br></br>There are no Scheduled Appointments on this Date</td></tr></table>');
                      tpl2.overwrite(appointmentsPanel.body,"data");
                }

            },
            scope: this
        });
    },

    editAppointment: function(button) {
        Ext.Msg.alert('Test','Test');
    },

    openAppoinmentsWindow: function(button) {
        var apptsForm=Ext.create("CarePortal.view.AppointmentsForm",{});
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Schedule new Appointment",
            resizable:true,
            closable:true
        });

        var strSource=button.up('grid').getItemId();

        if(strSource==='patientInfo'){
            var selectedKeys=this.getPatientinfo().getView().getSelectionModel().getSelection();
            //Ext.Msg.alert('Test',selectedKeys.length);
            if(selectedKeys.length>0){
                 Ext.each(selectedKeys, function (record) {
                    apptsForm.down('#pid').setValue(record.get('Pid'));
                    apptsForm.down('#names').setValue(record.get('FirstName')+" "+record.get('LastName')+" "+record.get('SurName'));
                    //apptsForm.down('#encounterNo').setValue(record.get('EncounterNo'));
                    apptsForm.down('#Dob').setValue(record.get('DateOfBirth'));
                });
                containterWindows.add(apptsForm);
                containterWindows.show();
            }else{
                Ext.Msg.alert('Patient Select Error',"Please Select a Patient to Schedule Appointment");
            }



        }else{
            var selectedKeys=this.getOutpatientlist().getView().getSelectionModel().getSelection();
            if(selectedKeys.length>0){
                Ext.each(selectedKeys, function (record) {
                    apptsForm.down('#pid').setValue(record.get('Pid'));
                    apptsForm.down('#names').setValue(record.get('Names'));
                    apptsForm.down('#encounterNo').setValue(record.get('EncounterNo'));
                    apptsForm.down('#Dob').setValue(record.get('DateOfBirth'));
                });
                 containterWindows.add(apptsForm);
                containterWindows.show();
            }else{
                  Ext.Msg.alert('Patient Select Error',"Please Select a Patient to Schedule Appointment");
            }

        }


    },

    openPaymentCheque: function(button) {

    },

    openCheque: function(button) {
        var cheqID = '';
        var voucherNo='';
        var selectedKeys=button.up('grid').getView().getSelectionModel().getSelection();

        var result = '';
        var ID = '';
        Ext.each(selectedKeys, function (record) {

            result =record.get('Ledger');

            ID = selectedKeys;
            if(ID.length>1){
                cheqID += record.get('ID') + ',';
               // Ext.Msg.alert('Test',cheqID);
                voucherNo+=record.get('Voucher_No');
            }else{
                cheqID = record.get('ID');
                voucherNo=record.get('Voucher_No');
            }

        });

        window.open('reports/paymentCheques.php?cheqID='+cheqID,
                                    "Cheque","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    filterGls: function(field,newValue,oldValue,eOpts) {
         var grid = field.up('grid');
                grid.store.clearFilter();
                if (newValue) {
                    var matcher = new RegExp(Ext.String.escapeRegex(newValue), "i");
                    grid.store.filter({
                        filterFn: function(item) {
                            return matcher.test(item.get('AccountName')) ||
                                matcher.test(item.get('AccountCode'));
                        }
                    });
                }
    },

    openPatientHistory: function(button) {
        var pid=button.up('panel').down('#pid').getValue();
        var encNr=button.up('panel').down('#encounterNr').getValue();
        window.open('reports/patientAdmissionHistory.php?pid='+pid+'&enc='+encNr,
                    "Patient Admission History","menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes");

    },

    transferWard: function(gridpanel, record, item, index, e, options) {
        var encNo=gridpanel.up('grid').up('form').down('#encounterNo').getValue();
        var wrdNo=gridpanel.up('grid').up('form').down('#wardno').getValue();
        var rm=gridpanel.up('grid').up('form').down('#roomno').getValue();
        var bd=gridpanel.up('grid').up('form').down('#bedno').getValue();

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=transferWardBed',
            waitMsg: 'wait while we assign a bed ...',
            params:{
                encNr:encNo,
                wrdNo:record.get("Nr"),
                roomNo:rm,
                bed:bd,
                mode:"transferward"
            },
            success: function(response){
                var text = response.responseText;

                // Ext.Msg.alert('Success','Successfully Assigned Bed to '+this.getAssignbeds().down('#encNo').getValue());
               // gridpanel.up('window').close();

                var occupancyStore=Ext.data.StoreManager.lookup("OccupancyStore");
                occupancyStore.load({
                    params:{
                        wardId:wrdNo
                    }
                });

                var waitingStore=Ext.data.StoreManager.lookup("WaitingListStore");
                waitingStore.load({
                    params: {
                        wardNo:wrdNo
                    }
                });



            },
            failure:function(response){
                // var resp = JSON.parseJSON(response);
                Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
            },
            scope: this
        });
    },

    openTransferClinic: function(view, rowIndex, colIndex, item, e, record, row) {
        // var rec = button.lookupViewModel().get('record');
        encounterNo=record.get('EncounterNo');
        pid=record.get('Pid');
        names=record.get('Names');
        dob=record.get('Dob');

        var clinics=Ext.create("CarePortal.view.ClinicsList",{});
        clinics.down('#encounterNo').setValue(encounterNo);
        clinics.down('#pid').setValue(pid);
        clinics.down('#names').setValue(names);
        clinics.down('#Dob').setValue(dob);
        // clinics.down('#sourcePanel').setValue('transfer');
        var containterWindows=Ext.create('Ext.window.Window', {
            title:"Transfer Patient",
            resizable:false,
            closable:true
        });

        containterWindows.add(clinics);
        containterWindows.show();
    },

    transferClinic: function(view, rowIndex, colIndex, item, e, record, row) {
        Ext.Msg.alert('Success','Clinic No '+record.get('Nr'));

        var encNo=view.up('grid').down('#encounterNo').getValue();
        var clinicNo=record.get('Nr');
        var consultation='';

        Ext.Ajax.request({
            url: 'data/getDataFunctions.php?task=transferDept',
            waitMsg: 'wait while we transfer Patient...',
            params:{
                encNr:encNo,
                clinicNo:clinicNo,
                consultation:consultation
            },
            success: function(response){
                var text = response.responseText;

                // Ext.Msg.alert('Success','Successfully Assigned Bed to '+this.getAssignbeds().down('#encNo').getValue());
                view.up('window').close();

                var opadmissionsStore=Ext.data.StoreManager.lookup("OPAdmissionsStore");
                opadmissionsStore.load({});
            },
            failure:function(response){
                // var resp = JSON.parseJSON(response);
                Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');
            },
            scope: this
        });
    }

});
