{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "inpatient",
        "designer|userClassName": "Inpatient",
        "models": [
            "DebitDetails",
            "BillNumbers",
            "InsuranceCompanies",
            "NhifRates",
            "ClinicalRooms",
            "WardInfo",
            "ItemsList",
            "EncounterDetails",
            "OccupancyList",
            "ReceiptModel",
            "Wards",
            "Vitals",
            "BillModel",
            "AdmissionTypes",
            "Admissions"
        ],
        "stores": [
            "ReceiptStore",
            "BillNumbersStore",
            "EncounterNosStore",
            "VitalsStore",
            "Invoices",
            "EncounterDetailStore",
            "DebitStore",
            "InsuranceCompaniesStore",
            "ItemsListStore",
            "OccupancyStore",
            "PendingBills",
            "AdmissionsStore",
            "NhifRatesStore",
            "NhifClaimStore",
            "WardsListStore"
        ],
        "views": [
            "Discharge",
            "ItemsList",
            "WaitingList",
            "VitalsForm",
            "WardOccupancy",
            "Credit",
            "InvoicePanel",
            "InvoicesList",
            "Debit",
            "FinaliseInvoice",
            "InsuranceCredit",
            "MenuDiagram",
            "IpNotes",
            "Admissions",
            "PatientChart",
            "NhifCreditForm",
            "UpdateDates"
        ]
    },
    "configAlternates": {
        "designer|userAlias": "string",
        "designer|userClassName": "string",
        "models": "typedarray",
        "stores": "typedarray",
        "views": "typedarray"
    },
    "name": "MyController",
    "designerId": "4cab404e-47e8-400c-8e41-c2801091454e",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "this.control({",
                    "    '#cmdItemsList':{",
                    "        click:this.getItemsList",
                    "    },",
                    "    '#itemsList':{",
                    "        itemdblclick:this.addSelectedItem3",
                    "    },",
                    "    '#cmdAddRow':{",
                    "        click:this.addRow",
                    "    },",
                    "    '#cmdSaveDebits':{",
                    "        click:this.saveDebits",
                    "    },",
                    "    '#txtPid':{",
                    "        blur:this.getEncounter",
                    "    },",
                    "    '#cmdSearchBills':{",
                    "        click:this.searchBills",
                    "    },",
                    "    '#cmdCombineBills':{",
                    "        click:this.combineBills",
                    "    },",
                    "    '#txtSearch':{",
                    "        specialkey:this.getPressedKey",
                    "    },",
                    "    '#cmdUpdateBill':{",
                    "        click:this.updateBillChanges",
                    "    },",
                    "    '#deleteItem':{",
                    "        click:this.deleteBillItem",
                    "    },",
                    "    'bills actioncolumn[id=deletebill2]':{",
                    "        click:this.deleteBillItem",
                    "    },",
                    "    '#cmdPreviewInterim':{",
                    "        click:this.previewInterimInvoice",
                    "    },",
                    "    '#txtSearchInterim':{",
                    "        blur:this.getBillNumbers",
                    "    },",
                    "    '#cmdDeleteSelected':{",
                    "        click:this.removeSelectedItems",
                    "    },",
                    "    '#cmdDeleteReceipts':{",
                    "        click:this.removeSelectedReceipts",
                    "    },",
                    "    '#cmdUpdateReceipts':{",
                    "        click:this.updateReceipts",
                    "    },",
                    "    '#txtPid2':{",
                    "        blur:this.getEncounterDetails",
                    "    },",
                    "    '#creditAmount':{",
                    "        blur:this.getBalance",
                    "    },",
                    "    '#cmdSaveInsuranceCredit':{",
                    "        click:this.saveInsuranceCredit",
                    "    },",
                    "    '#cmdSearchReceipt':{",
                    "        click:this.searchReceipt",
                    "    },",
                    "    '#txtPid3':{",
                    "        blur:this.getEncounterDetails2",
                    "    },",
                    "    '#nhifClientType':{",
                    "        change:this.getNhifRates",
                    "    },",
                    "    '#cmdSaveNhif':{",
                    "        click:this.saveNifCredit",
                    "    },",
                    "    '#cmdDeleteRow':{",
                    "        click:this.deleteRow",
                    "    },",
                    "    '#SaveVitals':{",
                    "        click:this.saveVitals",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openVitals]':{",
                    "        click:this.openVitals",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openNotes]':{",
                    "        click:this.openNotes",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openChart]':{",
                    "        click:this.openChart",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openVitalsChart]':{",
                    "        click:this.openVitalsChart",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openPrescription]':{",
                    "        click:this.openPrescription",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openLab]':{",
                    "        click:this.openLab",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openServices]':{",
                    "        click:this.openServices",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openDiagnosis]':{",
                    "        click:this.openDiagnosis",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=openXray]':{",
                    "        click:this.openXray",
                    "    },",
                    "    '#cmdSearchItems':{",
                    "        click:this.searchItems",
                    "    },",
                    "    '#searchParam':{",
                    "        specialkey:this.getPressedKey",
                    "    },",
                    "    '#cmdClose':{",
                    "        click:this.closewindow",
                    "    },",
                    "    'wardoccupancy actioncolumn[id=discharge]':{",
                    "        click:this.openDischargeForm",
                    "    },",
                    "    'wardoccupancy actioncolumn[itemId=transfer]':{",
                    "        click:this.openTransferWindow",
                    "    },",
                    "    '#saveDischarge':{",
                    "        click:this.discharge",
                    "    },",
                    "    '#cmdSaveNotes':{",
                    "        click:this.saveNotes",
                    "    },",
                    "    '#notesGrid':{",
                    "        itemclick:this.loadNotes",
                    "    },",
                    "    '#cmdSearchAdmissions':{",
                    "        click:this.openSearchWindow",
                    "    },",
                    "    '#txtSearchParam':{",
                    "        change:this.filterPatients",
                    "    },",
                    "    '#cmdDoctorsNotes':{",
                    "        click:this.openDoctorsNotes",
                    "    },",
                    "    '#cmdNursesNotes':{",
                    "        click:this.openNursingNotes",
                    "    },",
                    "    '#Occupancy':{",
                    "        click:this.openIpReports",
                    "    },",
                    "    '#IpMobidity':{",
                    "        click:this.openIpReports",
                    "    },",
                    "    '#Admissions':{",
                    "        click:this.openIpReports,",
                    "        itemdblclick:this.setPatientNames",
                    "    },",
                    "    '#Discharges':{",
                    "        click:this.openIpReports",
                    "    },",
                    "    '#NhifCredits':{",
                    "        click:this.openIpReports",
                    "    },",
                    "    '#DoctorsWorkload':{",
                    "        click:this.openIpReports",
                    "    },",
                    "    '#InvoicesList':{",
                    "        click:this.openIpReports",
                    "    },",
                    "    '#cmdPreviewIpReports':{",
                    "        click:this.loadIpReports",
                    "    },",
                    "    'discharges button#cmdDischargeSummary':{",
                    "        click:this.openDischargeSummary",
                    "    },",
                    "    'discharges button#cmdDischargeNotes':{",
                    "        click:this.openNursesNotes",
                    "    },",
                    "    '#cmdUpdateDates':{",
                    "        click:this.openUpdateDates",
                    "    },",
                    "    '#cmdSaveDates':{",
                    "        click:this.saveAdmDisDates",
                    "    },",
                    "    '#transferWard':{",
                    "        change:this.showWards",
                    "    },",
                    "    '#wardsList':{",
                    "        change:this.showWards",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "init",
            "designerId": "cc010cfe-5e3a-4a3b-9cb6-2fc7def96103"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debit",
                "selector": "debit",
                "xtype": "debit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debit",
            "designerId": "7cd703b2-981e-48e2-b3b6-57767c2d438e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "credit",
                "selector": "credit",
                "xtype": "credit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "credit",
            "designerId": "eca311ae-98e0-4a33-b6d4-40da0625f140"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "bills",
                "selector": "bills",
                "xtype": "bills"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "bills",
            "designerId": "6d86d6f5-08c3-4d93-864a-3f0a3a8059d3"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chargebeds",
                "selector": "chargebeds",
                "xtype": "chargebeds"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "chargebeds",
            "designerId": "5c6ece90-5a31-4981-a5d2-7f2016a966dc"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "itemslist",
                "selector": "itemslist",
                "xtype": "itemslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "itemslist",
            "designerId": "61e96cb9-caab-41a9-a593-4fe95b040e64"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "nhifcredit",
                "selector": "nhifcredit",
                "xtype": "nhifcredit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "nhifcredit",
            "designerId": "b8ab940c-fce5-420d-95f1-5247d755a392"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "finaliseinvoice",
                "selector": "finaliseinvoice",
                "xtype": "finaliseinvoice"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "finaliseinvoice",
            "designerId": "38476239-1a94-45a8-bb9a-b553056a53c3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "getItemsList",
                "implHandler": [
                    "var itemsList=Ext.create('CarePortal.view.ItemsList', {});",
                    "var itemsListWindow=Ext.create('Ext.window.Window', {",
                    "            title: 'Items List',",
                    "            resizable:true,",
                    "            minWidth:300,",
                    "            minHeight:300",
                    "        });",
                    "",
                    "itemsListWindow.add(itemsList);",
                    "itemsListWindow.show();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getItemsList",
            "designerId": "3021c130-5a6e-4dcf-9f1c-46e85929bf97"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "options"
                ],
                "fn": "addSelectedItem3",
                "implHandler": [
                    "var store =Ext.data.StoreManager.lookup('ItemsListStore');",
                    "var store1 =Ext.data.StoreManager.lookup('DebitStore');",
                    "store.remove(record);",
                    "store1.add(record); "
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addSelectedItem3",
            "designerId": "da9acaa1-da8c-4d31-ad30-6d83566ea016"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "addRow",
                "implHandler": [
                    " var invoice_item = new Inpatient.model.ItemsList({",
                    "     PartCode: 'wes',",
                    "     Description: 'sds',",
                    "     Category: 'sds',",
                    "     Price:'12'",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addRow",
            "designerId": "d0f61130-5501-462b-bae9-177359caac41"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveDebits",
                "implHandler": [
                    "var form=button.up('form');",
                    "",
                    "var debitStore =Ext.data.StoreManager.lookup('DebitStore');",
                    "var debitRecord = debitStore.getRange();",
                    "",
                    "var pid=this.getDebit().down('#txtPid').getValue();",
                    "var debitDate=this.getDebit().down('#debitDate').getValue();",
                    "var debitno=this.getDebit().down('#debitNo').getValue();",
                    "var billNumber=this.getDebit().down('#billNumber').getValue();",
                    "var encounterNo=this.getDebit().down('#encounterNo').getValue();",
                    "",
                    "",
                    "var gridData = Array();",
                    "",
                    "Ext.each(debitRecord, function (record) {",
                    "    gridData.push(record.data);",
                    "});",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=saveDebit',",
                    "    params: {",
                    "        pid:pid,",
                    "        debitDate:debitDate,",
                    "        debitNo:debitno,",
                    "        billNumber:billNumber,",
                    "        encounterNo:encounterNo,",
                    "        gridData: Ext.util.JSON.encode(gridData)",
                    "    },success: function(response){",
                    "          //var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "          Ext.Msg.alert(\"Debits\",\"Debit Saved Successfully\");",
                    "          form.reset();",
                    "          debitStore.load({});",
                    "    },",
                    "    scope:this",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveDebits",
            "designerId": "d2dbaa2b-a7fa-4775-9db5-1479e16caea4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textfield, The, eOpts"
                ],
                "fn": "getEncounter",
                "implHandler": [
                    "var pid=textfield.up('form').down('#txtPid').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "     url: 'data/getDataFunctions.php?task=getEncounter',",
                    "    params: {",
                    "        pid: pid",
                    "    },",
                    "    success: function(response){",
                    "",
                    "        var encDetails= Ext.decode(response.responseText);",
                    "",
                    "         pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "       //  Ext.ComponentQuery.query(\"#pname\")[0].setValue(pnames);",
                    "        textfield.up('form').down('#pname').setValue(pnames);",
                    "        textfield.up('form').down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "        textfield.up('form').down('#encounterNo').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "",
                    "        this.getDebitNo();",
                    "    },",
                    "    scope:this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getEncounter",
            "designerId": "e4f70130-c0f0-45aa-a15c-09fb0a459c52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchBills",
                "implHandler": [
                    "var searchParam=this.getBills().down('#txtSearch').getValue();",
                    "var billNo=this.getBills().down('#cmbBill1').getValue();",
                    "var billStore =Ext.data.StoreManager.lookup('BillStore');",
                    "billStore.load({",
                    "    params: {",
                    "        pid: searchParam,",
                    "        bill_number:billNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    "var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "            billStore2.load({",
                    "                params: {",
                    "                    pid: searchParam",
                    "                },",
                    "                callback: function(records, operation, success) {",
                    "",
                    "                },",
                    "                scope: this",
                    "",
                    "            });",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchBills",
            "designerId": "593bbb57-348e-4421-95ba-a5b239515e75"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "combineBills",
                "implHandler": [
                    "var pid=this.getBills().down('#txtSearch').getValue();",
                    "var bill1=this.getBills().down('#cmbBill1').getValue();",
                    "var bill2=this.getBills().down('#cmbBill2').getValue();",
                    "var enc1=this.getBills().down('#cmbEnc1').getValue();",
                    "var enc2=this.getBills().down('#cmbEnc2').getValue();",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Merge Bills?',",
                    "    message: 'Are you sure you want to MERGE the two Bills?',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(btn) {",
                    "        if (btn === 'yes') {",
                    "            Ext.Ajax.request({",
                    "                    url: 'data/getDataFunctions.php?task=combineBills',",
                    "                    params: {",
                    "                        pid:pid,",
                    "                        bill1:bill1,",
                    "                        bill2:bill2,",
                    "                        enc1:enc1,",
                    "                        enc2:enc2,",
                    "                    }",
                    "                });",
                    "        } else if (btn === 'no') {",
                    "            console.log('No pressed');",
                    "        } else {",
                    "            console.log('Cancel pressed');",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "combineBills",
            "designerId": "7cc1471b-d3a6-46a3-a7b3-991ff441b6e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "options"
                ],
                "fn": "getPressedKey",
                "implHandler": [
                    "    if (e.getKey() == e.ENTER && field.getItemId()==='txtSearch') {",
                    "     //   Ext.Msg.alert('Test',field.getItemId());",
                    "       this.searchBills();",
                    "    }else  if (e.getKey() == e.ENTER && field.getItemId()==='searchParam') {",
                    "     //   Ext.Msg.alert('Test',field.getItemId());",
                    "        this.searchItems();",
                    "    }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPressedKey",
            "designerId": "8eba8e99-09bc-4cf8-8abb-92560d286e5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "updateBillChanges",
                "implHandler": [
                    "var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "",
                    "var updatedRecords = this.getBills().getStore().getUpdatedRecords();",
                    "params=[];",
                    "Ext.each(updatedRecords,function(record){",
                    " params.push(record.data);",
                    "});",
                    "",
                    "",
                    "billStore.proxy.extraParams = {",
                    "    selectedCount:params.length,",
                    "    pid:this.getBills().down('#txtSearch').getValue()",
                    "};",
                    "",
                    "billStore.sync({",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Update','Successfully updated Bill');",
                    "        var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "        billStore.load({});",
                    "",
                    "    },",
                    "    failure:function(response){",
                    "        var resp = JSON.parse(response.responseText);",
                    "        Ext.Msg.alert('Error','Error Updating Bill');",
                    "",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateBillChanges",
            "designerId": "0b150751-6472-47ce-815c-34ce220ae82f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "deleteBillItem",
                "implHandler": [
                    "// var rec = button.up('grid').getViewModel().get('record');",
                    "// Ext.Msg.alert(\"Button clicked\", \"Hey! \" + record.get('ID'));",
                    "var ID=record.get('ID');",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Delete Bill Item?',",
                    "    msg: 'Are you sure you want to delete',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(rec) {",
                    "        if (rec === \"yes\") {",
                    "            Ext.Ajax.request({",
                    "                url: 'data/getDataFunctions.php?task=deleteBillItem',",
                    "                params: {",
                    "                    ID:record.get('ID'),",
                    "                    pid:record.get('Pid')",
                    "                },",
                    "                waitMsg: 'Deleting Item ...',",
                    "                success: function(response){",
                    "                    var resp = Ext.JSON.decode(response.responseText);",
                    "                    Ext.Msg.alert('Delete',resp.Error);",
                    "                    var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "                    billStore.load({});",
                    "",
                    "                },",
                    "                failure:function(response){",
                    "                    var resp = JSON.parse(response);",
                    "                    Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                    //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');",
                    "                }",
                    "            });",
                    "",
                    "        }",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteBillItem",
            "designerId": "37060ad4-7cd1-42b2-ae1d-6874b37ff290"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewInterimInvoice",
                "implHandler": [
                    "//reportswindow=Ext.create('Inpatient.view.InvoiceDetails', {});",
                    "var invoiceDetails=this.getInteriminvoice().down('#invoiceDetails');",
                    "",
                    "var pid=this.getInteriminvoice().down('#txtSearchInterim').getValue();",
                    "var billNumber=this.getInteriminvoice().down('#cmbBillNumbers').getValue();",
                    "",
                    "var billStore=Ext.data.StoreManager.lookup(\"Invoices\");",
                    "",
                    "billStore.load({",
                    "    params: {",
                    "        pid:pid,",
                    "        bill_number:billNumber",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    "var billSum=0;",
                    "var data = [];",
                    "",
                    "billStore.each(function(record){",
                    "  //  console.log(record);",
                    "    data.push(record.getData());",
                    "    billSum += record.get('Total');",
                    "});",
                    "",
                    " //var data1= billStore.proxy.reader.transform;",
                    "",
                    " var tpl=new Ext.XTemplate(",
                    "                '<Table id=billDetails>',",
                    "                '<tr><th>Date</th><th>Service Description</th><th>Ref No</th><th>Price</th><th>Qty</th><th>Total</th></tr>',",
                    "                '<tpl for=\".\">',",
                    "                    '<tr><td>{Bill_Date}</td>',",
                    "                    '<td>{Description}</td>',",
                    "                    '<td>{ID}</td>',",
                    "                    '<td align=right>{Price}</td>',",
                    "                    '<td>{Qty}</td>',",
                    "                    '<td align=right>{Total}</td></tr>',",
                    "                '</tpl>',",
                    "                '<tr><td colspan=2 class=totals>Totals</td><td class=totals></td><td class=totals> 0</td><td>{[this.getBillTotal() ]}</td></tr>',",
                    "                '</table>',",
                    "              {",
                    "                getBillTotal:function(){",
                    "                    return billSum.toFixed(2);",
                    "                }",
                    "              }",
                    " );",
                    "",
                    "",
                    "tpl.overwrite(invoiceDetails.body,data);",
                    "",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewInterimInvoice",
            "designerId": "392b4c1e-a7f3-48bc-9a97-405e16688e01"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "interiminvoice",
                "selector": "interiminvoice",
                "xtype": "interiminvoice"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "interiminvoice",
            "designerId": "8465c644-fe81-42b0-88cf-c8ef02826f02"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoicedetails",
                "selector": "invoicedetails",
                "xtype": "invoicedetails"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoicedetails",
            "designerId": "9026370a-4b2e-4e53-b690-ffd092de9baf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid,admType"
                ],
                "fn": "getBillNumbers",
                "implHandler": [
                    "",
                    "//var searchParam=this.getBills().down('#txtSearch').getValue();",
                    "var billStore2 =Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "billStore2.load({",
                    "    params: {",
                    "        pid: pid,",
                    "        admType:admType",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBillNumbers",
            "designerId": "23b27acf-b96d-4849-8da0-e6199d9dc149"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "removeSelectedItems",
                "implHandler": [
                    "var grid=button.up('grid');",
                    "",
                    "var srecords=grid.getSelectionModel().getSelection();",
                    "",
                    "var selectedRowIndexes = [];",
                    "var pids='';",
                    "",
                    "Ext.iterate(srecords,function(record,index){",
                    "",
                    "    selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "",
                    "    if(grid.getSelectionModel().hasSelection()){",
                    "        pids=pids+record.get('ID')+\",\";",
                    "        Ext.Msg.show({",
                    "            title:'Delete Bill Items?',",
                    "            msg: 'Are you sure you want to delete',",
                    "            buttons: Ext.Msg.YESNOCANCEL,",
                    "            icon: Ext.Msg.QUESTION,",
                    "            fn: function(rec) {",
                    "                if (rec === \"yes\") {",
                    "                    Ext.Ajax.request({",
                    "                        url: 'data/getDataFunctions.php?task=deleteBillItem',",
                    "                        params: {",
                    "                            ID:pids,",
                    "                            pid:record.get('Pid')",
                    "                        },",
                    "                        waitMsg: 'Deleting Item ...',",
                    "                        success: function(response){",
                    "                            var resp = Ext.JSON.decode(response.responseText);",
                    "                            Ext.Msg.alert('Delete',resp.Error);",
                    "                            var billStore=Ext.data.StoreManager.lookup('BillStore');",
                    "                            billStore.load({});",
                    "",
                    "                        },",
                    "                        failure:function(response){",
                    "                            var resp = JSON.parse(response);",
                    "                            Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                            //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');",
                    "                        }",
                    "                    });",
                    "",
                    "                }",
                    "            }",
                    "        });",
                    "",
                    "    }else{",
                    "         Ext.Msg.alert('Test','You have not Selected any Item to Remove');",
                    "    }",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "removeSelectedItems",
            "designerId": "f839ae77-17eb-41eb-9f54-345cfad578bb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "removeSelectedReceipts",
                "implHandler": [
                    " var grid=button.up('grid');",
                    "",
                    "        var srecords=grid.getSelectionModel().getSelection();",
                    "",
                    "        var selectedRowIndexes = [];",
                    "        var pids='';",
                    "",
                    "        Ext.iterate(srecords,function(record,index){",
                    "",
                    "            selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "",
                    "            if(grid.getSelectionModel().hasSelection()){",
                    "                pids=pids+record.get('Sale_ID')+\",\";",
                    "                Ext.Msg.show({",
                    "                    title:'Delete Receipt Items?',",
                    "                    msg: 'Are you sure you want to delete',",
                    "                    buttons: Ext.Msg.YESNOCANCEL,",
                    "                    icon: Ext.Msg.QUESTION,",
                    "                    fn: function(rec) {",
                    "                        if (rec === \"yes\") {",
                    "                            Ext.Ajax.request({",
                    "                                url: 'data/getDataFunctions.php?task=deleteReceiptItem',",
                    "                                params: {",
                    "                                    ID:pids,",
                    "                                    pid:record.get('Pid')",
                    "                                },",
                    "                                waitMsg: 'Deleting Receipt ...',",
                    "                                success: function(response){",
                    "                                    var resp = Ext.JSON.decode(response.responseText);",
                    "                                    Ext.Msg.alert('Delete',resp.Error);",
                    "                                    var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');",
                    "                                    receiptStore.load({});",
                    "",
                    "                                },",
                    "                                failure:function(response){",
                    "                                    var resp = JSON.parse(response);",
                    "                                    Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                                    //                     Ext.Msg.alert('Error','There was a problem deleting the Part Locations, Contact System Administrator');",
                    "                                }",
                    "                            });",
                    "",
                    "                        }",
                    "                    }",
                    "                });",
                    "",
                    "            }else{",
                    "                 Ext.Msg.alert('Test','You have not Selected any Item to Remove');",
                    "            }",
                    "",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "removeSelectedReceipts",
            "designerId": "cc53f415-99fb-41b3-b8ce-f7dbd0feae52"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "updateReceipts",
                "implHandler": [
                    "",
                    "",
                    "var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');",
                    "",
                    "var updatedRecords = this.getReceipts().getStore().getUpdatedRecords();",
                    "params=[];",
                    "Ext.each(updatedRecords,function(record){",
                    " params.push(record.data);",
                    "});",
                    "",
                    "",
                    "receiptStore.proxy.extraParams = {",
                    "    selectedCount:params.length,",
                    "    pid:this.getReceipts().down('#txtSearchReceipt').getValue()",
                    "};",
                    "",
                    "Ext.Msg.alert('Update','Successfully updated Receipt');",
                    "",
                    "receiptStore.sync({",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Update','Successfully updated Receipt');",
                    "        var receiptStore=Ext.data.StoreManager.lookup('ReceiptStore');",
                    "        receiptStore.load({});",
                    "",
                    "    },",
                    "    failure:function(response){",
                    "        var resp = JSON.parse(response.responseText);",
                    "        Ext.Msg.alert('Error','Error Updating Receipt');",
                    "",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateReceipts",
            "designerId": "e6bd7911-c2db-493d-b542-d0f98210c7d7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "receipts",
                "selector": "receipts",
                "xtype": "receipts"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "receipts",
            "designerId": "e2966337-b6e1-47fd-b52a-907a542b910c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField",
                    "the",
                    "eOpts"
                ],
                "fn": "getEncounterDetails",
                "implHandler": [
                    "//Ext.Msg.alert('current Form',textField.getValue());",
                    "",
                    "",
                    "var pid=textField.getValue();",
                    "// var pnames='as';",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=getEncounter',",
                    "    params: {",
                    "        pid: pid",
                    "    },",
                    "    success: function(response){",
                    "        var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "        pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "",
                    "        this.getInsurancecredit().down('#pname').setValue(pnames);",
                    "        this.getInsurancecredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);",
                    "        this.getInsurancecredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);",
                    "        this.getInsurancecredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);",
                    "        this.getInsurancecredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);",
                    "        this.getInsurancecredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "        this.getInsurancecredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "",
                    "        var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "        billnumberStore.load({",
                    "            params:{",
                    "                pid:pid",
                    "            }",
                    "        });",
                    "",
                    "        this.generateCreditNo();",
                    "        this.getBillAmount(pid,encDetails.encounterNr[0].BillNumber);",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getEncounterDetails",
            "designerId": "0abffc48-c134-4904-8318-d3f585cfd22b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "insurancecredit",
                "selector": "insurancecredit",
                "xtype": "insurancecredit"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "insurancecredit",
            "designerId": "75cbae59-934b-4ab5-852a-8bb357c3fe73"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateCreditNo",
                "implHandler": [
                    " // var pnames='as';",
                    "        Ext.Ajax.request({",
                    "            url: 'data/getDataFunctions.php?task=getCreditNo',",
                    "            success: function(response){",
                    "                 var respText= Ext.util.JSON.decode(response.responseText);",
                    "                 if(respText.credits[0].creditNo==1){",
                    "                     creditNo=1001;",
                    "                 }else{",
                    "                     creditNo=respText.credits[0].creditNo;",
                    "                 }",
                    "",
                    "                this.getInsurancecredit().down('#creditNo').setValue(creditNo);",
                    "",
                    "            },",
                    "            scope: this",
                    "        });"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "generateCreditNo",
            "designerId": "a2250a2b-1a69-4862-afe2-49eeed9c3c70"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid",
                    "billNumber"
                ],
                "fn": "getBillAmount",
                "implHandler": [
                    "var pid=this.getInsurancecredit().down('#txtPid2').getValue();",
                    "var billNumber=this.getInsurancecredit().down('#billNumber').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "     url: 'data/getDataFunctions.php?task=getTotalBill',",
                    "     params:{",
                    "         pid:pid,",
                    "         bill_number:billNumber",
                    "     },",
                    "     success: function(response){",
                    "         var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "         this.getInsurancecredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);",
                    "",
                    "     },",
                    "     scope: this",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBillAmount",
            "designerId": "6b20febd-2689-4e12-a26d-935199b88d7a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField,the,eOpts"
                ],
                "fn": "getBalance",
                "implHandler": [
                    "     var invoiceAmount=this.getInsurancecredit().down('#invoiceAmount').getValue();",
                    "     var creditAmount=textField.getValue();",
                    "     var balance=parseInt(invoiceAmount-creditAmount);",
                    "",
                    "     this.getInsurancecredit().down('#balance').setValue(balance);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBalance",
            "designerId": "99195472-1e40-4309-8ffe-a3b00ba7fc96"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveInsuranceCredit",
                "implHandler": [
                    "var form = button.up('form'); // get the form panel",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', action.result.msg);",
                    "",
                    "            form.reset();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed',  action.result.msg);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveInsuranceCredit",
            "designerId": "379c92c3-c492-461a-88c0-6b5a2b726a2a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchReceipt",
                "implHandler": [
                    "var searchParam=this.getReceipts().down('#txtSearchReceipt').getValue();",
                    "",
                    "var receiptStore =Ext.data.StoreManager.lookup('ReceiptStore');",
                    "receiptStore.load({",
                    "    params: {",
                    "        pid: searchParam",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchReceipt",
            "designerId": "b9c5543b-e237-43b6-b456-c78955f41761"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "textField",
                    "the",
                    "eOpts"
                ],
                "fn": "getEncounterDetails2",
                "implHandler": [
                    "        var pid=textField.getValue();",
                    "        // var pnames='as';",
                    "        Ext.Ajax.request({",
                    "            url: 'data/getDataFunctions.php?task=getEncounter',",
                    "            params: {",
                    "                pid: pid",
                    "            },",
                    "            success: function(response){",
                    "                var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "                pnames=encDetails.encounterNr[0].FirstName+\" \"+encDetails.encounterNr[0].LastName+\" \"+encDetails.encounterNr[0].SurName;",
                    "",
                    "                this.getNhifcredit().down('#pname').setValue(pnames);",
                    "                this.getNhifcredit().down('#admissionDate').setValue(encDetails.encounterNr[0].AdmissionDate);",
                    "                this.getNhifcredit().down('#dischargeDate').setValue(encDetails.encounterNr[0].DischargeDate);",
                    "                this.getNhifcredit().down('#releaseDate').setValue(encDetails.encounterNr[0].ReleaseDate);",
                    "                this.getNhifcredit().down('#days').setValue(encDetails.encounterNr[0].BedDays);",
                    "                this.getNhifcredit().down('#encounterNr').setValue(encDetails.encounterNr[0].EncounterNr);",
                    "                this.getNhifcredit().down('#billNumber').setValue(encDetails.encounterNr[0].BillNumber);",
                    "                this.getNhifcredit().down('#ward').setValue(encDetails.encounterNr[0].Ward);",
                    "",
                    "                var billnumberStore=Ext.data.StoreManager.lookup('BillNumbersStore');",
                    "                billnumberStore.load({",
                    "                    params:{",
                    "                        pid:pid",
                    "                    }",
                    "                });",
                    "",
                    "               this.generateNhifCreditNo();",
                    "               this.getBillAmount2(pid,encDetails.encounterNr[0].BillNumber);",
                    "",
                    "            },",
                    "            scope: this",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getEncounterDetails2",
            "designerId": "a8a49990-3934-4005-9a15-ceaefd097292"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "generateNhifCreditNo",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=getNhifCreditNo',",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "        if(respText.credits[0].creditNo==1){",
                    "            creditNo=1001;",
                    "        }else{",
                    "            creditNo=respText.credits[0].creditNo;",
                    "        }",
                    "",
                    "        this.getNhifcredit().down('#creditNo').setValue(creditNo);",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "generateNhifCreditNo",
            "designerId": "438ec9e1-fabb-448c-9057-f7e254790af0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid",
                    "billNumber"
                ],
                "fn": "getBillAmount2",
                "implHandler": [
                    "var pid=this.getNhifcredit().down('#txtPid3').getValue();",
                    "var billNumber=this.getNhifcredit().down('#billNumber').getValue();",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=getTotalBill',",
                    "    params:{",
                    "        pid:pid,",
                    "        bill_number:billNumber",
                    "    },",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "        this.getNhifcredit().down('#invoiceAmount').setValue(respText.invoiceAmount[0].amount);",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getBillAmount2",
            "designerId": "0e755513-965f-43f3-8743-80bb90a0de5e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comboField",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "getNhifRates",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=getNhifRates',",
                    "    params:{",
                    "        rate:newValue",
                    "    },",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "",
                    "        var rateCalc=respText.nhifRates[0].rateCalc;",
                    "        this.getNhifcredit().down('#creditPerDay').setValue(respText.nhifRates[0].RateValue);",
                    "        this.getNhifcredit().down('#rateCalc').setValue(rateCalc);",
                    "",
                    "        var rateValue;",
                    "        if(rateCalc==1){",
                    "            rateValue=respText.nhifRates[0].RateValue;",
                    "",
                    "        }else{",
                    "            var days=this.getNhifcredit().down('#days').getValue();",
                    "            var rates=respText.nhifRates[0].RateValue;",
                    "            rateValue=parseInt(rates * days);",
                    "        }",
                    "         this.getNhifcredit().down('#creditAmount').setValue(rateValue);",
                    "",
                    "        var invoiceAmount= this.getNhifcredit().down('#invoiceAmount').getValue();",
                    "",
                    "        var balance=parseInt(invoiceAmount-rateValue);",
                    "        this.getNhifcredit().down('#balance').setValue(balance);",
                    "",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getNhifRates",
            "designerId": "9d14fa57-50d8-4f17-877c-1718339335f3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveNifCredit",
                "implHandler": [
                    "var form = button.up('form'); // get the form panel",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', action.result.msg);",
                    "",
                    "            form.reset();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed',  action.result.msg);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveNifCredit",
            "designerId": "df4cab09-618d-487f-a3a3-94718aeef777"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "deleteRow",
                "implHandler": [
                    "var itemsGrid=button.up('form').down('#itemsGrid');",
                    "itemToDelete=itemsGrid.getView().getSelectionModel().getSelection();",
                    "itemsStore=Ext.data.StoreManager.lookup('DebitStore');",
                    "",
                    "itemsStore.remove(itemToDelete);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "deleteRow",
            "designerId": "81605b4f-d89d-43bd-b1a9-430d08895c8b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getDebitNo",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: 'data/getInpatientFunctions.php?task=getDebitNo',",
                    "",
                    "    success: function(response){",
                    "        var respText= Ext.util.JSON.decode(response.responseText);",
                    "        var debitNo=respText.debits[0].debitNo;",
                    "",
                    "        this.getDebit().down('#debitNo').setValue(debitNo);",
                    "",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDebitNo",
            "designerId": "e0a3d943-8091-4d3a-b23e-2fccaa12ca01"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveVitals",
                "implHandler": [
                    "//Ext.Msg.alert('Test',button.getItemId());",
                    "var encNo=button.up('form').down('#encounterNo').getValue();",
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "            if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "                form.submit({",
                    "                    params:{",
                    "                       pid:button.up('form').down('#pid').getValue(),",
                    "                       encounterNo:encNo,",
                    "                    },",
                    "                    success: function (form, action) {",
                    "                        Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');",
                    "                        button.up('form').getForm().reset();",
                    "                        button.up('window').hide();",
                    "",
                    "                        var vitalsStore=Ext.data.StoreManager.lookup(\"VitalsStore\");",
                    "                        vitalsStore.load({});",
                    "",
                    "                        this.getController('Main').getStatusLogs(encNo);",
                    "",
                    "                    },",
                    "                    failure: function (form, action) {",
                    "                        var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                        Ext.Msg.alert('Failed', 'Could not save Vitals. \\n Error=' + jsonResp.error);",
                    "                    }",
                    "                });",
                    "            } else { // display error alert if the data is invalid",
                    "                Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "            }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveVitals",
            "designerId": "ecc51503-75dc-4421-b93e-80d2cf2764e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "openVitals",
                "implHandler": [
                    "var vitals=Ext.create('CarePortal.view.VitalsForm', {});",
                    "var vitalsWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients Vitals',",
                    "    resizable:false",
                    "});",
                    "",
                    "vitals.down('#pid').setValue(record.get('PID'));",
                    "vitals.down('#names').setValue(record.get('Names'));",
                    "vitals.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "vitals.down('#Dob').setValue(record.get('BirthDate'));",
                    "",
                    "vitalsWindow.add(vitals);",
                    "vitalsWindow.show();",
                    "",
                    "var vitalsStore=Ext.data.StoreManager.lookup(\"VitalsStore\");",
                    "vitalsStore.load({",
                    "    params:{",
                    "        pid:record.get('PID'),",
                    "        encNr:record.get('EncounterNo')",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openVitals",
            "designerId": "c9a081c0-02f7-45ef-87c6-15ac5fcb584c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "openNotes",
                "implHandler": [
                    "var notes=Ext.create('CarePortal.view.IpNotes', {});",
                    "var notesWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients Notes',",
                    "    resizable:false",
                    "});",
                    "",
                    "notes.down('#pid').setValue(record.get('PID'));",
                    "notes.down('#names').setValue(record.get('Names'));",
                    "notes.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "notes.down('#dob').setValue(record.get('BirthDate'));",
                    "notes.down('#sex').setValue(record.get('Sex'));",
                    "notes.down('#paymode').setValue(record.get('PaymentMode'));",
                    "notes.down('#admissiondate').setValue(record.get('AdmissionDate'));",
                    "notes.down('#wardno').setValue(record.get('WardID'));",
                    "notes.down('#roomno').setValue(record.get('RoomNo'));",
                    "notes.down('#bedno').setValue(record.get('BedNo'));",
                    "",
                    "notesWindow.add(notes);",
                    "notesWindow.show();",
                    "",
                    "var notesStore=Ext.data.StoreManager.lookup(\"NotesStore\");",
                    "notesStore.load({",
                    "    params:{",
                    "        pid:record.get('PID'),",
                    "        encNr:record.get('EncounterNo'),",
                    "        locationNr:record.get('WardID')",
                    "    },",
                    "    scope: this",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNotes",
            "designerId": "43b7e061-f7d8-4c96-b039-651f99d6ea37"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "vitals",
                "selector": "vitals",
                "xtype": "vitals"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "vitals",
            "designerId": "1ee3fd4a-9651-481a-8638-85212240458e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchItems",
                "implHandler": [
                    " var searchParam=button.up('grid').down('#txtSearchItemlocs').getValue();",
                    "",
                    "        var itemsListStore =Ext.data.StoreManager.lookup('ItemsListStore');",
                    "        itemsListStore.load({",
                    "            params: {",
                    "                searchParam: searchParam",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "",
                    "            },",
                    "            scope: this",
                    "",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchItems",
            "designerId": "f83aa60a-1359-4109-a1f3-78b0cf18c296"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "closewindow",
                "implHandler": [
                    "    button.up('window').close();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "closewindow",
            "designerId": "9fe10d3a-45af-4dfb-a26c-55dd087cbaaa"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openDischargeForm",
                "implHandler": [
                    "var discharge=Ext.create('CarePortal.view.Discharge', {});",
                    "var dischargeWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Discharge Patient',",
                    "    resizable:false",
                    "});",
                    "",
                    "var d=new Date();",
                    "",
                    "discharge.down('#pid').setValue(record.get('PID'));",
                    "discharge.down('#names').setValue(record.get('Names'));",
                    "discharge.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "discharge.down('#Dob').setValue(record.get('BirthDate'));",
                    "discharge.down('#dischargeDate').setValue(d);",
                    "discharge.down('#dischargeTime').setValue(d);",
                    "",
                    "dischargeWindow.add(discharge);",
                    "dischargeWindow.show();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDischargeForm",
            "designerId": "fc4cd2db-2d40-428d-a72b-49ef7de2c25d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "discharge",
                "implHandler": [
                    "Ext.Msg.alert('Test',button.getItemId());",
                    "",
                    "var form = button.up('form').getForm(); // get the basic form",
                    "",
                    "Ext.Msg.show({",
                    "    title:'Save Changes?',",
                    "    message: 'You are closing a tab that has unsaved changes. Do you want to save changes?',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(btn) {",
                    "        if (btn === 'yes') {",
                    "            console.log('Yes pressed');",
                    "        } else if (btn === 'no') {",
                    "            console.log('No pressed');",
                    "        } else {",
                    "            console.log('Cancel pressed');",
                    "        }",
                    "    }",
                    "});",
                    "",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    Ext.Msg.show({",
                    "    title:'Discharge Patient?',",
                    "    message: 'Are you sure you want to Discharge this Patient?',",
                    "    buttons: Ext.Msg.YESNOCANCEL,",
                    "    icon: Ext.Msg.QUESTION,",
                    "    fn: function(btn) {",
                    "        if (btn === 'yes') {",
                    "            form.submit({",
                    "                    success: function (form, action) {",
                    "                        Ext.Msg.alert('Thank you!', 'Patient Discharged Successfully.');",
                    "                        button.up('form').getForm().reset();",
                    "                        button.up('window').hide();",
                    "",
                    "                    },",
                    "                    failure: function (form, action) {",
                    "                        var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                        Ext.Msg.alert('Failed', 'Could not Discharge patient \\n Error=' + jsonResp.error);",
                    "                    }",
                    "                });",
                    "        } else if (btn === 'no') {",
                    "             button.up('form').getForm().reset();",
                    "             button.up('window').hide();",
                    "        } else {",
                    "            console.log('Cancel pressed');",
                    "        }",
                    "    }",
                    "});",
                    "                ",
                    "} else { // display error alert if the data is invalid",
                    "       Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "discharge",
            "designerId": "80167ac9-109b-42c9-ac30-a069b0ea22d6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoices",
                "selector": "invoices",
                "xtype": "invoices"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoices",
            "designerId": "0ccaabab-8ca5-4a06-81e5-d7be3fbda688"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "wardNo"
                ],
                "fn": "getWaitingList",
                "implHandler": [
                    "var waitingPanel=this.getWaitinglist();",
                    "",
                    "",
                    "var waitingStore=Ext.data.StoreManager.lookup(\"WaitingListStore\");",
                    "",
                    "waitingStore.load({",
                    "    params: {",
                    "        wardNo:wardNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=notes>',",
                    "                '<tr><td colspan=2 class=titles>Waiting List</td></tr>',",
                    "                        '<tr><td class=titles>Pid</td>',",
                    "                            '<td class=titles>Names</td>',",
                    "                            '<td class=titles>EncNo</td>',",
                    "                 '<tpl for=\".\">',",
                    "                        '<tr>',",
                    "                            '<td>{Pid}</td>',",
                    "                            '<td><div class=content>{Names}</div></td>',",
                    "                            '<td><div class=content>{EncounterNr}</div></td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        waitingStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(waitingPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getWaitingList",
            "designerId": "b85f52ef-992e-4068-a192-5ac9665d991c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "waitinglist",
                "selector": "waitinglist",
                "xtype": "waitinglist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "waitinglist",
            "designerId": "583e07b2-ac33-4f33-9484-871af3c703ad"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "vitalsform",
                "selector": "vitalsform",
                "xtype": "vitalsform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "vitalsform",
            "designerId": "103bac19-fc16-4ac4-8f6d-fe7d384b5ae8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "admissiondata",
                "selector": "admissiondata",
                "xtype": "admissiondata"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "admissiondata",
            "designerId": "0f2d4ed9-783f-4d69-8648-73802f1790b8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "wardoccupancy",
                "selector": "wardoccupancy",
                "xtype": "wardoccupancy"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "wardoccupancy",
            "designerId": "7d18e616-4d87-4a31-9229-f755e1bc0f82"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoiceslist",
                "selector": "invoiceslist",
                "xtype": "invoiceslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoiceslist",
            "designerId": "351d4735-2d35-421e-8926-b0a4f1748cea"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoicepanel",
                "selector": "invoicepanel",
                "xtype": "invoicepanel"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoicepanel",
            "designerId": "bafede4c-d7af-423b-9e34-f40ce27ee52a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view, rowIndex, colIndex, item, e, record, row"
                ],
                "fn": "openChart",
                "implHandler": [
                    "var diagram=Ext.create('CarePortal.view.MenuDiagram', {});",
                    "var patientInfo=Ext.create('CarePortal.view.PatientDetais', {});",
                    "var diagramWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Chart Folder',",
                    "    resizable:true,",
                    "    height : 600,",
                    "    width  : 350,",
                    "    items :[",
                    "        patientInfo,",
                    "        diagram",
                    "    ]",
                    "});",
                    "",
                    "vitals.down('#pid').setValue(record.get('PID'));",
                    "vitals.down('#names').setValue(record.get('Names'));",
                    "vitals.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "vitals.down('#Dob').setValue(record.get('BirthDate'));",
                    "",
                    "// diagramWindow.add(patientInfo,diagram);",
                    "diagramWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openChart",
            "designerId": "e9c80fa8-f9d0-48a5-ac93-5b2665c3074e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "menudiagram",
                "selector": "menudiagram",
                "xtype": "menudiagram"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "menudiagram",
            "designerId": "26b093d1-8b29-4408-922e-4282531b0d90"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "ipnotes",
                "selector": "ipnotes",
                "xtype": "ipnotes"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "ipnotes",
            "designerId": "e8dd6de1-60ca-475b-afb3-817c6e5a01c1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openPrescription",
                "implHandler": [
                    " var prescriptions=Ext.create('CarePortal.view.PrescriptionForm', {});",
                    "var prescriptionsWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients Prescriptions',",
                    "    resizable:false",
                    "});",
                    "",
                    "prescriptions.down('#pid').setValue(record.get('PID'));",
                    "prescriptions.down('#names').setValue(record.get('Names'));",
                    "prescriptions.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "prescriptions.down('#Dob').setValue(record.get('dateBirth'));",
                    "",
                    "prescriptionsWindow.add(prescriptions);",
                    "prescriptionsWindow.show();",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openPrescription",
            "designerId": "29d25d97-9c73-4b56-95f0-9bd90dec9518"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openLab",
                "implHandler": [
                    "var labtests=Ext.create('CarePortal.view.LabTests', {});",
                    "var labtestsWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients labtests',",
                    "    resizable:false",
                    "});",
                    "",
                    "labtests.down('#pid').setValue(record.get('PID'));",
                    "labtests.down('#names').setValue(record.get('Names'));",
                    "labtests.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "labtests.down('#Source').setValue(\"Inpatient\");",
                    "",
                    "labtestsWindow.add(labtests);",
                    "labtestsWindow.show();",
                    "",
                    "var pendingTests=Ext.data.StoreManager.lookup(\"PendingTestsStore\");",
                    "pendingTests.load({",
                    "    params: {",
                    "        labNo:record.get('LabNo'),",
                    "        encNr:record.get('EncounterNo')",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openLab",
            "designerId": "65545ad0-1655-4282-88bf-147b7c79e24b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openServices",
                "implHandler": [
                    "var Services=Ext.create('CarePortal.view.Services', {});",
                    "var ServicesWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients Services',",
                    "    resizable:false",
                    "});",
                    "",
                    "Services.down('#pid').setValue(record.get('PID'));",
                    "Services.down('#names').setValue(record.get('Names'));",
                    "Services.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "//Services.down('#PrescribeDate').setValue(new Date(\"d-m-Y\"));",
                    "",
                    "ServicesWindow.add(Services);",
                    "ServicesWindow.show();",
                    "",
                    "var serviceStore=Ext.data.StoreManager.lookup(\"ProceduresAndServices\");",
                    "serviceStore.load({",
                    "    params:{",
                    "        pid:record.get('PID'),",
                    "        encNr:record.get('EncounterNo')",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openServices",
            "designerId": "6eeea1a5-f30f-4afc-8ba2-271bbefa3685"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openXray",
                "implHandler": [
                    "var Services=Ext.create('CarePortal.view.Radiology', {});",
                    "var ServicesWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Radiology Services',",
                    "    resizable:false",
                    "});",
                    "",
                    "Services.down('#pid').setValue(record.get('PID'));",
                    "Services.down('#names').setValue(record.get('Names'));",
                    "Services.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "//Services.down('#PrescribeDate').setValue(new Date(\"d-m-Y\"));",
                    "",
                    "ServicesWindow.add(Services);",
                    "ServicesWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openXray",
            "designerId": "dab92c5b-8c1b-4f76-83ef-3d4491fd74f7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openDiagnosis",
                "implHandler": [
                    "var Services=Ext.create('CarePortal.view.Diagnosis', {});",
                    "var ServicesWindow=Ext.create('Ext.window.Window', {",
                    "    //title: 'Patients Services',",
                    "    resizable:false",
                    "});",
                    "",
                    "Services.down('#pid').setValue(record.get('PID'));",
                    "Services.down('#names').setValue(record.get('Names'));",
                    "Services.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "Services.setTitle(\"Inpatient Diagnosis\");",
                    "",
                    "//Services.down('#PrescribeDate').setValue(new Date(\"d-m-Y\"));",
                    "",
                    "var dob=record.get('BirthDate');",
                    "",
                    "ServicesWindow.add(Services);",
                    "ServicesWindow.show();",
                    "",
                    "var diagnosisStore=Ext.data.StoreManager.lookup(\"DiagnosisStore\");",
                    "diagnosisStore.load({",
                    "    params:{",
                    "        pid:record.get('PID'),",
                    "        encNr:record.get('Names')",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');",
                    "icd10Store.load({",
                    "    params:{",
                    "        dob:dob,",
                    "        diagType:'IP'",
                    "    }",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDiagnosis",
            "designerId": "d438cccb-ba30-4203-a262-8e87a3dea818"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveNotes",
                "implHandler": [
                    "var form = button.up('form').getForm(); // get the basic form",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "var locationNr=button.up('form').down('#wardno').getValue();",
                    "var pid=button.up('form').down('#pid').getValue();",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        params:{",
                    "            encounterNo:encounterNo,",
                    "            locationNr:locationNr",
                    "        },",
                    "        success: function (form, action) {",
                    "",
                    "            button.up('form').down('#notes').reset();",
                    "            //Ext.Msg.alert('Thank you!', 'The Notes has been saved Successfully.');",
                    "",
                    "            var notesStore=Ext.data.StoreManager.lookup(\"NotesStore\");",
                    "            notesStore.load({",
                    "                params:{",
                    "                    pid:pid,",
                    "                    encNr:encounterNo,",
                    "                    locationNr:locationNr",
                    "                },",
                    "                scope: this",
                    "            });",
                    "",
                    "",
                    "        },",
                    "        failure: function (form, action) {",
                    "            var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "            Ext.Msg.alert('Failed', 'Could not save Notes. \\n Error=' + jsonResp.error);",
                    "        },scope:this",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveNotes",
            "designerId": "9fb1684c-4b60-43ab-a444-d1b1df15e826"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "eOpts"
                ],
                "fn": "loadNotes",
                "implHandler": [
                    "gridpanel.up('form').down('#notes').setValue(record.get('Notes'));"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadNotes",
            "designerId": "a2cd8bbd-a4ae-4858-bbba-2130369eb8b0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openSearchWindow",
                "implHandler": [
                    "var admissionType=button.up('panel').down('#formStatus').getValue();",
                    "if(admissionType=='IP'){",
                    "    admType='1';",
                    "}else{",
                    "    admType='2';",
                    "}",
                    "var admissions=Ext.create('CarePortal.view.Admissions', {});",
                    "var admissionsWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Admissions List',",
                    "    srollable:'both',",
                    "    resizable:false,",
                    "});",
                    "",
                    "",
                    "var admStore =Ext.data.StoreManager.lookup('AdmissionsStore');",
                    "admStore.load({",
                    "    params: {",
                    "        admType: admType",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    "admissionsWindow.add(admissions);",
                    "admissionsWindow.show();",
                    "",
                    "admissions.down('#formStatus').setValue('Invoice');",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openSearchWindow",
            "designerId": "9061b3db-1448-4a87-8ce8-35b2a044a7b0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "filterPatients",
                "implHandler": [
                    " var grid = field.up('grid');",
                    "        grid.store.clearFilter();",
                    "        if (newValue) {",
                    "            var matcher = new RegExp(Ext.String.escapeRegex(newValue), \"i\");",
                    "            grid.store.filter({",
                    "                filterFn: function(item) {",
                    "                    return matcher.test(item.get('names')) ||",
                    "                        matcher.test(item.get('pid')) || matcher.test(item.get('phone'));",
                    "                }",
                    "            });",
                    "        }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "filterPatients",
            "designerId": "1531f5cb-d82c-41d1-9c53-cd6b30e92540"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "admissions",
                "selector": "admissions",
                "xtype": "admissions"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "admissions",
            "designerId": "f9caa22b-f4b8-4a83-890f-95c3b4195058"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "eOpt"
                ],
                "fn": "setPatientNames",
                "implHandler": [
                    "if(gridpanel.up('grid').down('#formStatus').getValue()==\"Invoice\"){",
                    "    this.getInvoicepanel().down(\"#txtInvoicePid\").setValue(record.get('pid'));",
                    "    this.getInvoicepanel().down(\"#txtPatientName\").setValue(record.get('names'));",
                    "    this.getInvoicepanel().down(\"#encNr\").setValue(record.get('encounter_nr'));",
                    "",
                    "    this.getBillNumbers(record.get('pid'),record.get('encounter_class_nr'));",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setPatientNames",
            "designerId": "7920a06c-a809-4015-a769-0b570e4c1864"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openDoctorsNotes",
                "implHandler": [
                    "var encNo=button.up('form').down(\"#encounterNo\").getValue();",
                    "var pid=button.up('form').down(\"#pid\").getValue();",
                    "",
                    "",
                    "",
                    "    //   Ext.Msg.alert('Test',slipNo);",
                    "    window.open('reports/patientContinuationCardex.php?pid='+pid+\"&enc=\"+encNo,",
                    "                \"Doctors Notes\",\"menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDoctorsNotes",
            "designerId": "b2a5423f-7f5b-42eb-ba40-1c673d255f70"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openNursingNotes",
                "implHandler": [
                    "var btnSource=button.up('panel').getItemId();",
                    "//Ext.Msg.alert('Test',btnSource);",
                    "var rec = button.lookupViewModel().get('record');",
                    "if(btnSource=='Discharges'){",
                    "    var enc=rec.get('encounter_nr');",
                    "    var pid=rec.get('pid');",
                    "}else{",
                    "    var enc=button.up('form').down(\"#encounterNo\").getValue();",
                    "    var pid=button.up('form').down(\"#pid\").getValue();",
                    "}",
                    "",
                    "",
                    "if(pid!==''){",
                    "    //   Ext.Msg.alert('Test',slipNo);",
                    "    window.open('reports/patientNursesCardex.php?pid='+pid+\"&enc=\"+enc,",
                    "                \"Nursing Cardex\",\"menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    "}else{",
                    "    Ext.Msg.alert('Error',\"Please select a patient to open notes\");",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNursingNotes",
            "designerId": "e71f42fa-4c50-4b0a-9ee2-8b3d1416c984"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openVitalsChart",
                "implHandler": [
                    "var pChart=Ext.create('CarePortal.view.PatientChart', {});",
                    "        var chartWindow=Ext.create('Ext.window.Window', {",
                    "            title: 'Patients Vitals Chart',",
                    "            resizable:true",
                    "        });",
                    "",
                    "        pChart.down('#pid').setValue(record.get('PID'));",
                    "        pChart.down('#names').setValue(record.get('Names'));",
                    "        pChart.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "        pChart.down('#dob').setValue(record.get('BirthDate'));",
                    "        pChart.down('#sex').setValue(record.get('Sex'));",
                    "        pChart.down('#paymode').setValue(record.get('PaymentMode'));",
                    "        pChart.down('#admissiondate').setValue(record.get('AdmissionDate'));",
                    "        pChart.down('#wardno').setValue(record.get('WardID'));",
                    "        pChart.down('#roomno').setValue(record.get('RoomNo'));",
                    "        pChart.down('#bedno').setValue(record.get('BedNo'));",
                    "",
                    "var vitalsStore=Ext.data.StoreManager.lookup(\"VitalsChartStore\");",
                    "vitalsStore.load({",
                    "    params:{",
                    "        pid:record.get('PID'),",
                    "        encNr:record.get('EncounterNo')",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "        chartWindow.add(pChart);",
                    "        chartWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openVitalsChart",
            "designerId": "589252a2-18e8-4894-bd85-db2ddeaea24d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "inpatientnotes",
                "selector": "inpatientnotes",
                "xtype": "inpatientnotes"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "inpatientnotes",
            "designerId": "9ebbda5a-38ae-4d66-bf89-cd2c9ae48731"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openIpReports",
                "implHandler": [
                    "var strReport=button.getItemId();",
                    "",
                    "shiftReport=Ext.create(\"CarePortal.view.\"+strReport,{});",
                    "centerContainer=button.up('panel').down(\"#IPReports\");",
                    "centerContainer.removeAll();",
                    "",
                    "centerContainer.add(shiftReport);",
                    "",
                    " button.up('panel').up('panel').setTitle(strReport);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openIpReports",
            "designerId": "98bbd30c-9c65-4b99-948b-e15d6f702bf7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "nhifcredits",
                "selector": "nhifcredits",
                "xtype": "nhifcredits"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "nhifcredits",
            "designerId": "5fbc45b0-786d-4da0-8a07-d33949cbf9d2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "loadIpReports",
                "implHandler": [
                    "//Ext.Msg.alert('Test',button.up('grid').getItemId());",
                    "var formSource=button.up('grid').getItemId();",
                    "if(formSource=='Discharges'){",
                    "     var receiptsStore =Ext.data.StoreManager.lookup('ReceiptStore');",
                    "        receiptsStore.load({",
                    "            params:{",
                    "                cashpoint:cashpoint,",
                    "                shiftNo:shiftNo",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "",
                    "        //         gridpanel.up('window').close();",
                    "            },",
                    "            scope: this",
                    "        });",
                    "}else if(formSource=='Discharges'){",
                    "    ",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadIpReports",
            "designerId": "24dff432-ba90-4358-9de6-ffbb86f21b7e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openDischargeSummary",
                "implHandler": [
                    "var rec = button.lookupViewModel().get('record');",
                    "var pid=rec.get('pid');",
                    "var enc=rec.get('encounter_nr');",
                    "",
                    "if(pid!==''){",
                    "    //   Ext.Msg.alert('Test',slipNo);",
                    "    window.open('reports/patientNursesCardex.php?pid='+pid+\"&enc=\"+enc,",
                    "                \"Nursing Cardex\",\"menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    "}else{",
                    "    Ext.Msg.alert('Error',\"Please select a patient to open Discharge Summary\");",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDischargeSummary",
            "designerId": "794d690c-7df6-4503-9bb0-c02e71076067"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openNursesNotes",
                "implHandler": [
                    "var rec = button.lookupViewModel().get('record');",
                    "var pid=rec.get('pid');",
                    "var enc=rec.get('encounter_nr');",
                    "",
                    "if(pid!==''){",
                    "    //   Ext.Msg.alert('Test',slipNo);",
                    "    window.open('reports/patientNursesCardex.php?pid='+pid+\"&enc=\"+enc,",
                    "                \"Nursing Cardex\",\"menubar=yes,toolbar=yes,width=400,height=400,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    "}else{",
                    "    Ext.Msg.alert('Error',\"Please select a patient to open Discharge Summary\");",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNursesNotes",
            "designerId": "71d03d6c-4882-4b9c-9c46-2388372ee142"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "updatedates",
                "selector": "updatedates",
                "xtype": "updatedates"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "updatedates",
            "designerId": "6c6ff1a6-cab0-4eb4-a2ae-b6dfa45cbeb1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openUpdateDates",
                "implHandler": [
                    "var datesForm=Ext.create('CarePortal.view.UpdateDates', {});",
                    "var datesWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Update Dates',",
                    "    resizable:false",
                    "});",
                    "",
                    "var pid=\"\";",
                    "var admType=\"\";",
                    "",
                    "var selectedKeys=this.getBills().getView().getSelectionModel().getSelection();",
                    "//Ext.Msg.alert('Test',selectedKeys.length);",
                    "if(selectedKeys.length>0){",
                    "    Ext.each(selectedKeys, function (record) {",
                    "        pid=record.get('Pid');",
                    "        admType=record.get('EncounterClass');",
                    "",
                    "        datesForm.down('#txtSearchInterim').setValue(pid);",
                    "        datesForm.down('#Name').setValue(record.get('Name'));",
                    "        //apptsForm.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "       // apptsForm.down('#Dob').setValue(record.get('DateOfBirth');",
                    "",
                    "    });",
                    "",
                    "}else{",
                    "    Ext.Msg.alert('Patient Select Error',\"Please Select a Patient to Schedule Appointment\");",
                    "}",
                    "",
                    " this.getBillNumbers(pid,admType);",
                    "",
                    "datesWindow.add(datesForm);",
                    "datesWindow.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openUpdateDates",
            "designerId": "0132b5b2-e38e-4619-ae69-ae96da099fe9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveAdmDisDates",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=updateAdmDis',",
                    "    params: {",
                    "        pid:button.up('form').down('#txtSearchInterim').getValue(),",
                    "        encounterNr:button.up('form').down('#encNr').getValue(),",
                    "        encounterClass:button.up('form').down('#encounterClass').getValue(),",
                    "        billNumber:button.up('form').down('#billNumber').getValue(),",
                    "        admDate:button.up('form').down('#admDate').getValue(),",
                    "        disDate:button.up('form').down('#disDate').getValue(),",
                    "",
                    "    },success: function(response){",
                    "        //var encDetails= Ext.util.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert(\"Admission Discharge Dates\",\"Update Saved Successfully\");",
                    "//         form.reset();",
                    "//         debitStore.load({});",
                    "    },",
                    "    scope:this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveAdmDisDates",
            "designerId": "90815e90-3c3c-4f55-9406-becf49b44237"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view",
                    "rowIndex",
                    "colIndex",
                    "item",
                    "e",
                    "record",
                    "row"
                ],
                "fn": "openTransferWindow",
                "implHandler": [
                    "var transfers=Ext.create('CarePortal.view.PatientTransfer', {});",
                    "var transferWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'Patients Transfer Form',",
                    "    resizable:false",
                    "});",
                    "",
                    "transfers.down('#pid').setValue(record.get('PID'));",
                    "transfers.down('#names').setValue(record.get('Names'));",
                    "transfers.down('#encounterNo').setValue(record.get('EncounterNo'));",
                    "transfers.down('#dob').setValue(record.get('BirthDate'));",
                    "transfers.down('#sex').setValue(record.get('Sex'));",
                    "transfers.down('#admissiondate').setValue(record.get('AdmissionDate'));",
                    "transfers.down('#paymode').setValue(record.get('PaymentMode'));",
                    "",
                    "var wardName=view.up('grid').down('#wardTitle').getValue();",
                    "transfers.down('#wardName').setValue(wardName);",
                    "transfers.down('#wardno').setValue(record.get('WardID'));",
                    "",
                    "transfers.down('#roomno').setValue(record.get('RoomNo'));",
                    "transfers.down('#bedno').setValue(record.get('BedNo'));",
                    "",
                    "transferWindow.add(transfers);",
                    "transferWindow.show();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openTransferWindow",
            "designerId": "e173309e-92e1-40f3-acf7-c796aec332e5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "showWards",
                "implHandler": [
                    "var transContainer=field.up('form').down('#transWindow');",
                    "var beds=Ext.create(\"CarePortal.view.AssignBeds\",{});",
                    "var wards=Ext.create(\"CarePortal.view.WardsList\",{});",
                    "var wrdNo=field.up('form').down('#wardno').getValue();",
                    "",
                    "if(field.getValue().transferWard=='Wards'){",
                    "    transContainer.removeAll();",
                    "    transContainer.add(wards);",
                    "",
                    "    var wardsListStore =Ext.data.StoreManager.lookup('WardsListStore');",
                    "    wardsListStore.load({",
                    "        params:{",
                    "            wrdNo:wrdNo",
                    "        },",
                    "        callback: function(records, operation, success) {",
                    "",
                    "            //         gridpanel.up('window').close();",
                    "        },",
                    "        scope: this",
                    "    });",
                    "",
                    "",
                    " }else if(field.getValue().transferWard=='Beds'){",
                    "    transContainer.removeAll();",
                    "    transContainer.add(beds);",
                    "    field.up('form').down('#wardsList').hide();",
                    "     beds.down('#transType').setValue(field.getValue().transferWard);",
                    "     beds.down('#wardID').setValue(wrdNo);",
                    "     beds.down('#pid').setValue(field.up('form').down('#pid').getValue());",
                    "     beds.down('#names').setValue(field.up('form').down('#names').getValue());",
                    "     beds.down('#encNo').setValue(field.up('form').down('#encounterNo').getValue());",
                    "",
                    "",
                    " }",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showWards",
            "designerId": "dfc4d963-4580-4203-8835-baae64eb731c"
        }
    ]
}