{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "DebtorsMain",
        "models": [
            "CustomerType",
            "DebtorJobs",
            "DebtorBalances"
        ],
        "stores": [
            "DebtorsList",
            "InvoicesList",
            "Allocations",
            "CustomerTrans",
            "MembersListStore",
            "DebtorBalancesStore"
        ],
        "views": [
            "DebtorsList",
            "ReceiptsList",
            "DebtorRegisterForm",
            "CustomerInfo",
            "DebtorMembers",
            "DebtorsManager",
            "DebtorAllocations",
            "DebtorAllocateReceipts",
            "NewMembersForm",
            "RemoveMembersForm"
        ]
    },
    "configAlternates": {
        "designer|userClassName": "string",
        "models": "typedarray",
        "stores": "typedarray",
        "views": "typedarray"
    },
    "name": "DebtorsMain",
    "designerId": "a844aa40-01b7-4199-80b1-21d9b1cb05c8",
    "cn": [
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "this.control({",
                    "    'debtorDetails button[id=refresh]': {",
                    "        click: this.refreshCustomerTrans",
                    "    },",
                    "    '#cmdSaveDebtor': {",
                    "        click: this.onRegisterSave",
                    "    },",
                    "    \"debtorDetails menuitem[id=debtorslist]\": {",
                    "        click: this.opendebtorslist",
                    "    },",
                    "    \"#mnuAllocateReceipts\": {",
                    "        click: this.openAllocateReceipts",
                    "    },",
                    "    \"debtorDetails menuitem[id=invoices]\": {",
                    "        click: this.openInvoicesList",
                    "    },",
                    "    \"debtorDetails menuitem[id=receipts]\": {",
                    "        click: this.openReceiptsList",
                    "    },",
                    "    \"debtordetailsgrid button[id=cmdPreview]\": {",
                    "        click: this.loadDebtorTrans",
                    "    },",
                    "    \"#cmdSaveMembers\": {",
                    "        click: this.onMembersSave",
                    "    },",
                    "    \"debtorDetails menuitem[id=customers]\": {",
                    "        click: this.openCustomersList",
                    "    },",
                    "    \"customerslist button[id=custFind]\": {",
                    "        click: this.findCustomer",
                    "    },",
                    "    \"#cmdNewCustomer1\": {",
                    "        click: this.createNewCustomer",
                    "    },",
                    "    \"#editCustomer\": {",
                    "        click: this.openNewCustomer2",
                    "    },",
                    "    \"#mnuDebtorsRegister\": {",
                    "        click: this.createNewCustomer",
                    "    },",
                    "    \"#mnuDebtorsList\":{",
                    "        click: this.opendebtorslist",
                    "    },",
                    "    \"#mnuDebtorMembers\":{",
                    "        click: this.openDebtorMembers",
                    "    },",
                    "    \"#mnuInvoices\":{",
                    "        click: this.openInvoicesList",
                    "    },",
                    "    \"#mnuReceipts\":{",
                    "        click: this.openReceiptsList",
                    "    },",
                    "    \"#mnuTransactions\":{",
                    "        click: this.openTransactions",
                    "    },",
                    "    \"#debtorslist\":{",
                    "        itemdblclick: this.openNewCustomer2",
                    "    },",
                    "    \"#debtorBalances\":{",
                    "        itemclick: this.getDebtorsInfo",
                    "    },",
                    "    \"customerinfo button[id=cmdNewCustomer]\":{",
                    "        click: this.createNewCustomer",
                    "    },",
                    "    \"customerinfo button[id=cmdEditCustomer]\":{",
                    "        click: this.getDebtorDetails",
                    "    },",
                    "    '#mnuStatement':{",
                    "        click: this.openStatement",
                    "    },",
                    "    '#printInvoices':{",
                    "        click: this.printInvoices",
                    "    },",
                    "    '#cmdNewCustomer':{",
                    "        click:this.createNewCustomer",
                    "    },",
                    "    '#cmdAddMembers':{",
                    "        click:this.addMembers",
                    "    },",
                    "    '#cmdPreviewTrans':{",
                    "        click:this.previewTransactions",
                    "    },",
                    "    '#cmdPreviewInvoices':{",
                    "        click:this.previewInvoices",
                    "    },",
                    "    '#cmdPreviewReceipts':{",
                    "        click:this.previewReceipts",
                    "    },",
                    "    '#allocateReceiptsGrid':{",
                    "        itemclick:this.getIndividualInvoices",
                    "    },",
                    "    '#allocateInvoicesGrid':{",
                    "        selectionchange:this.getInvoiceTotals",
                    "    },",
                    "    '#cmdAllocateReceipt':{",
                    "        click:this.allocateReceipts",
                    "    },",
                    "    '#cmdClose':{",
                    "        click:this.closeWindow",
                    "    },",
                    "    '#cmdAddMembers2':{",
                    "        click:this.addMembers",
                    "    },",
                    "    '#cmdCloseMembersform':{",
                    "        click:this.closeMembersForm",
                    "    },",
                    "    '#mdebtorslist':{",
                    "        itemclick:this.loadMembersList",
                    "    },",
                    "    '#cmdSearchDebtors':{",
                    "        click:this.searchDebtors",
                    "    },",
                    "    '#debtorCategory':{",
                    "        select:this.searchDebtors",
                    "    },",
                    "    '#cmdDebtorsSearch':{",
                    "        click:this.searchDebtorsList",
                    "    },",
                    "    '#mnuDebtorBalances':{",
                    "        click:this.openDebtorBalances",
                    "    },",
                    "    '#cmdSearchDebtorBalances':{",
                    "        click:this.searchDebtorBalances",
                    "    },",
                    "    '#debtorBalanceCategory':{",
                    "        select:this.searchDebtorBalances",
                    "    },",
                    "    '#cmdPrint':{",
                    "        click:this.printRegister",
                    "    },",
                    "    '#cmdNewCustomer2':{",
                    "        click:this.openNewCustomer3",
                    "    },",
                    "    '#cbCategory':{",
                    "        select:this.onComboboxChange",
                    "    },",
                    "    '#txtSearchParam':{",
                    "        change:this.searchDebtorTrans",
                    "    },",
                    "    '#mnuExportToExcel':{",
                    "        click:this.exportStatementToExcel",
                    "    },",
                    "    '#cmdDiagnosisReport':{",
                    "        click:this.openDiagnosisReport",
                    "    },",
                    "    '#cmdRemoveMember':{",
                    "        click:this.openRemoveMember",
                    "    },",
                    "    '#cmdRemoveMember2':{",
                    "        click:this.openRemoveMember",
                    "    },",
                    "    '#cmdRemoveMembers':{",
                    "        click:this.removeMembers",
                    "    },",
                    "    '#mnuGuarantorsForm':{",
                    "        click:this.openGuarantorsForm",
                    "    },",
                    "    '#cmdPrintGuarantors':{",
                    "        click:this.printGarantorsForm",
                    "    },",
                    "    '#cmdSaveGuarantors':{",
                    "        click:this.saveGuarantor",
                    "    },",
                    "    '#txtDebtorsParams':{",
                    "         specialkey:this.getPressedKey",
                    "    },",
                    "    '#txtDebtorsParams2':{",
                    "        specialkey:this.getPressedKey2",
                    "    },",
                    "    '#cmdSearch':{",
                    "        click:this.searchDebtorslist",
                    "    },",
                    "    '#mnuCredits':{",
                    "        click:this.openCredits",
                    "    },",
                    "    '#cmdSaveCredit':{",
                    "        click:this.saveCredits",
                    "    },",
                    "    '#mnuDebits':{",
                    "        click:this.openDebits",
                    "    },",
                    "    '#mnuAllocations':{",
                    "        click:this.openDebtorAllocations",
                    "    },",
                    "    '#cmdSearchInvoices':{",
                    "        click:this.searchInvoices",
                    "    },",
                    "    '#cmdAllocateReceipts':{",
                    "        click:this.openAllocationsWindow",
                    "    }",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "init",
            "designerId": "4758f3eb-ec36-4263-8daf-8185365ee17e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "showMain",
                "implHandler": [
                    "mainGrid=Ext.create(\"CarePortal.view.DebtorDetails\",{});",
                    "westContainer=this.getViewport().down(\"container[region=west]\");",
                    "westContainer.add(mainGrid);",
                    "",
                    "customerInfo=Ext.create(\"CarePortal.view.CustomerInfo\",{});",
                    "centerContainer=this.getViewport().down(\"container[region=center]\");",
                    "centerContainer.add(customerInfo);",
                    "",
                    "",
                    "//westContainer=this.getViewport().down(\"container[region=center]\");",
                    "//westContainer.add(infoGrid);",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showMain",
            "designerId": "bc8231c1-c4b9-494d-ae5d-5149670468af"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "viewport",
                "selector": "viewport"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string"
            },
            "name": "viewport",
            "designerId": "b7a69bea-29cd-4f9c-886b-6e95498da932"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "onDebtorDetailsLoad",
                "implHandler": [
                    "var debtorDetails=Ext.data.StoreManager.lookup('DebtorTransactions');\r",
                    "debtorDetails.load({\r",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "onDebtorDetailsLoad",
            "designerId": "e7e16b78-da79-4282-a39f-d435d501d6be"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel, record, item, index, e, options"
                ],
                "fn": "loadDebtorInfo",
                "implHandler": [
                    "\r",
                    "var debtorDetails=Ext.data.StoreManager.lookup('DebtorDetails');\r",
                    "debtorDetails.load({\r",
                    "    params: {\r",
                    "        accno: record.get('accno')\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "        var data1=this.getStore('DebtorDetails').getAt(0);\r",
                    "        customerinfo.loadRecord(record);\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "\r",
                    "});\r",
                    "\r",
                    "var DebtorTransactions=Ext.data.StoreManager.lookup('DebtorTransactions');\r",
                    "DebtorTransactions.load({\r",
                    "    params: {\r",
                    "        accno: record.get('accno')\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "\r",
                    "});\r",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadDebtorInfo",
            "designerId": "5f077e6a-4186-4d2f-abc3-114ae5d642dd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "customerbill",
                "selector": "customerbill",
                "xtype": "customerbill"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "customerbill",
            "designerId": "8749b555-cf95-4d34-9d63-7805de1ded93"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, options"
                ],
                "fn": "onRegisterSave",
                "implHandler": [
                    "//alert('test');",
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', 'Saved new debtor successfully.');",
                    "",
                    "            var win = button.up('debtorregister');",
                    "            win.destroy();",
                    "            ",
                    "            var debtorsList=Ext.data.StoreManager.lookup('DebtorsList');",
                    "            debtorsList.load({});",
                    "",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed', 'Could not save debtor. Error='+action.result.errors.clientNo);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "onRegisterSave",
            "designerId": "5e0c398d-712b-4184-8101-9479b698b2e8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, option"
                ],
                "fn": "opendebtorslist",
                "implHandler": [
                    "//alert('test');",
                    "",
                    "",
                    "debtorsList = Ext.create('CarePortal.view.DebtorsList', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(debtorsList);",
                    "",
                    "",
                    "var debtorsListStore=Ext.data.StoreManager.lookup('DebtorsList');",
                    "debtorsListStore.load({});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "opendebtorslist",
            "designerId": "c417ec18-1094-4b7c-b4c6-ac17c0f79a47"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "refreshCustomerTrans",
                "implHandler": [
                    "var customerTransStore=Ext.data.StoreManager.lookup('CustomerTrans');\r",
                    "customerTransStore.load({\r",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "refreshCustomerTrans",
            "designerId": "9902b637-b4bd-4c4f-b416-4c09ad92f45d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openInvoicesList",
                "implHandler": [
                    "",
                    "//alert('test');",
                    "",
                    "invoicesList = Ext.create('CarePortal.view.InvoicesList', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(invoicesList);",
                    "",
                    "var strParam=this.getInvoiceslist().down('#txtInvoices').getValue();",
                    "var startDate=this.getInvoiceslist().down('#startDate').getValue();",
                    "var endDate=this.getInvoiceslist().down('#endDate').getValue();",
                    "var accno=this.getInvoiceslist().down('#accNo').getValue();",
                    "",
                    "var invoicesStore=Ext.data.StoreManager.lookup('InvoicesList');",
                    "invoicesStore.load({",
                    "    params: {",
                    "        rptType: 'invoices',",
                    "        accno:accno,",
                    "        irParam:strParam,",
                    "        startDate:startDate,",
                    "        endDate:endDate",
                    "",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openInvoicesList",
            "designerId": "91dc7299-35d9-4b9b-bb01-827e44ad0c8d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openReceiptsList",
                "implHandler": [
                    "//alert('test 2');",
                    "",
                    "receiptsList = Ext.create('CarePortal.view.ReceiptsList', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(receiptsList);",
                    "",
                    "",
                    "var receiptsStore=Ext.data.StoreManager.lookup('ReceiptsList');",
                    "",
                    "var strParam=this.getReceiptslist().down('#txtReceipts').getValue();",
                    "var startDate=this.getReceiptslist().down('#startDate').getValue();",
                    "var endDate=this.getReceiptslist().down('#endDate').getValue();",
                    "var accno=this.getReceiptslist().down('#accNo').getValue();",
                    "",
                    "receiptsStore.load({",
                    "    params: {",
                    "        rptType: 'receipts',",
                    "        accno:accno,",
                    "        irParam:strParam,",
                    "        startDate:startDate,",
                    "        endDate:endDate",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openReceiptsList",
            "designerId": "389d69d0-54f2-44a7-9b34-bfd903a2e1c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "tabpanel, record, item, index, e, options"
                ],
                "fn": "loadDebtorTrans",
                "implHandler": [
                    "var accountNo=Ext.getCmp('accountNo').getValue();\r",
                    "//alert('Test'+accountNo);\r",
                    "\r",
                    "\r",
                    "var strDate1=Ext.Date.format(new Date(Ext.getCmp('startDate').getValue()), 'Y-m-d');\r",
                    "var strDate2=Ext.Date.format(new Date(Ext.getCmp('endDate').getValue()), 'Y-m-d');\r",
                    "\r",
                    "var debtorTrans=Ext.data.StoreManager.lookup('DebtorTransactions');\r",
                    "debtorTrans.load({\r",
                    "    params: {\r",
                    "        accno: accountNo,//record.get('accno'),\r",
                    "        startDate:strDate1,\r",
                    "        endDate:strDate2\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "        // var data1=this.getStore('DebtorTransactions').getAt(0);\r",
                    "        //myform.loadRecord(data1);\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadDebtorTrans",
            "designerId": "74c736c2-717c-4076-bdb4-2c06eaf28196"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, options"
                ],
                "fn": "onMembersSave",
                "implHandler": [
                    "",
                    "var form = button.up('form').getForm(); // get the basic form",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', 'Saved new Member successfully.');",
                    "",
                    "            var win = button.up('window');",
                    "            win.removeAll();",
                    "            win.destroy();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed', 'Could not save Member. Error='+action.result.errors.clientNo);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "onMembersSave",
            "designerId": "704aa8bb-c098-415f-adc4-cded244c1243"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openCustomersList",
                "implHandler": [
                    "",
                    "//alert('test');",
                    "",
                    "customersList = Ext.create('CarePortal.view.CustomersList', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(customersList);",
                    "",
                    "",
                    "var customersList=Ext.data.StoreManager.lookup('CustomersList');",
                    "customersList.load({",
                    "    param:{",
                    "        start:0,",
                    "        limit:100",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openCustomersList",
            "designerId": "ab62c38a-255f-4100-91e4-dab242effb89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openAllocations",
                "implHandler": [
                    "",
                    "allocations = Ext.create('CarePortal.view.Allocations', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(allocations);",
                    "",
                    "",
                    "var allocationsStore=Ext.data.StoreManager.lookup('Allocations');",
                    "allocationsStore.load({",
                    "    param:{",
                    "        start:0,",
                    "        limit:100",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openAllocations",
            "designerId": "7575d504-aa86-49a3-a641-8019d7557ead"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field,options"
                ],
                "fn": "findCustomer",
                "implHandler": [
                    "//alert('Test');\r",
                    "var pid=Ext.getCmp('txtParam').getValue();\r",
                    "var cutomerslist=Ext.data.StoreManager.lookup('CustomersList');\r",
                    "cutomerslist.load({\r",
                    "    params: {\r",
                    "        param1: pid\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "findCustomer",
            "designerId": "a70bfa96-9cd5-4985-9e8d-809d3027ad5f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "customerslist",
                "selector": "customerslist",
                "xtype": "customerslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "customerslist",
            "designerId": "fefb55ae-0dd1-4ff4-b666-a537519f1a80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openAllocateReceipts",
                "implHandler": [
                    "//var frmAllocaterctWindow=Ext.create('Ext.window.Window', {",
                    "// title: 'Allocate Receipts',",
                    "// resizable:false",
                    "//});",
                    "",
                    "var allocWindow=Ext.create('Ext.window.Window',{",
                    "    title: 'Allocate Receipts',",
                    "    resizable:false",
                    "});",
                    "var frmAllocaterct = Ext.create('CarePortal.view.AllocateReceipts', {});",
                    "",
                    "allocWindow.add(frmAllocaterct);",
                    "allocWindow.show();",
                    "",
                    "var allocatedReceipts=Ext.data.StoreManager.lookup('ReceiptsAllocateSt');",
                    "allocatedReceipts.load({});",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openAllocateReceipts",
            "designerId": "e9182aac-15fb-4127-bd56-ca5bb8153056"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorallocationsts",
                "selector": "debtorallocationss",
                "xtype": "debtorallocations"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorallocationsts",
            "designerId": "06c10e03-b9f5-468c-be1d-23c74a385b48"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "createNewCustomer",
                "implHandler": [
                    "registerform = Ext.create('CarePortal.view.DebtorRegisterForm', {});",
                    "        var registerformWindow=Ext.create('Ext.window.Window', {",
                    "            title: 'Debtors Register',",
                    "            resizable:false",
                    "        });",
                    "",
                    "        registerformWindow.add(registerform);",
                    "        registerformWindow.show();",
                    "",
                    "registerform.getForm().findField(\"formStatus\").setValue('insert');"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createNewCustomer",
            "designerId": "73d5535a-da74-41b8-895c-851fa888cd0d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "customerslist",
                "selector": "customerslist",
                "xtype": "customerslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "customerslist",
            "designerId": "4f0481cc-c56a-45d6-ba13-51402a6e1eff"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorslist",
                "selector": "debtorslist",
                "xtype": "debtorslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorslist",
            "designerId": "37bfed94-7f39-416a-8d28-65e6dbe2c02e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel, record, item, index, e, options"
                ],
                "fn": "openNewCustomer2",
                "implHandler": [
                    "",
                    "//var registerform=Ext.create('Debtors.view.DebtorRegisterForm', {});",
                    "",
                    "//center_container = this.getViewport().down('container[region=center]');",
                    "//center_container.removeAll(); //removing existing views.",
                    "//center_container.add(registerform);",
                    "",
                    "",
                    "//registerform.getForm().loadRecord(record);",
                    "",
                    "//registerform.query('textfield[name=\"formStatus\"]')[0].setValue('update');",
                    "",
                    "var registerform = Ext.create('CarePortal.view.DebtorRegisterForm', {});",
                    "var registerformWindow=Ext.create('Ext.window.Window', {",
                    "            title: 'Debtors Register',",
                    "            resizable:false",
                    "        });",
                    "",
                    "        registerformWindow.add(registerform);",
                    "        registerformWindow.show();",
                    "registerform.getForm().loadRecord(record);",
                    "",
                    "registerform.getForm().findField(\"formStatus\").setValue('update');",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNewCustomer2",
            "designerId": "c7bf9e16-eb38-408f-baf4-18b5fca5e0c6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openTransactions",
                "implHandler": [
                    "customerinfo=Ext.create(\"CarePortal.view.CustomerInfo\",{});",
                    "//infoGrid=Ext.create(\"Debtors.view.DebtorDetailsGrid\",{});",
                    "centerContainer=this.getViewport().down(\"container[region=center]\");",
                    "",
                    "centerContainer.removeAll(); //removing existing views.",
                    "",
                    "centerContainer.add(customerinfo);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openTransactions",
            "designerId": "9f3d301d-79ec-4d39-a644-ea9215e39737"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel, record, item, index, e, options"
                ],
                "fn": "getDebtorsInfo",
                "implHandler": [
                    "",
                    "// if(!Ext.ClassManager.isCreated('CarePortal.View.MyForm') && !Ext.ClassManager.isCreated('Debtors.View.DebtorDetailsGrid')){",
                    "//     this.openTransactions();",
                    "// }",
                    " customerinfo=this.getCustomerinfo();",
                    "",
                    "",
                    "var debtorDetails=Ext.data.StoreManager.lookup('DebtorDetailsStore');",
                    "debtorDetails.load({",
                    "    params: {",
                    "        accno: record.get('accno')",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        var data1=this.getStore('DebtorDetailsStore').getAt(0);",
                    "        customerinfo.loadRecord(data1);",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    "var accountNo=record.get('accno'); //Ext.getCmp('accountNo').getValue();",
                    "",
                    "",
                    "",
                    "//var strDate1=Ext.Date.format(new Date(this.getDebtordetailsgrid.down('#startDate').getValue()), 'Y-m-d');",
                    "//var strDate2=Ext.Date.format(new Date(this.getDebtordetailsgrid.down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "      //  alert('Test '+accountNo);",
                    "",
                    "var debtorTrans=Ext.data.StoreManager.lookup('DebtorTransactions');",
                    "debtorTrans.load({",
                    "    params: {",
                    "        accno:record.get('accno')//,",
                    "        //startDate:strDate1,",
                    "        //endDate:strDate2",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "        // var data1=this.getStore('DebtorTransactions').getAt(0);",
                    "        //myform.loadRecord(data1);",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDebtorsInfo",
            "designerId": "6b955583-8916-4af5-bc79-5fc763e47810"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorDetails",
                "selector": "debtorDetails",
                "xtype": "debtorDetails"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorDetails",
            "designerId": "00613568-e63f-47b0-a82c-a21c17b798ee"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "getDebtorDetails",
                "implHandler": [
                    "var debtorDetails=Ext.data.StoreManager.lookup('DebtorsList');",
                    "",
                    "",
                    "var accountNo=this.getCustomerinfo().down('#Accno').getValue();",
                    "//alert(accountNo);",
                    "debtorDetails.load({",
                    "    params: {",
                    "        accno:accountNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        var data1=this.getStore('DebtorsList').getAt(0);",
                    "        //  myform.loadRecord(data1);",
                    "",
                    "        var registerform=Ext.create('CarePortal.view.DebtorRegisterForm', {});",
                    "",
                    "        center_container = this.getViewport().down('container[region=center]');",
                    "        center_container.removeAll(); //removing existing views.",
                    "        center_container.add(registerform);",
                    "",
                    "",
                    "        registerform.getForm().loadRecord(data1);",
                    "",
                    "        registerform.query('textfield[name=\"formStatus\"]')[0].setValue('update');",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});",
                    "",
                    "//alert('Test'+accountNo);",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDebtorDetails",
            "designerId": "4b584e14-e157-4c86-a11b-ca559fc69c20"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openStatement",
                "implHandler": [
                    "    var accountNo = this.getCustomerinfo().down(\"#Accno\").value;\r",
                    "\r",
                    "    var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');\r",
                    "    var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');\r",
                    "\r",
                    "\r",
                    "    //Ext.Msg.alert('Test '+strDate1);\r",
                    "    window.open('reports/statement_pdf.php?acc1='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&rptType=statement',\"Reports\",\r",
                    "    \"menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes\");\r",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openStatement",
            "designerId": "92e68bb1-d8c1-45ef-be93-622e261dd197"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "printInvoices",
                "implHandler": [
                    "    var accountNo = this.getCustomerinfo().down(\"#Accno\").value;",
                    "",
                    "    var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');",
                    "    var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "   // alert(accountNo);",
                    "    window.open('reports/detailedInvoices.php?accNo='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&single=true',\"Reports\",",
                    "    \"menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "printInvoices",
            "designerId": "f579e092-fd57-4ea3-be1d-7b5b5f8695d5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "addMembers",
                "implHandler": [
                    "",
                    "//Ext.Msg.alert('test',button.getItemId());",
                    "",
                    "var membersWin=Ext.create('Ext.window.Window', {",
                    "    title: 'New Members Form',",
                    "    resizable:false",
                    "});",
                    "",
                    "var membersForm = Ext.create('CarePortal.view.NewMembersForm', {});",
                    "",
                    "membersWin.add(membersForm);",
                    "",
                    "if(button.getItemId()==='cmdAddMembers'){",
                    "    var accountNo = this.getCustomerinfo().down(\"#Accno\").value;",
                    "    membersForm.getForm().findField(\"txtAccno\").setValue(accountNo);",
                    "",
                    "}else if(button.getItemId()==='cmdAddMembers2'){",
                    "    var grid=this.getDebtorslist();",
                    "    var srecord=grid.getSelectionModel().getSelection();",
                    "    Ext.iterate(srecord,function(record,index){",
                    "        // selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "        if(grid.getSelectionModel().hasSelection()){",
                    "            var accountNo=record.get('accno');",
                    "            membersForm.getForm().findField(\"txtAccno\").setValue(accountNo);",
                    "        }else{",
                    "            Ext.Msg.alert('Error','Please Select a debtor in the list');",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "",
                    "//Ext.getCmp(\"txtAccno\").setValue(accountNo);",
                    "",
                    "membersWin.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addMembers",
            "designerId": "c52fc7ef-2514-470d-a342-5fb398203402"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewTransactions",
                "implHandler": [
                    "\r",
                    "var showAllocated=this.getCustomerinfo().down('#showAllocated').getValue();\r",
                    "var accountNo=this.getCustomerinfo().down('#Accno').getValue();\r",
                    "\r",
                    "var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');\r",
                    "var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');\r",
                    "\r",
                    "//alert('Test '+strDate1);\r",
                    "\r",
                    "var debtorTrans=Ext.data.StoreManager.lookup('DebtorTransactions');\r",
                    "debtorTrans.load({\r",
                    "    params: {\r",
                    "        accno:accountNo,\r",
                    "        startDate:strDate1,\r",
                    "        endDate:strDate2,\r",
                    "        showAllocated:showAllocated\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "\r",
                    "        // var data1=this.getStore('DebtorTransactions').getAt(0);\r",
                    "        //myform.loadRecord(data1);\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewTransactions",
            "designerId": "cca83e92-dbab-41ab-8d7c-8954c395052a"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "customerinfo",
                "selector": "customerinfo",
                "xtype": "customerinfo"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "customerinfo",
            "designerId": "38e07d83-caa4-4519-95c5-b41a47110fd5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "invoiceslist",
                "selector": "invoiceslist",
                "xtype": "invoiceslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "invoiceslist",
            "designerId": "65c20b3b-94bc-4016-9389-1c33b227e842"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewInvoices",
                "implHandler": [
                    "\r",
                    "var strParam=this.getInvoiceslist().down('#txtInvoices').getValue();\r",
                    "var startDate=this.getInvoiceslist().down('#startDate').getValue();\r",
                    "var endDate=this.getInvoiceslist().down('#endDate').getValue();\r",
                    "var accno=this.getInvoiceslist().down('#accNo').getValue();\r",
                    "//var rptType=\"invoices\";\r",
                    "\r",
                    "var invoicesStore=Ext.data.StoreManager.lookup('InvoicesList');\r",
                    "invoicesStore.load({\r",
                    "    params: {\r",
                    "        rptType: 'invoices',\r",
                    "        accno:accno,\r",
                    "        irParam:strParam,\r",
                    "        startDate:startDate,\r",
                    "        endDate:endDate\r",
                    "\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewInvoices",
            "designerId": "e7cb5657-8d0d-4955-81b5-d35329aed6f4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "previewReceipts",
                "implHandler": [
                    "var strParam=this.getReceiptslist().down('#txtReceipts').getValue();\r",
                    "var startDate=this.getReceiptslist().down('#startDate').getValue();\r",
                    "var endDate=this.getReceiptslist().down('#endDate').getValue();\r",
                    "var accno=this.getReceiptslist().down('#accNo').getValue();\r",
                    "//var rptType=\"receipts\";\r",
                    "\r",
                    "//alert('test test');\r",
                    "var receiptsStore=Ext.data.StoreManager.lookup('ReceiptsList');\r",
                    "receiptsStore.load({\r",
                    "    params: {\r",
                    "        rptType: 'receipts',\r",
                    "        accno:accno,\r",
                    "        irParam:strParam,\r",
                    "        startDate:startDate,\r",
                    "        endDate:endDate\r",
                    "\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "previewReceipts",
            "designerId": "d082c09f-1bcb-4f17-b3f1-9459ecf32c9a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel, record, item, index, e, options"
                ],
                "fn": "getIndividualInvoices",
                "implHandler": [
                    "var allocateInvStore=Ext.data.StoreManager.lookup('InvoiceAllocateSt');",
                    "allocateInvStore.load({",
                    "    params: {",
                    "        accno: record.get('accno')",
                    "    }",
                    "});",
                    "",
                    "this.getDebtorallocatereceipts().down('#totalReceipt').setValue(record.get('InvoiceAmount'));",
                    "this.getDebtorallocatereceipts().down('#accno').setValue(record.get('accno'));",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getIndividualInvoices",
            "designerId": "978e01bb-db1d-4abd-9ea3-46aa1f8c2707"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel, record, index, eOpts"
                ],
                "fn": "getInvoiceTotals",
                "implHandler": [
                    "this.getDebtorallocatereceipts().down('#totals').setValue('0');",
                    "var grid=this.getDebtorallocatereceipts().down('#allocateInvoicesGrid');",
                    "",
                    "var srecords=grid.getSelectionModel().getSelection();",
                    "var receipt=this.getDebtorallocatereceipts().down('#totalReceipt').getValue();",
                    "//var receipt=this.getDebtorallocatereceipts().down('#totalReceipt').getValue();",
                    "",
                    "var selectedRowIndexes = [];",
                    "var total=0;",
                    "Ext.iterate(srecords,function(record,index){",
                    "",
                    "     selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "    if(grid.getSelectionModel().hasSelection()){",
                    "        var amount=parseInt(record.get('InvoiceAmount'),10);",
                    "        //record.set(\"AllocatedAmount\",amount);",
                    "        var  alAmount=parseInt(record.get('AllocatedAmount'),10);",
                    "        if(alAmount>0 && alAmount!==''){",
                    "            allocAmount=alAmount;",
                    "        }else{",
                    "            allocAmount=amount;",
                    "        }",
                    "        total=parseInt(total,10)+allocAmount;",
                    "    }else{",
                    "        total=parseInt(total,10)+0;",
                    "    }",
                    "",
                    "",
                    "",
                    "});",
                    "",
                    "this.getDebtorallocatereceipts().down('#totals').setValue(total);",
                    "",
                    "if(total>receipt){",
                    "          Ext.Msg.alert(\"Allocate Error\",\"The Value Allocated cannot be greater than the Receipt value\");",
                    "    }",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getInvoiceTotals",
            "designerId": "3349effc-aa59-4057-a273-a982a8d7e4dd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorallocatereceipts",
                "selector": "debtorallocatereceipts",
                "xtype": "debtorallocatereceipts"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorallocatereceipts",
            "designerId": "c2c033e1-bd98-47c8-855c-7ed10a1f8a4f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "allocateReceipts",
                "implHandler": [
                    "var invoiceTotals=this.getAllocatereceipts().down('#totals').getValue();",
                    "var receipt=this.getAllocatereceipts().down('#totalReceipt').getValue();",
                    "",
                    "if(parseInt(invoiceTotals,10)>parseInt(receipt)){",
                    "    Ext.Msg.alert(\"Allocate Error\",\"The Value Allocated cannot be greater than the Receipt value<br> Please Select Invoices with lesser Amounts \"+invoiceTotals+'>'+receipt);",
                    "}else{",
                    "    var grid=this.getAllocatereceipts().down('#allocateInvoicesGrid');",
                    "",
                    "    var srecords=grid.getSelectionModel().getSelection();",
                    "",
                    "",
                    "",
                    "    var selectedRowIndexes = [];",
                    "    var transNos=[];",
                    "    Ext.iterate(srecords,function(record,index){",
                    "        selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "        invoiceAmount=record.get('InvoiceAmount');",
                    "        allocAmount=record.get('AllocatedAmount');",
                    "        receiptTransNo=record.get('transno');",
                    "        billNumber=record.get('bill_number');",
                    "        pid=record.get('pid');",
                    "",
                    "        if(allocAmount>0 && allocAmount!==''){",
                    "            allocatedAmount=allocAmount;",
                    "        }else{",
                    "            allocatedAmount=invoiceAmount;",
                    "        }",
                    "",
                    "        transNos.push(record.get('transno')+'-'+invoiceAmount+'-'+allocatedAmount+'-'+billNumber);",
                    "        //transNos.push=parseInt(record.get('transNo'),10);",
                    "",
                    "    });",
                    "",
                    "",
                    "    var grid2=this.getAllocatereceipts().down('#allocateReceiptsGrid');",
                    "",
                    "    var srecords2=grid2.getSelectionModel().getSelection();",
                    "",
                    "    var receiptTransNo;",
                    "    var invoiceAmount;",
                    "    Ext.iterate(srecords2,function(record,index){",
                    "        receiptTransNo=record.get('transno');",
                    "        receiptAmount=record.get('InvoiceAmount');",
                    "        // pid=record.get('pid');",
                    "        // billNumber=record.get('bill_number');",
                    "    });",
                    "",
                    "",
                    "    Ext.Msg.show({",
                    "        title:\"Allocate Receipts\",",
                    "        msg:\"Are you sure you want to allocate receipts to the above invoices \"+transNos,",
                    "        buttons:Ext.Msg.YESNO,",
                    "        icon:Ext.Msg.QUESTION,",
                    "        fn:function(rec){",
                    "            if(rec==='yes'){",
                    "                //Ext.Msg.alert('test','Test test test test');",
                    "                Ext.Ajax.request({",
                    "                    url:\"data/debtorFunctions.php?task=allocateReceipts&transNos=\"+transNos,",
                    "                    params:{",
                    "                        receiptTransNo:receiptTransNo,",
                    "                        receiptAmount:receiptAmount,",
                    "                        billNumber:billNumber,",
                    "                        pid:pid",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    // Ext.Msg.alert(\"Success\",\"The Values have been Allocated Successfully\");",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "allocateReceipts",
            "designerId": "5e5d5213-924a-4a91-9145-0cd45b6df433"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "closeWindow",
                "implHandler": [
                    "var win = button.up('window');\r",
                    "win.close();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "closeWindow",
            "designerId": "cc245561-ea10-4bd7-bcf6-f2f395831457"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "receiptslist",
                "selector": "receiptslist",
                "xtype": "receiptslist"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "receiptslist",
            "designerId": "9ff6b833-825b-4215-89ed-6945f05a3dd8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorregisterform",
                "selector": "debtorregisterform",
                "xtype": "debtorregisterform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorregisterform",
            "designerId": "77c9bb06-8395-4d22-8c0d-11029e6056c4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "closeMembersForm",
                "implHandler": [
                    "var win2 = button.up('newmemberswindow');\r",
                    "win2.close();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "closeMembersForm",
            "designerId": "a6ecde6b-bdbc-4043-8c35-8e86dc77579e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newmembersform",
                "selector": "newmembersform",
                "xtype": "newmembersform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "newmembersform",
            "designerId": "4bcba02d-7c9a-4d2c-af7e-a945687206b4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openDebtorMembers",
                "implHandler": [
                    "",
                    "debtorMembers = Ext.create('CarePortal.view.DebtorMembers', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(debtorMembers);",
                    "",
                    "",
                    "var debtorsListStore=Ext.data.StoreManager.lookup('DebtorsList');",
                    "debtorsListStore.load({});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDebtorMembers",
            "designerId": "61ad8174-fda4-4d39-b8db-0b1572b75506"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtormembers",
                "selector": "debtormembers",
                "xtype": "debtormembers"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtormembers",
            "designerId": "fef0ff73-da74-4e94-ae13-c517c9adbdd4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "options"
                ],
                "fn": "loadMembersList",
                "implHandler": [
                    "var stmemberslist=Ext.data.StoreManager.lookup('MembersListStore');\r",
                    "stmemberslist.load({\r",
                    "    params: {\r",
                    "        accno: record.get('accno')\r",
                    "    },\r",
                    "    callback: function(records, operation, success) {\r",
                    "\r",
                    "    },\r",
                    "    scope: this\r",
                    "\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadMembersList",
            "designerId": "af7d3876-8e87-4f09-b757-81768c2ece09"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchDebtors",
                "implHandler": [
                    "var stparams=this.getDebtormembers().down('#txtDebtorsParams').getValue();\r",
                    "var stCategory=this.getDebtormembers().down('#debtorCategory').getValue();\r",
                    "//Ext.Msg.alert('test',stparams);\r",
                    "\r",
                    "var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');\r",
                    "\r",
                    "stDebtorsList.load({\r",
                    "    params:{\r",
                    "        accno:stparams,\r",
                    "        category:stCategory\r",
                    "    }\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchDebtors",
            "designerId": "77218103-f3af-430b-ab2a-3bb88705fd50"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchDebtorsList",
                "implHandler": [
                    "var stparams=this.getDebtorslist().down('#txtDebtorsParams').getValue();\r",
                    "var stCategory=this.getDebtorslist().down('#debtorCategory').getValue();\r",
                    "//Ext.Msg.alert('test',stparams);\r",
                    "\r",
                    "var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');\r",
                    "\r",
                    "stDebtorsList.load({\r",
                    "    params:{\r",
                    "        accno:stparams,\r",
                    "        category:stCategory\r",
                    "    }\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchDebtorsList",
            "designerId": "102e3d2a-fc50-4a44-8466-acd741671e51"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorswindow",
                "selector": "debtorswindow",
                "xtype": "debtorswindow"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorswindow",
            "designerId": "16d41b4e-0850-4566-82ff-e7e7eea66fa2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openDebtorBalances",
                "implHandler": [
                    "",
                    "//alert('test');",
                    "",
                    "debtorBalances = Ext.create('CarePortal.view.DebtorBalances', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(debtorBalances);",
                    "",
                    "",
                    "var debtorBalancesList=Ext.data.StoreManager.lookup('DebtorBalancesStore');",
                    "debtorBalancesList.load({",
                    "    param:{",
                    "        start:0,",
                    "        limit:100",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDebtorBalances",
            "designerId": "e9901b82-d46e-475c-992e-a9504988c781"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchDebtorBalances",
                "implHandler": [
                    "//Ext.Msg.alert('test',stparams);\r",
                    "\r",
                    "var stparams=this.getDebtorbalances().down('#txtDebtorsParams').getValue();\r",
                    "var stCategory=this.getDebtorbalances().down('#debtorBalanceCategory').getValue();\r",
                    "\r",
                    "var stDebtorBalances=Ext.data.StoreManager.lookup('DebtorBalancesStore');\r",
                    "\r",
                    "stDebtorBalances.load({\r",
                    "    params:{\r",
                    "        searchParam:stparams,\r",
                    "        category:stCategory\r",
                    "    }\r",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchDebtorBalances",
            "designerId": "5ccbf06e-be8f-4f66-b573-400f9d53cfba"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorbalances",
                "selector": "debtorbalances",
                "xtype": "debtorbalances"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorbalances",
            "designerId": "358df10b-2d17-423a-971a-b759fc441242"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "printRegister",
                "implHandler": [
                    "",
                    "    var accountNo = this.getDebtorregisterform().down(\"#accno\").value;",
                    "    // Ext.Msg.alert('test','Test '+accountNo);",
                    "    //var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');",
                    "    //var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "",
                    "    //Ext.Msg.alert('Test '+strDate1);",
                    "    window.open('reports/register_pdf.php?acc1='+accountNo+'&rptType=statement',\"Reports\",",
                    "    \"menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "printRegister",
            "designerId": "13175529-3f60-4701-9130-3f46f1e54f89"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openNewCustomer3",
                "implHandler": [
                    "var custWin=Ext.create('Ext.window.Window',{",
                    "    title:\"test\",",
                    "    width:100,",
                    "    height:100",
                    "",
                    "});",
                    "custWin.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openNewCustomer3",
            "designerId": "2ac6774d-6336-4b22-8908-099c0ee05997"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "onComboboxChange",
                "implHandler": [
                    "  var debtorjobs=Ext.data.StoreManager.lookup('CustomerTrans');",
                    "        debtorjobs.load({",
                    "            params: {",
                    "                category: field.value",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "",
                    "",
                    "            },",
                    "            scope: this",
                    "",
                    "        });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "onComboboxChange",
            "designerId": "9c52787b-651b-4118-a082-e15e4bbe3c5e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "searchDebtorTrans",
                "implHandler": [
                    "          var debtorjobs=Ext.data.StoreManager.lookup('CustomerTrans');",
                    "                debtorjobs.load({",
                    "                    params: {",
                    "                        category: component.value",
                    "                    },",
                    "                    callback: function(records, operation, success) {",
                    "",
                    "",
                    "                    },",
                    "                    scope: this",
                    "",
                    "                });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchDebtorTrans",
            "designerId": "847884fa-ce89-42e5-a44b-4264bbe8f378"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "exportStatementToExcel",
                "implHandler": [
                    "var accountNo=this.getCustomerinfo().down('#Accno').getValue();",
                    "var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');",
                    "var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "window.open('reports/exportDebtorStatement.php?accNo='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&single=false',\"Reports\",",
                    "            \"menubar=yes,toolbar=yes,width=500,height=300,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "exportStatementToExcel",
            "designerId": "fd8576cd-88ec-4910-801e-9dcdb5270df3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openDiagnosisReport",
                "implHandler": [
                    "var accountNo=this.getCustomerinfo().down('#Accno').getValue();",
                    "var strDate1=Ext.Date.format(new Date(this.getCustomerinfo().down('#startDate').getValue()), 'Y-m-d');",
                    "var strDate2=Ext.Date.format(new Date(this.getCustomerinfo().down('#endDate').getValue()), 'Y-m-d');",
                    "",
                    "window.open('reports/diagnosisReportPDF.php?accNo='+accountNo+'&strDate1='+strDate1+'&strDate2='+strDate2+'&single=false',\"Reports\",",
                    "            \"menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDiagnosisReport",
            "designerId": "8749fb87-9db3-4181-9f25-13f79465875a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openRemoveMember",
                "implHandler": [
                    "// Ext.Msg.alert('Error','Please Select a debtor in the list');",
                    "",
                    "var membersWin=Ext.create('Ext.window.Window', {",
                    "    title: 'Remove Members Form',",
                    "    resizable:false",
                    "});",
                    "",
                    "var membersForm = Ext.create('CarePortal.view.RemoveMembersForm', {});",
                    "",
                    "membersWin.add(membersForm);",
                    "",
                    "if(button.getItemId()==='cmdRemoveMember'){",
                    "    var accountNo = this.getCustomerinfo().down(\"#Accno\").value;",
                    "    membersForm.getForm().findField(\"txtAccno\").setValue(accountNo);",
                    "",
                    "}else if(button.getItemId()==='cmdRemoveMember2'){",
                    "    var grid=this.getDebtorslist();",
                    "    var srecord=grid.getSelectionModel().getSelection();",
                    "    Ext.iterate(srecord,function(record,index){",
                    "",
                    "        // selectedRowIndexes.push(grid.getStore().indexOf(record));",
                    "        if(grid.getSelectionModel().hasSelection()){",
                    "            var accountNo=record.get('accno');",
                    "            membersForm.getForm().findField(\"txtAccno\").setValue(accountNo);",
                    "        }else{",
                    "            Ext.Msg.alert('Error','Please Select a debtor in the list');",
                    "        }",
                    "",
                    "",
                    "",
                    "    });",
                    "}",
                    "",
                    "membersWin.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openRemoveMember",
            "designerId": "454a9762-3be4-4143-a745-b1785c6b5de8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "addmembersform",
                "selector": "addmembersform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string"
            },
            "name": "addmembersform",
            "designerId": "ca43dfc7-e109-404c-a406-53dd39311b65"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "removemembersform",
                "selector": "removemembersform",
                "xtype": "removemembersform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "removemembersform",
            "designerId": "fd6a2482-e593-4abc-ad32-82ef4a7576ed"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "removeMembers",
                "implHandler": [
                    "var form = button.up('form').getForm(); // get the basic form",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', 'Saved new Member successfully.');",
                    "",
                    "            var win = button.up('membersWin');",
                    "            win.removeAll();",
                    "            win.destroy();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed', 'Could not Remove Member. Error='+action.result.errors.clientNo);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "removeMembers",
            "designerId": "1042ad68-92dc-4cf9-b5ef-10a8fd9c041e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "guarantorsform",
                "selector": "guarantorsform",
                "xtype": "guarantorsform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "guarantorsform",
            "designerId": "441505df-e9b0-44de-8cd0-ab97fb10a9d9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openGuarantorsForm",
                "implHandler": [
                    "var guarantorsform = Ext.create('CarePortal.view.GuarantorsForm', {});",
                    "var guarantorsWindow=Ext.create('Ext.window.Window', {",
                    "    title: 'DEBTORS GUARANTORS FORM',",
                    "    resizable:false",
                    "});",
                    "",
                    "guarantorsWindow.add(guarantorsform);",
                    "guarantorsWindow.show();",
                    "//registerform.getForm().loadRecord(record);",
                    "",
                    "var accName=this.getCustomerinfo().down('#accName').getValue();",
                    "guarantorsform.getForm().findField('accName').setValue(accName);",
                    "",
                    "var address=this.getCustomerinfo().down('#accAddress').getValue();",
                    "guarantorsform.getForm().findField('address').setValue(address);",
                    "",
                    "var phone=this.getCustomerinfo().down('#accPhone').getValue();",
                    "guarantorsform.getForm().findField('phone').setValue(phone);",
                    "",
                    "var grid=this.getCustomerinfo().down('#customerTransactions');",
                    "",
                    "var srecords=grid.getSelectionModel().getSelection();",
                    "",
                    "var selectedRowIndexes = [];",
                    "var transNos=[];",
                    "Ext.iterate(srecords,function(record,index){",
                    "    guarantorsform.getForm().findField('pid').setValue(record.get('pid'));",
                    "    guarantorsform.getForm().findField('pnames').setValue(record.get('pnames'));",
                    "    guarantorsform.getForm().findField('amount').setValue(record.get('amount'));",
                    "    guarantorsform.getForm().findField('billNumber').setValue(record.get('billNumber'));",
                    "",
                    "    guarantorsform.getForm().findField('accNo').setValue(record.get('accno'));",
                    "",
                    "",
                    "",
                    "",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openGuarantorsForm",
            "designerId": "93b0a9cd-8abb-4c9f-930c-91c649d86455"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "printGarantorsForm",
                "implHandler": [
                    "var accountNo=this.getCustomerinfo().down('#Accno').getValue();",
                    "var pid=this.getGuarantorsform().down('#pid').getValue();",
                    "",
                    "window.open('reports/guarantorsFormPDF.php?accNo='+accountNo+'&pid='+pid+'&single=false',\"Reports\",",
                    "            \"menubar=yes,toolbar=yes,width=500,height=550,location=yes,resizable=no,scrollbars=yes,status=yes\");",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "printGarantorsForm",
            "designerId": "8de32b92-f628-482d-9d9c-bf99a7f9c272"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "customerinfo",
                "selector": "customerinfo",
                "xtype": "customerinfo"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "customerinfo",
            "designerId": "9360b620-307a-49e2-83ab-89dc3c7a8b77"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveGuarantor",
                "implHandler": [
                    "var form = button.up('form').getForm(); // get the basic form",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', 'Saved new Guarantor successfully.');",
                    "",
                    "            //var win = button.up('newmemberswindow');",
                    "            //win.removeAll();",
                    "            //win.destroy();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed', 'Could not save Guarantor. Error='+action.result.errors.clientNo);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveGuarantor",
            "designerId": "3e4b7db3-05bd-49d7-bf1d-83a35a11b4a3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "options"
                ],
                "fn": "getPressedKey",
                "implHandler": [
                    "this.searchDebtors();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPressedKey",
            "designerId": "ef9f661f-e059-45e7-bb43-577dd825ef48"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "options"
                ],
                "fn": "getPressedKey2",
                "implHandler": [
                    "this.searchDebtorsList2();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPressedKey2",
            "designerId": "e99c853c-fd46-4b9c-b670-758dd80f0996"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "searchDebtorsList2",
                "implHandler": [
                    "var stparams=this.getDebtorslist().down('#txtDebtorsParams2').getValue();",
                    "var stCategory=this.getDebtorslist().down('#debtorCategory2').getValue();",
                    "//Ext.Msg.alert('test',stparams);",
                    "",
                    "var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');",
                    "",
                    "stDebtorsList.load({",
                    "    params:{",
                    "        accno:stparams,",
                    "        category:stCategory",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchDebtorsList2",
            "designerId": "233da627-d420-4592-be8e-6342112c23f1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchDebtorslist",
                "implHandler": [
                    "var stparams=this.getDebtorslist().down('#txtDebtorsParams2').getValue();",
                    "var stCategory=this.getDebtorslist().down('#debtorCategory2').getValue();",
                    "//Ext.Msg.alert('test',stparams);",
                    "",
                    "var stDebtorsList=Ext.data.StoreManager.lookup('DebtorsList');",
                    "",
                    "stDebtorsList.load({",
                    "    params:{",
                    "        accno:stparams,",
                    "        category:stCategory",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchDebtorslist",
            "designerId": "a75d9fdc-eb0d-491c-900f-558559442b3a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openCredits",
                "implHandler": [
                    "//Ext.Msg.alert('Test','Test Test');",
                    "",
                    "var creditsWin=Ext.create('Ext.window.Window', {",
                    "    title: 'Miscellaneous Credits',",
                    "    resizable:false",
                    "});",
                    "",
                    "var insuranceCredits = Ext.create('CarePortal.view.InsuranceCredits', {});",
                    "",
                    "creditsWin.add(insuranceCredits);",
                    "",
                    "var grid=this.getDebtorslist();",
                    "    var srecord=grid.getSelectionModel().getSelection();",
                    "    Ext.iterate(srecord,function(record,index){",
                    "        if(grid.getSelectionModel().hasSelection()){",
                    "            var accountNo=record.get('accno');",
                    "            var pid=record.get('pid');",
                    "            var pnames=record.get('pnames');",
                    "            insuranceCredits.getForm().findField(\"accno\").setValue(accountNo);",
                    "            insuranceCredits.getForm().findField(\"pid\").setValue(pid);",
                    "            insuranceCredits.getForm().findField(\"pnames\").setValue(pnames);",
                    "        }else{",
                    "            Ext.Msg.alert('Error','Please Select a debtor in the list');",
                    "        }",
                    "    });",
                    "",
                    "creditsWin.show();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openCredits",
            "designerId": "c775f792-a00c-4dc4-aa39-b96669f60cca"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "insurancecredits",
                "selector": "insurancecredits",
                "xtype": "insurancecredits"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "insurancecredits",
            "designerId": "a7f1c62f-bc51-4bae-8dc0-667003d065bd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveCredits",
                "implHandler": [
                    "Ext.Msg.alert('Test','Test Test');",
                    "var form = button.up('form').getForm(); // get the basic form",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function(form, action) {",
                    "            Ext.Msg.alert('Success', 'Saved new Credit successfully.');",
                    "",
                    "            var win = button.up('window');",
                    "            win.close();",
                    "        },",
                    "        failure: function(form, action) {",
                    "            Ext.Msg.alert('Failed', 'Could not save Credit. Error='+action.result.errors.clientNo);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveCredits",
            "designerId": "1970e76a-473b-4bed-9358-6c8b136c3c6b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "insurancedebits",
                "selector": "insurancedebits",
                "xtype": "insurancedebits"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "insurancedebits",
            "designerId": "bfa55ed8-976b-4d6f-a137-f7442b1b1ba4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openDebits",
                "implHandler": [
                    "      var debitsWin=Ext.create('Ext.window.Window', {",
                    "            title: 'Miscellaneous Debits',",
                    "            resizable:false",
                    "        });",
                    "",
                    "        var insuranceDebits= Ext.create('Debtors.view.InsuranceDebits', {});",
                    "",
                    "        debitsWin.add(insuranceDebits);",
                    "",
                    "        debitsWin.show();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDebits",
            "designerId": "5ec598c5-0d5d-44fc-ac51-0ab36ae44ab9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openDebtorAllocations",
                "implHandler": [
                    "debtorAllocations = Ext.create('CarePortal.view.Allocations', {});",
                    "center_container = this.getViewport().down('container[region=center]');",
                    "center_container.removeAll(); //removing existing views.",
                    "center_container.add(debtorAllocations);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDebtorAllocations",
            "designerId": "bf071c9e-ce2c-4397-9de3-64ef87d21e75"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "searchInvoices",
                "implHandler": [
                    "var stparams=this.getAllocatereceipts().down('#txtInvoiceSearch').getValue();",
                    "var startDate=this.getAllocatereceipts().down('#startDate').getValue();",
                    "var endDate=this.getAllocatereceipts().down('#endDate').getValue();",
                    "var accno=this.getAllocatereceipts().down('#accno').getValue();",
                    "",
                    "var invoicesStore=Ext.data.StoreManager.lookup('InvoiceAllocateSt');",
                    "",
                    "invoicesStore.load({",
                    "    params:{",
                    "        searchParam:stparams,",
                    "        startDate:startDate,",
                    "        accno:accno,",
                    "        endDate:endDate",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchInvoices",
            "designerId": "e77237c4-892f-4824-bd7c-667061445eff"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "debtorsmanager",
                "selector": "debtorsmanager",
                "xtype": "debtorsmanager"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "debtorsmanager",
            "designerId": "501d2fcd-9429-41a5-855c-ff7c4faa4c7d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "customerinfo",
                "selector": "customerinfo",
                "xtype": "customerinfo"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "customerinfo",
            "designerId": "01483759-428c-4445-96e6-d6af7e7aab35"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openAllocationsWindow",
                "implHandler": [
                    "var allocationsWin=Ext.create('Ext.window.Window', {",
                    "    title: 'Receipts Allocation',",
                    "    resizable:false",
                    "});",
                    "",
                    "var receiptsAllocation= Ext.create('CarePortal.view.DebtorAllocateReceipts', {});",
                    "",
                    "allocationsWin.add(receiptsAllocation);",
                    "",
                    "allocationsWin.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openAllocationsWindow",
            "designerId": "22e8a191-62af-4886-8377-424ead471cc2"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newmembersform",
                "selector": "newmembersform",
                "xtype": "newmembersform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "newmembersform",
            "designerId": "7a08e091-4979-4ed2-a3cd-505f148904e2"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "removemembersform",
                "selector": "removemembersform",
                "xtype": "removemembersform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "removemembersform",
            "designerId": "6c8c86a1-4345-4c4b-a46e-5acbd5427a31"
        }
    ]
}