{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Main",
        "models": [
            "Diagnosis",
            "Vitals",
            "Prescriptions",
            "OPAdmissions",
            "ClinicalRooms",
            "WardInfo",
            "ClinicsInfo",
            "Announcements",
            "Clincs",
            "Radiology",
            "Investigations",
            "Notes",
            "MenusModel",
            "SubMenuModels",
            "PatientDetails",
            "AdmissionTypes",
            "EncountersList",
            "County",
            "NextOfKin",
            "StatusLogs",
            "NotesTypes",
            "ServicesList",
            "ProceduresAndServices",
            "ServiceOrdesrModel",
            "Allergies"
        ],
        "stores": [
            "VitalsStore",
            "PrescriptionStore",
            "OPAdmissionsStore",
            "ClinicalRoomsStore",
            "ClinicInfoStore",
            "OPAdmissions",
            "Prescriptions",
            "ClinicsStore",
            "AnnouncementStore",
            "RadiologyStore",
            "InvestigationsStore",
            "NotesStore",
            "GridStore",
            "ChartStore",
            "AdmissionTypeStore",
            "DiagnosisStore",
            "PatientDetails",
            "EncountersListStore",
            "CountyStore",
            "NextOfKin",
            "StatusLogsStore",
            "NoteTypesStore",
            "ProceduresAndServices",
            "ServicesStore",
            "OrderDetailStore",
            "AllergiesStore",
            "RadiologyListStore",
            "LabTestStore"
        ],
        "views": [
            "Portal",
            "PortalPanel",
            "ChartPortlet",
            "GridPortlet",
            "Message",
            "HeaderPanel",
            "Vitals",
            "DiagnosisPanel",
            "Investigations",
            "DoctorsNotes",
            "Complains",
            "DoctorsArea",
            "PatientStatus",
            "RoomAllocation",
            "DoctorsWorkload",
            "TriagePanel",
            "Announcements",
            "WardsTable",
            "OpdVisits",
            "OutpatientList",
            "AdmissionData",
            "AdmitInpatient",
            "AdmitOutpatient",
            "MenuDiagram",
            "DontorsNotesEntry",
            "WardOccupancy",
            "VitalsForm",
            "Notes",
            "AssignBeds",
            "CashSales",
            "ItemsMaster",
            "SystemAdmin",
            "PrescriptionForm",
            "PaymentsAdj",
            "Payments",
            "Login",
            "LabItems",
            "LabTests",
            "Services",
            "Diagnosis",
            "MCH",
            "Immunization",
            "Radiology"
        ]
    },
    "configAlternates": {
        "designer|userClassName": "string",
        "views": "typedarray",
        "models": "typedarray",
        "stores": "typedarray"
    },
    "designerId": "6a0acaee-7d2e-4004-b317-0ab61506e797",
    "cn": [
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "panel[isPortlet]",
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onPortletBeforeClose",
                "implHandler": [
                    "// Provide a custom fade out effect when a portlet is removed from the portal",
                    "if (!panel.closing) {",
                    "    panel.closing = true;",
                    "    panel.el.animate({",
                    "        opacity: 0,",
                    "        callback: panel.doClose,",
                    "        scope: panel",
                    "    });",
                    "}",
                    "return false;",
                    ""
                ],
                "name": "beforeclose",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onPortletBeforeClose",
            "designerId": "4690992a-7342-4d76-8b24-1ef349e8abbd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "msg"
                ],
                "fn": "showMsg",
                "implHandler": [
                    "var msgId = Ext.id(),",
                    "    msgCmp = this.getMsg();",
                    "",
                    "this.msgId = msgId;",
                    "msgCmp.update(msg);",
                    "msgCmp.show();",
                    "",
                    "Ext.defer(this.clearMsg, 3000, this, [msgId]);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showMsg",
            "designerId": "3f66cf28-7e4f-4b6c-8aa9-9e398efba77d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "msgId"
                ],
                "fn": "clearMsg",
                "implHandler": [
                    "if (msgId === this.msgId) {",
                    "    this.getMsg().hide();",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearMsg",
            "designerId": "371fdd0d-7011-4775-b692-14034d18582b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "autoCreate": true,
                "ref": "msg",
                "selector": "message",
                "xtype": "message"
            },
            "configAlternates": {
                "autoCreate": "boolean",
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "msg",
            "designerId": "3b72f320-2675-4345-a479-f5caa87ab95e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "panel[isPortlet]",
                "designer|params": [
                    "panel"
                ],
                "designer|targetType": "Ext.panel.Panel",
                "fn": "onPortletClose",
                "implHandler": [
                    "this.showMsg('\"' + panel.title + '\" was removed');"
                ],
                "name": "close",
                "scope": "me"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|params": "typedarray",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string",
                "scope": "string"
            },
            "name": "onPortletClose",
            "designerId": "53834857-2e8c-4c9e-962e-62ccb0591c17"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "init",
                "implHandler": [
                    "this.control({",
                    "    \"#mnuHome\":{",
                    "        click:this.openHome",
                    "    },",
                    "    \"#mnuDoctorsArea\":{",
                    "        click:this.openDoctorsArea",
                    "    },",
                    "    \"outpatientlist\":{",
                    "        itemclick:this.updateHeaderDetails//,",
                    "        //itemdblclick:this.getPatientData",
                    "    },",
                    "    '#OutpatientAdmissions':{",
                    "        itemdblclick:this.openAdmissionData",
                    "    },",
                    "    '#mnuNursingArea':{",
                    "        click:this.openTriage",
                    "    },",
                    "    '#txtOpSearch':{",
                    "        change:this.searchPatients",
                    "    },",
                    "    '#cmdNew':{",
                    "        click:this.openEntryForm",
                    "    },",
                    "    '#cmdSave':{",
                    "        click:this.saveForm",
                    "    },",
                    "    '#menusPanel':{",
                    "        render:this.buildMenus",
                    "    },",
                    "    'menu':{",
                    "        click:this.getSelectedMenu",
                    "    },",
                    "    '#searchBox':{",
                    "        specialkey:this.getPressedKey2,",
                    "        //change:this.searchPatientRegister",
                    "    },",
                    "    '#cmdRegister':{",
                    "        click:this.openRegister",
                    "    },",
                    "    'patientinfo button#viewPatients':{",
                    "        click:this.getViewPatient",
                    "    },",
                    "    'patientinfo button#updatePatients':{",
                    "        click:this.updatePatientInfo",
                    "    },",
                    "    '#cmdSearch':{",
                    "        click:this.searchPatient",
                    "    },",
                    "    '#cmdAdmitInpatient':{",
                    "        click:this.showAdmissionform",
                    "    },",
                    "    '#cmdAdmitOutpatient':{",
                    "        click:this.showAdmissionform",
                    "    },",
                    "    '#cancelAdmit':{",
                    "        click:this.cancelAdmission",
                    "    },",
                    "    '#savePatient':{",
                    "        click:this.savePatient",
                    "    },",
                    "    '#saveOpAdmission':{",
                    "        click:this.saveOpAdmission",
                    "    },",
                    "    '#saveIpAdmission':{",
                    "        click:this.saveIpAdmission",
                    "    },",
                    "    '#btnVitals':{",
                    "        afterrender:this.createVitals",
                    "    },",
                    "    'outpatientlist button#viewPatients':{",
                    "        click:this.getViewPatient",
                    "    },",
                    "    'outpatientlist button#transferPatient':{",
                    "        click:this.openTransferForm",
                    "    },",
                    "    '#btnNotes':{",
                    "        afterrender:this.createNotes",
                    "    },",
                    "    '#btnDiagnosis':{",
                    "        afterrender:this.createDiagnosis",
                    "    },",
                    "    '#btnLabtest':{",
                    "        afterrender:this.createLabTest",
                    "    },",
                    "    '#btnRadiology':{",
                    "        afterrender:this.createRadiology",
                    "    },",
                    "    '#btnServices':{",
                    "        afterrender:this.createServices",
                    "    },",
                    "    '#btnPrescriptions':{",
                    "        afterrender:this.createPrescription",
                    "    },",
                    "    '#btnImmunizations':{",
                    "        afterrender:this.createImmunization",
                    "    },",
                    "    '#btnMch':{",
                    "        afterrender:this.createMch",
                    "    },",
                    "    '#cmdAddComplaints':{",
                    "        click:this.addComplaints",
                    "    },",
                    "    '#waitingList':{",
                    "        afterrender:this.getSelectedPatient",
                    "    },",
                    "    'assignbeds':{",
                    "        itemclick:this.assignBed",
                    "    },",
                    "    '#cmdLogin':{",
                    "        click:this.login",
                    "    },",
                    "    '#systemAdmin':{",
                    "        click:this.openSystemAdmin",
                    "    },",
                    "    '#logout':{",
                    "        click:this.logout",
                    "    },",
                    "    '#loginWindow':{",
                    "        beforerender:this.checkLoginStatus",
                    "    },",
                    "    '#cmdSaveLabTest':{",
                    "        click:this.saveLabTest",
                    "    },",
                    "    '#refreshLogs':{",
                    "        click:this.loadEncounterLogs",
                    "    },",
                    "    '#cmdSearchPatients':{",
                    "        click:this.searchPatient",
                    "    },",
                    "    '#cmdAddServices':{",
                    "        click:this.saveProceduresAndServices",
                    "    },",
                    "    '#Services':{",
                    "        click:this.loadServices",
                    "    },",
                    "    '#age':{",
                    "        change:this.getDob",
                    "    },",
                    "    '#months':{",
                    "        change:this.getDob",
                    "    },",
                    "    '#cmdSaveDiagnosis':{",
                    "        click:this.saveDiagnosis",
                    "    },",
                    "    '#cmdSaveMch':{",
                    "        click:this.saveMch",
                    "    },",
                    "    '#cmdAddAllergies':{",
                    "        click:this.addAllergies",
                    "    },",
                    "    '#cmdAddInsurance':{",
                    "        click:this.addInsurance",
                    "    },",
                    "    '#cmdSaveRadiology':{",
                    "        click:this.saveRadiology",
                    "    }",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "init",
            "designerId": "c056d7e4-8074-4969-a3f3-2846790f0319"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openDoctorsArea",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=checkUserRole',",
                    "    waitMsg: 'checkin user permissions ...',",
                    "    success: function(response){",
                    "        var text = response.responseText;",
                    "       // Ext.Msg.alert('Dashboard','You are allowed to access Doctors Area');",
                    "        headerPanel=Ext.create(\"CarePortal.view.HeaderPanel\",{});",
                    "",
                    "        doctorsArea=Ext.create(\"CarePortal.view.DoctorsArea\",{});",
                    "        centerContainer=this.getViewport().down(\"#PortalDetails\");",
                    "        centerContainer.removeAll();",
                    "",
                    "        centerContainer.add(headerPanel,doctorsArea);",
                    "        //this.openHome();",
                    "",
                    "    },",
                    "    failure:function(response){",
                    "       // var resp = JSON.parseJSON(response);",
                    "        Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');",
                    "    },",
                    "      scope: this",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openDoctorsArea",
            "designerId": "74929d54-1471-41a3-922d-d658892e5b01"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openHome",
                "implHandler": [
                    "// Set the localStorage value to true",
                    "        localStorage.setItem(\"LoggedIn\", true);",
                    "        homeArea=Ext.create(\"CarePortal.view.Portal\",{});",
                    "",
                    "         this.getView().destroy();",
                    "        ",
                    "        Ext.widget(homeArea);",
                    "        centerContainer=homeArea.down(\"#PortalDetails\");",
                    "        centerContainer.removeAll();",
                    "",
                    "       // centerContainer.add(homeArea);",
                    "",
                    "       // this.getAnnouncements();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openHome",
            "designerId": "a228871a-a949-49ae-b30e-807629012d80"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "viewport",
                "selector": "viewport",
                "xtype": "portal"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "viewport",
            "designerId": "d76f4c22-1de3-4638-a87d-4b7d21f811d9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "headerpanel",
                "selector": "headerpanel",
                "xtype": "headerpanel"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "headerpanel",
            "designerId": "dab693d5-d67e-463d-93ed-b100313751e9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "eOpts"
                ],
                "fn": "updateHeaderDetails",
                "implHandler": [
                    "// Ext.Msg.alert('Test',record.get('FirstName'));",
                    "",
                    "// this.getHeaderpanel().down('#PatientName').setValue(record.get('Names'));",
                    "// this.getHeaderpanel().down('#Age').setValue(record.get('Age'));",
                    "// this.getHeaderpanel().down('#Gender').setValue(record.get('Gender'));",
                    "// this.getHeaderpanel().down('#PID').setValue(record.get('Pid'));",
                    "// this.getHeaderpanel().down('#EncounterNo').setValue(record.get('EncounterNo'));",
                    "",
                    "var encNo=record.get('EncounterNo');",
                    "",
                    "var presStore=Ext.data.StoreManager.lookup(\"PrescriptionStore\");",
                    "",
                    "presStore.load({",
                    "    params: {",
                    "        encNo:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        //this.getVitals(encNo);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    "// this.getVitals(record.get('EncounterNo'));",
                    "// this.getDiagnosis(record.get('EncounterNo'));",
                    "// this.getInvestigations(record.get('EncounterNo'));",
                    "// this.getNotes(record.get('EncounterNo'));",
                    "// this.getRadiology(record.get('EncounterNo'));",
                    "// this.getProcedures(record.get('EncounterNo'));"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updateHeaderDetails",
            "designerId": "4cb8815c-5500-47f2-aef5-07a86fe4e986"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "eOpts"
                ],
                "fn": "getPatientData",
                "implHandler": [
                    "this.openDoctorsArea();",
                    "",
                    "var encNo=record.get('EncounterNo');",
                    "",
                    "var presStore=Ext.data.StoreManager.lookup(\"PrescriptionStore\");",
                    "",
                    "presStore.load({",
                    "    params: {",
                    "        encNo:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        this.getVitals(encNo);",
                    "        this.getDiagnosis(encNo);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPatientData",
            "designerId": "b08eb59c-2b7e-4e3e-9f21-161991615f4f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encNo"
                ],
                "fn": "getVitals",
                "implHandler": [
                    "var vitalsStore=Ext.data.StoreManager.lookup(\"VitalsStore\");",
                    "var vitalsPanel=this.getViewport().down(\"#vitals\");",
                    "",
                    "vitalsStore.load({",
                    "    params: {",
                    "        encNo:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        var tpl=new Ext.XTemplate(",
                    "            '<Table id=vitals>',",
                    "            '<tr><td class=titles>ID</td><td class=titles>Time</td><td class=titles>Description</td><td class=titles>Values</td></tr>',",
                    "                '<tpl for=\".\">',",
                    "                     '<tr>',",
                    "                        '<td>{VitalID}</td>',",
                    "                        '<td>{VitalsTime}</td>',",
                    "                        '<td>{Description}</td>',",
                    "                        \"<tpl if='Value &gt;= Lower' && 'Value &lt;= Upper'>\",",
                    "                            '<td class=good>{Value}</td>',",
                    "                        '<tpl else>',",
                    "                            '<td class=danger>{Value}</td>',",
                    "                        '</tpl>',",
                    "                     '</tr>',",
                    "                '</tpl>',",
                    "            '</table>'",
                    "        );",
                    "",
                    "        var data = [];",
                    "        vitalsStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "        tpl.overwrite(vitalsPanel.body,data);",
                    "",
                    "",
                    "    },scope:this",
                    "",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getVitals",
            "designerId": "681652b5-397a-4b85-b9e0-042b76246ac4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encNo"
                ],
                "fn": "getInvestigations",
                "implHandler": [
                    "var investigationsPanel=this.getViewport().down(\"#investigations\");",
                    "var investigationsStore=Ext.data.StoreManager.lookup(\"InvestigationsStore\");",
                    "",
                    "investigationsStore.load({",
                    "    params: {",
                    "        encNo:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=investigations>',",
                    "                '<tr><td colspan=5 class=titles>INVESTIGATIONS</td></tr>',",
                    "                        '<tr><td class=titles>Status</td>',",
                    "                            '<td class=titles>Description</td>',",
                    "                            '<td class=titles>TimeRequested</td>',",
                    "                            '<td class=titles>BatchNo</td>',",
                    "                            '<td class=titles>RequestedBy</td>',",
                    "                        '</tr>',",
                    "                 '<tpl for=\".\">',",
                    "",
                    "                        '<tr>',",
                    "                            '<tpl if=\"Status == pending\">',",
                    "                                '<td class=status1>{Status}</td>',",
                    "                            '<tpl else>',",
                    "                                 '<td class=status1>{Status}</td>',",
                    "                            '</tpl>',",
                    "                            '<td>{Description}</td>',",
                    "                            '<td>{TimeRequested}</td>',",
                    "                            '<td>{BatchNo}</td>',",
                    "                            '<td>{RequestedBy}</td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "        investigationsStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "        tpl.overwrite(investigationsPanel.body,data);",
                    "",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getInvestigations",
            "designerId": "cb91972b-b976-4090-a4f5-7203916a4086"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encNo"
                ],
                "fn": "getRadiologyOld",
                "implHandler": [
                    "var radiologyPanel=this.getViewport().down(\"#radiologyPanel\");",
                    "var radiologyStore=Ext.data.StoreManager.lookup(\"RadiologyStore\");",
                    "",
                    "radiologyStore.load({",
                    "    params: {",
                    "        encNr:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=investigations>',",
                    "                '<tr><td colspan=5 class=titles>RADIOLOGY TESTS</td></tr>',",
                    "                        '<tr><td class=titles>Status</td>',",
                    "                            '<td class=titles>Description</td>',",
                    "                            '<td class=titles>TimeRequested</td>',",
                    "                            '<td class=titles>BatchNo</td>',",
                    "                            '<td class=titles>RequestedBy</td>',",
                    "                        '</tr>',",
                    "                 '<tpl for=\".\">',",
                    "",
                    "                        '<tr>',",
                    "                            '<tpl if=\"Status == pending\">',",
                    "                                '<td class=status1>{Status}</td>',",
                    "                            '<tpl else>',",
                    "                                 '<td class=status1>{Status}</td>',",
                    "                            '</tpl>',",
                    "                            '<td>{Description}</td>',",
                    "                            '<td>{TimeRequested}</td>',",
                    "                            '<td>{BatchNo}</td>',",
                    "                            '<td>{RequestedBy}</td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "              var data = [];",
                    "",
                    "                radiologyStore.each(function(record) {",
                    "                    data.push(record.getData());",
                    "                });",
                    "",
                    "                tpl.overwrite(radiologyPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getRadiologyOld",
            "designerId": "66bc7b5e-cd2a-4f34-870b-f6571f9f8998"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encNo"
                ],
                "fn": "getProcedures",
                "implHandler": [
                    "var procPanel=this.getViewport().down(\"#complains\");",
                    "var procStore=Ext.data.StoreManager.lookup(\"ProcedureStore\");",
                    "",
                    "procStore.load({",
                    "    params: {",
                    "        encNo:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=investigations>',",
                    "                '<tr><td colspan=4 class=titles>Services & Procedures Rendered</td></tr>',",
                    "                        '<tr><td class=titles>No</td>',",
                    "                            '<td class=titles>PartCode</td>',",
                    "                            '<td class=titles>Description</td>',",
                    "                            '<td class=titles>Qty</td>',",
                    "                            '<td class=titles>Cost</td>',",
                    "                            '<td class=titles>Time</td></tr>',",
                    "                 '<tpl for=\".\">',",
                    "                        '<tr>',",
                    "                            '<td>{No}</td>',",
                    "                            '<td>{PartCode}</td>',",
                    "                            '<td style=\"width:300px;\"><div class=content>{Description}</div></td>',",
                    "                            '<td>{Qty}</td>',",
                    "                            '<td>{Price}</td>',",
                    "                            '<td>{RequestTime}</td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        procStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "        tpl.overwrite(procPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getProcedures",
            "designerId": "68f512b4-00e1-417e-b5de-09f9e4723082"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "vitals",
                "selector": "vitals",
                "xtype": "vitals"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "vitals",
            "designerId": "c3bed1a3-3810-4dcf-923d-d4cee5f20f8d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openAdmissionData",
                "implHandler": [
                    "// strPid=record.get('Pid');",
                    "// //getinfo(strPid)",
                    "// url=\"../modules/registration_admission/aufnahme_pass.php?target=search&fwd_nr=\"+strPid+\"&title=Click to show data\";",
                    "// //runModul (url);",
                    "// window.parent.CONTENTS.location.href=url;",
                    "",
                    "",
                    "        var rec = button.lookupViewModel().get('record');",
                    "        //Ext.Msg.alert(\"Button clicked\", \"Hey! \" + rec.get(\"EncounterNo\"));",
                    "        var sourceForm=button.up('grid').getItemId();",
                    "",
                    "        if(sourceForm==='patientInfo'){",
                    "            encounterNo=rec.get('CurrentEncounter');",
                    "            var names=rec.get('FirstName')+' '+rec.get('LastName')+ ' '+rec.get('SurName');",
                    "",
                    "        }else if(sourceForm==='OutpatientAdmissions'){",
                    "            encounterNo=rec.get('EncounterNo');",
                    "            var names=rec.get('Names');",
                    "",
                    "        }else if(sourceForm==='register'){",
                    "            ",
                    "        }",
                    "",
                    "        var encStore =Ext.data.StoreManager.lookup('EncountersListStore');",
                    "        encStore.load({",
                    "            params: {",
                    "                pid: rec.get('Pid')",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "",
                    "            },",
                    "            scope: this",
                    "        });",
                    "",
                    "",
                    "        admissionDetails=Ext.create(\"CarePortal.view.AdmissionData\",{});",
                    "        centerContainer=this.getViewport().down(\"#detailsPanel\");",
                    "        //centerDetails=Ext.create(\"CarePortal.view.SystemAdmin\",{});",
                    "        centerContainer.removeAll();",
                    "",
                    "        centerContainer.add(admissionDetails);",
                    "        centerContainer.setTitle('Patient Admission Data');",
                    "",
                    "",
                    "",
                    "        this.getAdmissiondata().down('#pid').setValue(rec.get('Pid'));",
                    "        this.getAdmissiondata().down('#pid2').setValue(rec.get('Pid'));",
                    "        this.getAdmissiondata().down('#pid3').setValue(rec.get('Pid'));",
                    "        this.getAdmissiondata().down('#fileNumber').setValue(rec.get('fileNumber'));",
                    "        this.getAdmissiondata().down('#names').setValue(names);",
                    "        this.getAdmissiondata().down('#dob').setValue(rec.get('DateOfBirth'));",
                    "        this.getAdmissiondata().down('#gender').setValue(rec.get('Gender'));",
                    "        this.getAdmissiondata().down('#registrationDate').setValue(rec.get('RegistrationDate'));",
                    "        this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);",
                    "        this.getAdmissiondata().down('#encounterNr2').setValue(encounterNo);",
                    "        this.getAdmissiondata().down('#encounterDate').setValue(rec.get('EncounterDate'));",
                    "        this.getAdmissiondata().down('#encounterDate2').setValue(rec.get('EncounterDate'));",
                    "",
                    "        if(encounterNo===''){",
                    "            this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);",
                    "            this.getAdmissiondata().down('#admissionButtons').setHidden(false);",
                    "            this.getAdmissiondata().down('#menuDiagram').setHidden(true);",
                    "        }else{",
                    "            this.getAdmissiondata().down('#admissionStatus').setValue('The Patient is Currentlly Admited in ');",
                    "            this.getAdmissiondata().down('#admissionButtons').setHidden(true);",
                    "            this.getAdmissiondata().down('#menuDiagram').setHidden(false);",
                    "            if(rec.get('EncounterClass')==1){",
                    "                this.getAdmissiondata().down('#inpatientDetails').setHidden(false);",
                    "                this.getAdmissiondata().down('#inpatient').setValue(rec.get('Department'));",
                    "                this.getAdmissiondata().down('#ward').setValue(rec.get('ConsultationFee'));",
                    "                this.getAdmissiondata().down('#financeClass').setValue(rec.get('PaymentMode'));",
                    "",
                    "",
                    "            }else{",
                    "                this.getAdmissiondata().down('#outpatientDetails').setHidden(false);",
                    "                this.getAdmissiondata().down('#outpatient').setValue(rec.get('EncounterClass'));",
                    "                this.getAdmissiondata().down('#department').setValue(rec.get('Department'));",
                    "                this.getAdmissiondata().down('#consultationFee').setValue(rec.get('ConsultationFee'));",
                    "                this.getAdmissiondata().down('#financePlan').setValue(rec.get('PaymentMode'));",
                    "            }",
                    "        }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openAdmissionData",
            "designerId": "e13a98c6-8094-4e06-be08-4724977cf570"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "pid,encNo,names"
                ],
                "fn": "openAdmissionData1",
                "implHandler": [
                    "// var pid=sessionStorage.getItem('pid');",
                    "var names=sessionStorage.getItem('names');",
                    "",
                    "Ext.Msg.alert('Rest',pid+' '+encNo);",
                    "",
                    "var encounterNo=sessionStorage.getItem('encounterNo');",
                    "",
                    "        var encStore =Ext.data.StoreManager.lookup('EncountersListStore');",
                    "        encStore.load({",
                    "            params: {",
                    "                pid: pid",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "",
                    "            },",
                    "            scope: this",
                    "        });",
                    "",
                    "",
                    "        admissionDetails=Ext.create(\"CarePortal.view.AdmissionData\",{});",
                    "        centerContainer=this.getViewport().down(\"#detailsPanel\");",
                    "        //centerDetails=Ext.create(\"CarePortal.view.SystemAdmin\",{});",
                    "        centerContainer.removeAll();",
                    "",
                    "        centerContainer.add(admissionDetails);",
                    "        centerContainer.setTitle('Patient Admission Data');",
                    "",
                    "",
                    "",
                    "        this.getAdmissiondata().down('#pid').setValue(pid);",
                    "        this.getAdmissiondata().down('#pid2').setValue(pid);",
                    "        this.getAdmissiondata().down('#pid3').setValue(pid);",
                    "        this.getAdmissiondata().down('#fileNumber').setValue(sessionStorage.getItem('fileNumber'));",
                    "        this.getAdmissiondata().down('#names').setValue(names);",
                    "        this.getAdmissiondata().down('#dob').setValue(sessionStorage.getItem('dob'));",
                    "        this.getAdmissiondata().down('#gender').setValue(sessionStorage.getItem('gender'));",
                    "        //this.getAdmissiondata().down('#registrationDate').setValue(sessionStorage.getItem('RegistrationDate'));",
                    "//         this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);",
                    "//         this.getAdmissiondata().down('#encounterNr2').setValue(sessionStorage.getItem('encounterNo'));",
                    "//         this.getAdmissiondata().down('#encounterDate').setValue(sessionStorage.getItem('EncounterDate'));",
                    "//         this.getAdmissiondata().down('#encounterDate2').setValue(sessionStorage.getItem('EncounterDate'));",
                    "",
                    "        if(encounterNo===''){",
                    "            this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);",
                    "            this.getAdmissiondata().down('#admissionButtons').setHidden(false);",
                    "            this.getAdmissiondata().down('#menuDiagram').setHidden(true);",
                    "        }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openAdmissionData1",
            "designerId": "c78bc3d8-5638-4324-9d33-d6cbb8979e08"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "diagnosispanel",
                "selector": "diagnosispanel",
                "xtype": "diagnosispanel"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "diagnosispanel",
            "designerId": "6e2cf03f-9483-403e-94fe-4458ff03d9e5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "investigations",
                "selector": "investigations",
                "xtype": "investigations"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "investigations",
            "designerId": "6d40e640-dbad-4f2e-a5f0-e0ad1e0c6309"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "doctorsnotes",
                "selector": "doctorsnotes",
                "xtype": "doctorsnotes"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "doctorsnotes",
            "designerId": "c261a2a8-36e3-42dd-8372-12ad17aeba60"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "radiology",
                "selector": "radiology",
                "xtype": "radiology"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "radiology",
            "designerId": "e4dd3671-7cc4-4a10-89d5-588180762250"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "openTriage",
                "implHandler": [
                    "        //headerPanel=Ext.create(\"CarePortal.view.HeaderPanel\",{});",
                    "",
                    "        triageArea=Ext.create(\"CarePortal.view.TriagePanel\",{});",
                    "        centerContainer=this.getViewport().down(\"#PortalDetails\");",
                    "        centerContainer.removeAll();",
                    "",
                    "        centerContainer.add(triageArea);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openTriage",
            "designerId": "75d148fb-ea2a-4259-b12b-5741b0d1d340"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "viewport",
                "selector": "viewport",
                "xtype": "triagepanel"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "viewport",
            "designerId": "a8da7524-c827-4f2f-aa05-3c8fab66fed9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "announcements",
                "selector": "announcements",
                "xtype": "announcements"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "announcements",
            "designerId": "dd86e424-2dae-4399-a2c3-9e2084792ed9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getAnnouncements",
                "implHandler": [
                    "//newsWindow = Ext.create('CarePortal.view.Announcements', {});",
                    "newsWindow=this.getViewport().down(\"#announcements\");",
                    "",
                    "var newsStore=Ext.data.StoreManager.lookup(\"AnnouncementStore\");",
                    "",
                    "newsStore.load({",
                    "    params: {},",
                    "    callback: function(records, operation, success) {",
                    "        var tpl=new Ext.XTemplate(",
                    "            '<Table id=announcements>',",
                    "            '<tpl for=\"Announcements\">',",
                    "            '<tr>',",
                    "            '<td class=titles>{title}</td></tr>',",
                    "            '<tr><td>{body}</td></tr>',",
                    "            '</tpl>',",
                    "           '</table>'",
                    "        );",
                    "        var data1=newsStore.proxy.reader.rawData;",
                    "        tpl.overwrite(newsWindow.body,data1);",
                    "    },",
                    "    scope: this",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getAnnouncements",
            "designerId": "cb83ffad-d668-4c24-aef3-273e110a8920"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "searchPatients",
                "implHandler": [
                    "",
                    "if(newValue.length>2){",
                    "    //Ext.Msg.alert('test',newValue);",
                    "    var opStore=Ext.data.StoreManager.lookup(\"OPAdmissionsStore\");",
                    "",
                    "        opStore.load({",
                    "            params: {",
                    "                searchParam:newValue",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "            },",
                    "            scope: this",
                    "        });",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchPatients",
            "designerId": "1c08b027-ebb0-4b65-9472-61024ba51314"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "store",
                    "encNo"
                ],
                "fn": "getPortalData",
                "implHandler": [
                    "store.load({",
                    "    params: {",
                    "        encNo:encNo",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },scope:this",
                    "",
                    "});",
                    "",
                    "var data = [];",
                    "",
                    "store.each(function(record) {",
                    "    data.push(record.getData());",
                    "});",
                    "",
                    "return data;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPortalData",
            "designerId": "76d6a19a-aec4-4a3a-9d78-0dbbd209bc96"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openEntryForm",
                "implHandler": [
                    "var callingPanel=button.up('panel').getItemId();",
                    "//Ext.Msg.alert('Form Name',callingPanel);",
                    "if(callingPanel==='vitals'){",
                    "    var entryForm=Ext.create('CarePortal.view.VitalsForm', {});",
                    "    var strTitle=\"Vitals Form\";",
                    "}",
                    "",
                    "var entryWindow=Ext.create('Ext.window.Window', {",
                    "    title: strTitle,",
                    "    resizable:true,",
                    "    minWidth:300,",
                    "    minHeight:300",
                    "});",
                    "",
                    "// this.getHeaderpanel().down('#PatientName').setValue(record.get('Names'));",
                    "// this.getHeaderpanel().down('#Age').setValue(record.get('Age'));",
                    "// this.getHeaderpanel().down('#Gender').setValue(record.get('Gender'));",
                    "// this.getHeaderpanel().down('#PID').setValue(record.get('Pid'));",
                    "// this.getHeaderpanel().down('#EncounterNo').setValue(record.get('EncounterNo'));",
                    "",
                    "entryWindow.add(entryForm);",
                    "entryWindow.show();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openEntryForm",
            "designerId": "59f1019b-78d1-4ffb-8fea-45267f4ba9ea"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "vitalsform",
                "selector": "vitalsform",
                "xtype": "vitalsform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "vitalsform",
            "designerId": "596d4bac-82ce-4104-960b-189632892ce5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "navPanel",
                    "eOpts"
                ],
                "fn": "buildMenus",
                "implHandler": [
                    "var accordPanel, menu,menuItem,groupID;",
                    "",
                    "var strMenusStore=Ext.data.StoreManager.lookup('MenusStore');",
                    "",
                    "strMenusStore.load(function(records,operation,success){",
                    "",
                    "    Ext.each(records,function(root) {",
                    "",
                    "        menu = Ext.create(\"Ext.menu.Menu\", {",
                    "            floating: false,",
                    "            title:root.get('menuName'),",
                    "            icon:root.get('sImage'),",
                    "            bodyStyle: 'background:#e8eaed; color:white;!important;',",
                    "            header: {",
                    "                style: 'background:#1b5f87;color:white;font-weight:bold;'",
                    "            }",
                    "        });",
                    "        navPanel.add(menu);",
                    "",
                    "        Ext.each(root, function (rec){",
                    "            Ext.each(rec.get('subMenus'), function (items) {",
                    "                //console.log(items);",
                    "                menuItem = Ext.create(\"Ext.menu.Item\", {",
                    "                    text: items.subMenuName,",
                    "                    icon:items.sImage,",
                    "                    itemId:items.nr,",
                    "                    link:items.url,",
                    "                    dispType:items.dispType,",
                    "                    style:'font-size: 28px;'",
                    "                });",
                    "                menu.add(menuItem);",
                    "            });",
                    "",
                    "        });",
                    "",
                    "",
                    "    });",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "buildMenus",
            "designerId": "815461b4-8c0c-48fa-abd1-b13e8900976a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "menu",
                    "item",
                    "eOpts"
                ],
                "fn": "getSelectedMenu",
                "implHandler": [
                    "//Ext.Msg.alert('test','test '+item.link + '-'+item.itemId);",
                    "    centerContainer=this.getViewport().down(\"#detailsPanel\");",
                    "if(item.dispType==1){",
                    "",
                    "    var shiftStatus=localStorage.getItem('shiftStatus');",
                    "",
                    "    if(item.link==='CashSales' && shiftStatus==='Closed' ){",
                    "",
                    "                centerDetails=Ext.create(\"CarePortal.view.StartShift\",{});",
                    "                centerContainer.removeAll();",
                    "                var containterWindows=Ext.create('Ext.window.Window', {",
                    "                    title: 'Start Shift',",
                    "                    resizable:false,",
                    "                    closable:true",
                    "                });",
                    "",
                    "                containterWindows.add(centerDetails);",
                    "                containterWindows.show();",
                    "                Ext.Msg.alert('Info','You have not opened a Shift: Status='+shiftStatus);",
                    "    }else{",
                    "        ",
                    "        centerDetails=Ext.create(\"CarePortal.view.\"+item.link,{});",
                    "        centerContainer.removeAll();",
                    "",
                    "        centerContainer.add(centerDetails);",
                    "        centerContainer.setTitle(item.text);",
                    "",
                    "    }",
                    "",
                    "",
                    "    //centerDetails.query('textfield[name=\"formStatus\"]')[0].setValue('insert');",
                    "",
                    "}else if(item.dispType==2){",
                    "",
                    "    centerDetails=Ext.create(\"CarePortal.view.\"+item.link,{});",
                    "    centerContainer.removeAll();",
                    "    var containterWindows=Ext.create('Ext.window.Window', {",
                    "        title: item.text,",
                    "        resizable:false,",
                    "        closable:true",
                    "    });",
                    "",
                    "    containterWindows.add(centerDetails);",
                    "    containterWindows.show();",
                    "",
                    "    //centerDetails.query('textfield[name=\"formStatus\"]')[0].setValue('insert');",
                    "",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getSelectedMenu",
            "designerId": "8d24ec35-5d5a-414e-8cb7-0233700cdde8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "patientinfo",
                "selector": "patientinfo",
                "xtype": "patientinfo"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "patientinfo",
            "designerId": "d547161d-894a-4804-8726-414a218f838d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "options"
                ],
                "fn": "getPressedKey",
                "implHandler": [
                    "   if (e.getKey() == e.ENTER) {",
                    "        this.searchPatient();",
                    "    }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPressedKey",
            "designerId": "5f596a20-6d2f-4bb7-8382-6c291eddc0d9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openRegister",
                "implHandler": [
                    "register=Ext.create(\"CarePortal.view.Register\",{});",
                    "",
                    "var containterWindows=Ext.create('Ext.window.Window', {",
                    "    title: \"Patient Registration\",",
                    "    resizable:false,",
                    "    closable:true",
                    "});",
                    "",
                    "containterWindows.add(register);",
                    "containterWindows.show();",
                    "",
                    "register.down('#formStatus').setValue(\"Insert\");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openRegister",
            "designerId": "a5b4bf2a-dc01-4567-a63e-82b21ad6e245"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "getViewPatient",
                "implHandler": [
                    "//Ext.Msg.alert(\"Button clicked\", \"Hey! \" +  button.lookupViewModel());",
                    "var rec = button.lookupViewModel().get('record');",
                    "",
                    "var sourceForm=button.up('grid').getItemId();",
                    "",
                    "if(sourceForm==='patientInfo'){",
                    "    encounterNo=rec.get('CurrentEncounter');",
                    "    var names=rec.get('FirstName')+' '+rec.get('LastName')+ ' '+rec.get('SurName');",
                    "",
                    "}else if(sourceForm==='OutpatientAdmissions'){",
                    "    encounterNo=rec.get('EncounterNo');",
                    "    var names=rec.get('Names');",
                    "",
                    "}",
                    "",
                    "var encStore =Ext.data.StoreManager.lookup('EncountersListStore');",
                    "encStore.load({",
                    "    params: {",
                    "        pid: rec.get('Pid')",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "",
                    "admissionDetails=Ext.create(\"CarePortal.view.AdmissionData\",{});",
                    "centerContainer=this.getViewport().down(\"#detailsPanel\");",
                    "//centerDetails=Ext.create(\"CarePortal.view.SystemAdmin\",{});",
                    "centerContainer.removeAll();",
                    "",
                    "centerContainer.add(admissionDetails);",
                    "centerContainer.setTitle('Patient Admission Data');",
                    "",
                    "this.getStatusLogs(encounterNo);",
                    "",
                    "this.getAdmissiondata().down('#pid').setValue(rec.get('Pid'));",
                    "this.getAdmissiondata().down('#pid2').setValue(rec.get('Pid'));",
                    "this.getAdmissiondata().down('#pid3').setValue(rec.get('Pid'));",
                    "this.getAdmissiondata().down('#fileNumber').setValue(rec.get('fileNumber'));",
                    "this.getAdmissiondata().down('#names').setValue(names);",
                    "this.getAdmissiondata().down('#dob').setValue(rec.get('DateOfBirth'));",
                    "this.getAdmissiondata().down('#gender').setValue(rec.get('Gender'));",
                    "this.getAdmissiondata().down('#registrationDate').setValue(rec.get('RegistrationDate'));",
                    "this.getAdmissiondata().down('#encounterNr').setValue(encounterNo);",
                    "this.getAdmissiondata().down('#encounterNr2').setValue(encounterNo);",
                    "this.getAdmissiondata().down('#encounterDate').setValue(rec.get('EncounterDate'));",
                    "this.getAdmissiondata().down('#encounterDate2').setValue(rec.get('EncounterDate'));",
                    "",
                    "if(encounterNo===''){",
                    "    this.getAdmissiondata().down('#admissionStatus').setValue('No Admission Data for '+ names);",
                    "    this.getAdmissiondata().down('#admissionButtons').setHidden(false);",
                    "    this.getAdmissiondata().down('#menuDiagram').setHidden(true);",
                    "}else{",
                    "    this.getAdmissiondata().down('#admissionStatus').setValue('The Patient is Currentlly Admited in ');",
                    "    this.getAdmissiondata().down('#admissionButtons').setHidden(true);",
                    "    this.getAdmissiondata().down('#menuDiagram').setHidden(false);",
                    "    if(rec.get('EncounterClass')==1){",
                    "        this.getAdmissiondata().down('#inpatientDetails').setHidden(false);",
                    "        this.getAdmissiondata().down('#inpatient').setValue(rec.get('Department'));",
                    "        this.getAdmissiondata().down('#ward').setValue(rec.get('ConsultationFee'));",
                    "        this.getAdmissiondata().down('#financeClass').setValue(rec.get('PaymentMode'));",
                    "",
                    "    }else{",
                    "        this.getAdmissiondata().down('#outpatientDetails').setHidden(false);",
                    "        this.getAdmissiondata().down('#outpatient').setValue(rec.get('EncounterClass'));",
                    "        this.getAdmissiondata().down('#department').setValue(rec.get('Department'));",
                    "        this.getAdmissiondata().down('#consultationFee').setValue(rec.get('ConsultationFee'));",
                    "        this.getAdmissiondata().down('#financePlan').setValue(rec.get('PaymentMode'));",
                    "    }",
                    "}",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getViewPatient",
            "designerId": "a2b8e6d1-8493-4e30-a3e1-d7f4306e77c4"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "patientstatus",
                "selector": "patientstatus",
                "xtype": "patientstatus"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "patientstatus",
            "designerId": "d2cbbe11-c80d-429e-9a76-2ae15aa39f71"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "admissiondata",
                "selector": "admissiondata",
                "xtype": "admissiondata"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "admissiondata",
            "designerId": "6b2c020e-58a1-4c00-b5cd-00c8b2fe3af8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "searchPatient",
                "implHandler": [
                    "var searchParam=this.getPatientinfo().down('#searchBox').getValue();",
                    "var patientsStore =Ext.data.StoreManager.lookup('PatientDetails');",
                    "patientsStore.load({",
                    "    params: {",
                    "        searchParam: searchParam",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "",
                    "    },",
                    "    scope: this",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchPatient",
            "designerId": "d5c8ff3c-444b-4e78-9fe1-ff59cf16b939"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "showAdmissionform",
                "implHandler": [
                    "//Ext.Msg.alert('Test',button.getItemId());",
                    "if(button.getItemId()=='cmdAdmitInpatient'){",
                    "    this.getAdmissiondata().down('#admitInpatient').setHidden(false);",
                    "    this.getAdmissiondata().down('#admitOutpatient').setHidden(true);",
                    "    this.getAdmissiondata().down('#admitInpatient').down('#sourcePanel').setValue('direct');",
                    "}else if(button.getItemId()=='cmdAdmitOutpatient'){",
                    "     this.getAdmissiondata().down('#admitOutpatient').setHidden(false);",
                    "     this.getAdmissiondata().down('#admitInpatient').setHidden(true);",
                    "}",
                    "",
                    "// var itemsStore =Ext.data.StoreManager.lookup('Consultations');",
                    "//         itemsStore.load({",
                    "//             params: {",
                    "//                 searchParam: 'Yes'",
                    "//             },",
                    "//             callback: function(records, operation, success) {",
                    "",
                    "//             },",
                    "//             scope: this",
                    "",
                    "//         });",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showAdmissionform",
            "designerId": "b36201f4-c3c5-4e7c-8e2c-1459b16142f4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "cancelAdmission",
                "implHandler": [
                    "//if(button.getItemId('#cmdAdmitInpatient')){",
                    "    this.getAdmissiondata().down('#admitInpatient').setHidden(true);",
                    "    this.getAdmissiondata().down('#admitOutpatient').setHidden(true);",
                    "",
                    "// }else if(button.getItemid('#cmdAdmitOutpatient')){",
                    "//     this.getAdmissiondata().down('#admitOutpatient').setHidden(false);",
                    "//     this.getAdmissiondata().down('#admitInpatient').setHidden(true);",
                    "// }"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "cancelAdmission",
            "designerId": "936d1c2a-6df1-4fd9-9514-d9721394f8a6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "savePatient",
                "implHandler": [
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "//var entryForm=form.getItemId();",
                    "var pid=button.up('panel').down('#Pid').getValue();",
                    "var name_first=button.up('panel').down('#name_first').getValue();",
                    "var name_2=button.up('panel').down('#name_2').getValue();",
                    "var name_last=button.up('panel').down('#name_last').getValue();",
                    "var names=name_first+' '+name_2+' '+name_last;",
                    "",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        params:{",
                    "            pid:pid",
                    "        },",
                    "        success: function (form, action) {",
                    "            Ext.Msg.alert('Thank you!', 'The Patient has been saved Successfully.');",
                    "            sessionStorage.setItem(\"pid\",button.up('panel').down('#Pid').getValue());",
                    "            sessionStorage.setItem(\"pid2\",button.up('panel').down('#Pid').getValue());",
                    "            sessionStorage.setItem(\"pid3\",button.up('panel').down('#Pid').getValue());",
                    "",
                    "            sessionStorage.setItem(\"fileNumber\",button.up('panel').down('#fileNumber').getValue());",
                    "            sessionStorage.setItem(\"names\",names);",
                    "            sessionStorage.setItem(\"dob\",button.up('panel').down('#date_birth').getValue());",
                    "            sessionStorage.setItem(\"gender\",button.up('panel').down('#sex').getValue());",
                    "//             sessionStorage.setItem(\"registrationDate\",button.up('panel').down('#registrationDate').getValue());",
                    "            sessionStorage.setItem(\"paymentMethod\",button.up('panel').down('#insurance').getValue());",
                    "",
                    "            this.getLastPatient();",
                    "            button.up('form').getForm().reset();",
                    "            //             button.up('window').hide();",
                    "            //this.getViewPatient(button);",
                    "            this.openAdmissionData1();",
                    "",
                    "            var patientsStore =Ext.data.StoreManager.lookup('PatientDetails');",
                    "            patientsStore.load({",
                    "                params:{",
                    "                    pid:pid",
                    "                }",
                    "            });",
                    "",
                    "        },",
                    "        failure: function (form, action) {",
                    "            var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "            Ext.Msg.alert('Failed', 'Could not save Patient. \\n Error=' + jsonResp.error);",
                    "        },",
                    "        scope:this",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "savePatient",
            "designerId": "ed6c6e74-3b57-4951-962a-f4553d4166ea"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveOpAdmission",
                "implHandler": [
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "        //var entryForm=form.getItemId();",
                    "        if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "            form.submit({",
                    "                success: function (form, action) {",
                    "                    Ext.Msg.alert('Thank you!', 'The Patient has been Admitted Successfully.');",
                    "                    button.up('panel').getForm().reset();",
                    "                    button.up('panel').hide();",
                    "",
                    "",
                    "                    centerDetails=Ext.create(\"CarePortal.view.OutpatientList\",{});",
                    "                    centerContainer.removeAll();",
                    "",
                    "                    centerContainer.add(centerDetails);",
                    "                    centerContainer.setTitle('Outpatient List');",
                    "//                     this.getViewPatient(button); ",
                    "                    var opStore =Ext.data.StoreManager.lookup('OPAdmissionsStore');",
                    "                     opStore.load({});",
                    "",
                    "                                    },",
                    "                failure: function (form, action) {",
                    "                    var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                    Ext.Msg.alert('Failed', 'Could not save Patient. \\n Error=' + jsonResp.error);",
                    "                }",
                    "            });",
                    "        } else { // display error alert if the data is invalid",
                    "            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "        }",
                    "",
                    "// this.getAdmissiondata().down('#admissionButtons').setHidden(true);",
                    "// this.getAdmissiondata().down('#outpatientDetails').setHidden(false);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveOpAdmission",
            "designerId": "b1d71b50-8aea-49f9-b823-19cc2513eaf5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveForm",
                "implHandler": [
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "//var entryForm=form.getItemId();",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function (form, action) {",
                    "            Ext.Msg.alert('Thank you!', 'The Vitals has been saved Successfully.');",
                    "            button.up('form').getForm().reset();",
                    "            button.up('window').hide();",
                    "",
                    "        },",
                    "        failure: function (form, action) {",
                    "            var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "            Ext.Msg.alert('Failed', 'Could not save Vitals. \\n Error=' + jsonResp.error);",
                    "        }",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveForm",
            "designerId": "a8601184-b06a-45ec-8da3-e90791ef7084"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveIpAdmission",
                "implHandler": [
                    " var form = button.up('panel').getForm(); // get the basic form",
                    "        //var entryForm=form.getItemId();",
                    "        if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "            form.submit({",
                    "                success: function (form, action) {",
                    "                    Ext.Msg.alert('Thank you!', 'The Admission has been saved Successfully.');",
                    "                    button.up('form').getForm().reset();",
                    "                    button.up('form').hide();",
                    "",
                    "                },",
                    "                failure: function (form, action) {",
                    "                    var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                    Ext.Msg.alert('Failed', 'Could not save Admission Data. \\n Error=' + jsonResp.error);",
                    "                }",
                    "            });",
                    "        } else { // display error alert if the data is invalid",
                    "            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "        }",
                    "",
                    "var srcPanel=button.up('form').down('#sourcePanel').getValue();",
                    "",
                    "if(srcPanel===\"direct\"){",
                    "    this.getAdmissiondata().down('#admissionButtons').setHidden(true);",
                    "    this.getAdmissiondata().down('#admissionDetails').setHidden(false);",
                    "",
                    "}else if(srcPanel===\"transfer\"){",
                    "",
                    "    var pid=button.up('form').down('#pid').getValue();",
                    "    var encNo=button.up('form').down('#encounter_nr').getValue();",
                    "    var names=button.up('form').down('Names').getValue();",
                    "    this.openAdmissionData1(pid,encNo,names);",
                    "    this.getAdmissiondata().down('#admissionButtons').setHidden(true);",
                    "    this.getAdmissiondata().down('#admissionDetails').setHidden(false);",
                    "}",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveIpAdmission",
            "designerId": "a9acd9a9-70d3-49e7-a0d7-e2e6d2d7bbac"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "admitinpatient",
                "selector": "admitinpatient",
                "xtype": "admitinpatient"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "admitinpatient",
            "designerId": "4a5ecdf6-644e-40b9-8675-0df6e3bc279f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "admitoutpatient",
                "selector": "admitoutpatient",
                "xtype": "admitoutpatient"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "admitoutpatient",
            "designerId": "bc2078d3-ede2-431c-bc03-80420faebfde"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component, eOpts"
                ],
                "fn": "createVitals",
                "implHandler": [
                    "",
                    "//Ext.Msg.alert('Thank you!',this.getPatientstatus().down('#pid'));",
                    "component.getEl().on('click', function() {",
                    "  // Ext.Msg.alert('Thank you!',component.up('panel').up('panel').getItemId());",
                    "",
                    "        var vitals=Ext.create(\"CarePortal.view.VitalsForm\",{});",
                    "        //centerContainer.removeAll();",
                    "        var containterWindows=Ext.create('Ext.window.Window', {",
                    "            title:\"Vitals Entry Form\",",
                    "            resizable:false,",
                    "            closable:true",
                    "        });",
                    "",
                    "        containterWindows.add(vitals);",
                    "        containterWindows.show();",
                    "",
                    "    vitals.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "    vitals.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "   vitals.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());",
                    "    vitals.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    "",
                    "",
                    "});",
                    "",
                    "",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createVitals",
            "designerId": "d76fd678-b119-4c3b-abb2-5871f2f1f4bb"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "doctorsnotesentry",
                "selector": "doctorsnotesentry",
                "xtype": "dontorsnotesentry"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "doctorsnotesentry",
            "designerId": "d7607248-9cf6-487d-886e-e29598d394f6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "wardoccupancy",
                "selector": "wardoccupancy",
                "xtype": "wardoccupancy"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "wardoccupancy",
            "designerId": "a8fb89cd-76c0-4e1f-b4a0-aa76dc9a15eb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "createNotes",
                "implHandler": [
                    " component.getEl().on('click', function() {",
                    "",
                    "                //var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');",
                    "                 //    icd10Store.load({});",
                    "                var notes=Ext.create(\"CarePortal.view.Notes\",{});",
                    "                var containterWindows=Ext.create('Ext.window.Window', {",
                    "                    title:\"Complaints Entry Form\",",
                    "                    resizable:false,",
                    "                    closable:true",
                    "                });",
                    "",
                    "                containterWindows.add(notes);",
                    "                containterWindows.show();",
                    "             var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();",
                    "",
                    "            notes.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "            notes.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "            notes.down('#encounterNo').setValue(encNr);",
                    "            notes.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    "",
                    "     var control = Ext.create('CarePortal.controller.Main');",
                    "        control.loadNotes(encNr,component);",
                    "        });",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createNotes",
            "designerId": "71b20798-9a38-4ce2-aebc-1a03d117295c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component,eOpts"
                ],
                "fn": "createDiagnosis",
                "implHandler": [
                    "component.getEl().on('click', function() {",
                    "",
                    "    var diagnosis=Ext.create(\"CarePortal.view.Diagnosis\",{});",
                    "    var containterWindows=Ext.create('Ext.window.Window', {",
                    "        title:\"Diagnosis Entry Form\",",
                    "        resizable:false,",
                    "        closable:true",
                    "    });",
                    "    ",
                    "    var dob=component.up('panel').up('panel').down('#dob').getValue();",
                    "    ",
                    "    var icd10Store =Ext.data.StoreManager.lookup('DiseaseCodeStore');",
                    "    icd10Store.load({",
                    "        params:{",
                    "            dob:dob",
                    "        }",
                    "    });",
                    "",
                    "",
                    "    containterWindows.add(diagnosis);",
                    "    containterWindows.show();",
                    "",
                    "    var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();",
                    "    diagnosis.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "    diagnosis.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "    diagnosis.down('#encounterNo').setValue(encNr);",
                    "    diagnosis.down('#Dob').setValue(dob);",
                    "",
                    "     var control = Ext.create('CarePortal.controller.Main');",
                    "        control.loadDiagnosis(encNr,component);",
                    "",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createDiagnosis",
            "designerId": "a1593cf5-294b-49da-bd6a-084bcd4b5fcf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "createLabTest",
                "implHandler": [
                    " component.getEl().on('click', function() {",
                    "",
                    "     var labtest=Ext.create(\"CarePortal.view.LabTests\",{});",
                    "     var containterWindows=Ext.create('Ext.window.Window', {",
                    "         title:\"lab Tests Entry Form\",",
                    "         resizable:false,",
                    "         closable:true",
                    "     });",
                    "",
                    "     containterWindows.add(labtest);",
                    "     containterWindows.show();",
                    "     ",
                    "     var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();",
                    "",
                    "     labtest.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "     labtest.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "     labtest.down('#encounterNo').setValue(encNr);",
                    "     labtest.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    " ",
                    "     var control = Ext.create('CarePortal.controller.Main');",
                    "       control.loadLabTest(encNr);",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createLabTest",
            "designerId": "1c1ffafa-992d-4497-81d6-42ee267e1b5c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "createRadiology",
                "implHandler": [
                    " component.getEl().on('click', function() {",
                    "",
                    "     var radiology=Ext.create(\"CarePortal.view.Radiology\",{});",
                    "     var containterWindows=Ext.create('Ext.window.Window', {",
                    "         title:\"Radiology Entry Form\",",
                    "         resizable:false,",
                    "         closable:true",
                    "     });",
                    "",
                    "     containterWindows.add(radiology);",
                    "     containterWindows.show();",
                    "",
                    "     var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();",
                    "",
                    "     radiology.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "     radiology.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "     radiology.down('#encounterNo').setValue(encNr);",
                    "     radiology.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    "",
                    "      var control = Ext.create('CarePortal.controller.Main');",
                    "                control.loadRadiology(encNr);",
                    "",
                    "",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createRadiology",
            "designerId": "c05a2463-2844-44cb-9bcf-032f30a3fc19"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component,eOpts"
                ],
                "fn": "createServices",
                "implHandler": [
                    " component.getEl().on('click', function() {",
                    "",
                    "     var services=Ext.create(\"CarePortal.view.Services\",{});",
                    "     var containterWindows=Ext.create('Ext.window.Window', {",
                    "         title:\"Service and Procedures Entry Form\",",
                    "         resizable:false,",
                    "         closable:true",
                    "     });",
                    "",
                    "     containterWindows.add(services);",
                    "     containterWindows.show();",
                    "     var encNr=component.up('panel').up('panel').down('#encounterNr').getValue();",
                    "",
                    "     services.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "     services.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "     services.down('#encounterNo').setValue(encNr);",
                    "     services.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    "",
                    "     var control = Ext.create('CarePortal.controller.Main');",
                    "        control.loadServices(encNr,component);",
                    "     //this.loadServices(encNr,component);",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createServices",
            "designerId": "856add17-905b-49ee-8049-0004f8d4a115"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "createPrescription",
                "implHandler": [
                    " component.getEl().on('click', function() {",
                    "",
                    "     var prescription=Ext.create(\"CarePortal.view.PrescriptionForm\",{});",
                    "     var containterWindows=Ext.create('Ext.window.Window', {",
                    "         title:\"Prescriptions Entry Form\",",
                    "         resizable:false,",
                    "         closable:true",
                    "     });",
                    "",
                    "     containterWindows.add(prescription);",
                    "     containterWindows.show();",
                    "",
                    "     prescription.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "     prescription.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "     prescription.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());",
                    "     prescription.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    " });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createPrescription",
            "designerId": "fdd6cf50-5010-4399-91ff-1f259df4048f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "addComplaints",
                "implHandler": [
                    "var pid=button.up('form').down('#pid').getValue();",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "var complaint=button.up('form').down('#type_nr').getValue();",
                    "var comment=button.up('form').down('#notes').getValue();",
                    "",
                    "var notesPanel=button.up('form').down('#notesPanel');",
                    "",
                    "        Ext.Ajax.request({",
                    "             url: 'data/getDataFunctions.php?task=saveComplaints',",
                    "            params: {",
                    "                pid:pid,",
                    "                encNr:encounterNo,",
                    "                type_nr:complaint,",
                    "                notes:comment",
                    "            },",
                    "            success: function(response){",
                    "               var resp = Ext.JSON.decode(response.responseText);",
                    "                //Ext.Msg.alert('Error',resp.Error);",
                    "",
                    "                //this.getNotes(encounterNo);",
                    "",
                    "            },",
                    "            scope:this",
                    "        });",
                    "this.loadNotes(encounterNo,notesPanel);",
                    "//this.getNotes(encounterNo);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addComplaints",
            "designerId": "8a83e8b5-06e7-4901-8010-7c41c362358b"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "notes",
                "selector": "notes",
                "xtype": "notes"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "notes",
            "designerId": "3e2ece85-f1e7-4f22-85b0-ccb60804ce03"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encounterNr,component"
                ],
                "fn": "loadNotes",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "notesPanel=this.getNotes().down(\"#notesPanel\");",
                    "",
                    "",
                    "var notesStore=Ext.data.StoreManager.lookup(\"NotesStore\");",
                    "",
                    "notesStore.load({",
                    "    params: {",
                    "        encNr:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=notes>',",
                    "                '<tr><td colspan=4 class=titles>DOCTORS NOTES & COMPLAINTS</td></tr>',",
                    "                        '<tr><td class=titles>Note Type</td>',",
                    "                            '<td class=titles>Note</td>',",
                    "                            '<td class=titles>Time</td>',",
                    "                            '<td class=titles>TreatedBy</td>',",
                    "                 '<tpl for=\".\">',",
                    "                        '<tr>',",
                    "                            '<td>{NotesType}</td>',",
                    "                            '<td style=\"width:400px;\"><div class=content>{Notes}</div></td>',",
                    "                            '<td>{CreateTime}</td>',",
                    "                            '<td>{TreatedBy}</td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        notesStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(notesPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadNotes",
            "designerId": "c1010849-c15f-4e56-895e-350509f1af5d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component"
                ],
                "fn": "loadAllergies",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "allergiesPanel=this.getRegister().down(\"#allergiesPanel\");",
                    "",
                    "",
                    "var allergiesStore=Ext.data.StoreManager.lookup(\"AllergiesStore\");",
                    "",
                    "allergiesStore.load({",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=notes>',",
                    "                '<tr><td colspan=4 class=titles>ALLERGIES</td></tr>',",
                    "                        '<tr><td class=titles>Allergy</td>',",
                    "                            '<td class=titles>Description</td>',",
                    "                 '<tpl for=\".\">',",
                    "                        '<tr>',",
                    "                            '<td>{Allergy}</td>',",
                    "                            '<td style=\"width:400px;\"><div class=content>{Allergy}</div></td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        allergiesStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(allergiesPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadAllergies",
            "designerId": "c618b2ee-bc53-4249-a6f5-ad1ce4a175bd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encounterNr,component"
                ],
                "fn": "loadServices",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "servicesPanel=this.getServices().down(\"#servicesPanel\");",
                    "",
                    "",
                    "var serviceStore=Ext.data.StoreManager.lookup(\"ProceduresAndServices\");",
                    "",
                    "serviceStore.load({",
                    "    params: {",
                    "        encNr:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=notes>',",
                    "                '<tr><td colspan=4 class=titles>PATIENT SERVICES AND PROCEDURES</td></tr>',",
                    "                        '<tr><td class=titles>Date</td>',",
                    "                            '<td class=titles>Service</td>',",
                    "                            '<td class=titles>Cost</td>',",
                    "                            '<td class=titles>Comment</td>',",
                    "                            '<td class=titles>TreatedBy</td>',",
                    "                 '<tpl for=\".\">',",
                    "                        '<tr>',",
                    "                            '<td>{InputDate}</td>',",
                    "                            '<td style=\"width:400px;\"><div class=content>{Description}</div></td>',",
                    "                            '<td>{Total}</td>',",
                    "                            '<td>{Comment}</td>',",
                    "                            '<td>{InputBy}</td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        serviceStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(servicesPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadServices",
            "designerId": "b20fa87b-cbd6-4dbb-856a-ea552dc1a46a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encounterNr,component"
                ],
                "fn": "loadDiagnosis",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "diagnosisPanel=this.getDiagnosis().down(\"#diagnosisPanel\");",
                    "encounterNr=this.getDiagnosis().down(\"#encounterNo\").getValue();",
                    "",
                    "var diagnosisStore=Ext.data.StoreManager.lookup(\"DiagnosisStore\");",
                    "",
                    "diagnosisStore.load({",
                    "    params: {",
                    "        encNr:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=notes>',",
                    "                '<tr><td colspan=4 class=titles>PATIENT DIAGNOSIS</td></tr>',",
                    "                        '<tr><td class=titles>Code</td>',",
                    "                            '<td class=titles>Description</td>',",
                    "                            '<td class=titles>Time</td>',",
                    "                            '<td class=titles>Type</td>',",
                    "                 '<tpl for=\".\">',",
                    "                        '<tr>',",
                    "                            '<td>{Code}</td>',",
                    "                            '<td style=\"width:400px;\"><div class=content>{Description}</div></td>',",
                    "                            '<td>{Time}</td>',",
                    "                            '<td>{Type}</td>',",
                    "                        '</tr>',",
                    "                '</tpl>',",
                    "                '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        diagnosisStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(diagnosisPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadDiagnosis",
            "designerId": "ab00786f-2a37-4d63-a78d-bf913bcce05d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "getSelectedPatient",
                "implHandler": [
                    "component.getEl().on('click', function(e,t) {",
                    "       e.stopEvent();",
                    "     // Ext.Msg.alert('Test','Select Pid is '+t.id);",
                    "       var assignBeds=Ext.create(\"CarePortal.view.AssignBeds\",{});",
                    "       var containterWindows=Ext.create('Ext.window.Window', {",
                    "           title:\"Assign Occupant\",",
                    "           resizable:true,",
                    "           closable:true,",
                    "           height:600,",
                    "           width:1000,",
                    "           layout : {",
                    "                type: 'vbox',",
                    "                align: 'stretch'",
                    "           }",
                    "       });",
                    "",
                    "",
                    "        var assMsg=assignBeds.down('#assMsg').getValue();",
                    "        var ward=component.up('grid').down('#wardTitle').getValue();",
                    "        var wardID=component.up('grid').down('#wardID').getValue();",
                    "        assignBeds.down('#ward').setValue(ward);",
                    "        assignBeds.down('#assMsg').setValue(assMsg +\" PID \" + t.innerHTML + \".Thank You\");",
                    "        assignBeds.down('#wardID').setValue(wardID);",
                    "        assignBeds.down('#encNo').setValue(t.id);",
                    "",
                    "",
                    "             containterWindows.add(assignBeds);",
                    "             containterWindows.show();",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "   });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getSelectedPatient",
            "designerId": "88b33eac-c163-4918-a646-578097065c71"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "assignbeds",
                "selector": "assignbeds",
                "xtype": "assignbeds"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "assignbeds",
            "designerId": "1cc39378-4cdd-4bcc-b851-c3db2592b90c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "gridpanel",
                    "record",
                    "item",
                    "index",
                    "e",
                    "options"
                ],
                "fn": "assignBed",
                "implHandler": [
                    "Ext.Msg.alert('Test','ward No is '+this.getAssignbeds().down('#encNo').getValue());",
                    "if(record.get('PID')===''){",
                    "  //   var columns = grid.getView().headerCt.getGridColumns();",
                    "",
                    "",
                    "    var encNo=record.get('EncounterNo');",
                    "    var wrdNo=this.getAssignbeds().down('#wardID').getValue();",
                    "    var rm=record.get('RoomNo');",
                    "    var bd=record.get('BedNo');",
                    "",
                    "     Ext.Ajax.request({",
                    "            url: 'data/getDataFunctions.php?task=assignBed',",
                    "            waitMsg: 'wait while we assign a bed ...',",
                    "         params:{",
                    "             encNr:this.getAssignbeds().down('#encNo').getValue(),",
                    "             wrdNo:wrdNo,",
                    "             roomNo:rm,",
                    "             bed:bd",
                    "         },",
                    "            success: function(response){",
                    "                var text = response.responseText;",
                    "",
                    "                Ext.Msg.alert('Success','Successfully Assigned Bed to '+this.getAssignbeds().down('#encNo').getValue());",
                    "",
                    "                var occupancyStore=Ext.data.StoreManager.lookup(\"OccupancyStore\");",
                    "                occupancyStore.load({",
                    "                    params:{",
                    "                       wrdNo:wrdNo",
                    "                    }",
                    "                });",
                    "",
                    "                var waitingStore=Ext.data.StoreManager.lookup(\"WaitingListStore\");",
                    "                waitingStore.load({",
                    "                     params: {",
                    "                        wrdNo:wrdNo",
                    "                    }",
                    "                });",
                    "",
                    "",
                    "",
                    "            },",
                    "            failure:function(response){",
                    "               // var resp = JSON.parseJSON(response);",
                    "                Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');",
                    "            },",
                    "              scope: this",
                    "        });",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "assignBed",
            "designerId": "3be6aad0-6ddc-462c-b3fc-a83a89e0a80e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "login",
                "implHandler": [
                    "//Ext.Msg.alert('login',button.up('form').down('#username').getValue());",
                    "",
                    "var username=button.up('form').down('#username').getValue();",
                    "var password=button.up('form').down('#password').getValue();",
                    "var userGroup=button.up('form').down('#userGroup').getValue();",
                    "",
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        success: function (form, action) {",
                    "",
                    "            localStorage.setItem(\"LoggedIn\",true);",
                    "            localStorage.setItem(\"UserName\",username);",
                    "            this.getLogin().destroy();",
                    "            this.openHome();",
                    "",
                    "        },",
                    "        failure: function (form, action) {",
                    "            var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "            Ext.Msg.alert('Error', 'Problem Signing in. \\n Error=' + jsonResp.Error);",
                    "        },",
                    "        scope:this",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}",
                    "",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "login",
            "designerId": "f6f0e8bf-421a-491c-808e-34e06f4a6ec7"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "login",
                "selector": "login",
                "xtype": "login"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "login",
            "designerId": "e251940b-0260-461c-85ff-9f3603d5e471"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "cashsales",
                "selector": "cashsales",
                "xtype": "cashsales"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "cashsales",
            "designerId": "4e977b87-8327-4ede-850e-9e11da80d158"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openSystemAdmin",
                "implHandler": [
                    "centerContainer=this.getViewport().down(\"#detailsPanel\");",
                    "centerDetails=Ext.create(\"CarePortal.view.SystemAdmin\",{});",
                    "centerContainer.removeAll();",
                    "",
                    "centerContainer.add(centerDetails);",
                    "centerContainer.setTitle('System Admin');"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openSystemAdmin",
            "designerId": "a6041c06-f04d-401b-9fef-ada6800b25dd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "systemadmin",
                "selector": "systemadmin",
                "xtype": "systemadmin"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "systemadmin",
            "designerId": "3c9ce0a9-6aaa-43db-93cb-7f94d95c1928"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "cashsales",
                "selector": "cashsales",
                "xtype": "cashsales"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "cashsales",
            "designerId": "81a25c88-b118-482e-96b5-d11354759417"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "prescriptionform",
                "selector": "prescriptionform",
                "xtype": "prescriptionform"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "prescriptionform",
            "designerId": "4c532f70-0c5c-44d8-9f71-71d05128985a"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "cashsalesadj",
                "selector": "cashsalesadj",
                "xtype": "cashsalesadj"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "cashsalesadj",
            "designerId": "5d7b04e6-1f86-4aab-b737-87154d11513d"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "payments",
                "selector": "payments",
                "xtype": "payments"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "payments",
            "designerId": "17a907cb-7bdf-497a-9f22-2720b3696001"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "paymentsadj",
                "selector": "paymentsadj",
                "xtype": "paymentsadj"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "paymentsadj",
            "designerId": "1b92ed5e-9222-4e45-b1b4-46504c313e4d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "logout",
                "implHandler": [
                    " localStorage.setItem(\"LoggedIn\", false);",
                    "this.getViewport().destroy();",
                    "Ext.create(\"CarePortal.view.Login\",{});",
                    "",
                    "",
                    "",
                    "//Ext.widget(homeArea);",
                    "// centerContainer=homeArea.down(\"#PortalDetails\");",
                    "// centerContainer.removeAll();",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "logout",
            "designerId": "087e743a-fc1e-40d5-833f-13a8dd2d482f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "checkLoginStatus",
                "implHandler": [
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "checkLoginStatus",
            "designerId": "8b5015a9-aba7-490f-a4dd-cf36a824f6c6"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "labitems",
                "selector": "labitems",
                "xtype": "labitems"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "labitems",
            "designerId": "c351aa1b-5e21-4034-9d36-2c2e54250357"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "labtests",
                "selector": "labtests",
                "xtype": "labtests"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "labtests",
            "designerId": "e12b9f96-dd78-4203-a2fe-de22a43e21cf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveLabTest",
                "implHandler": [
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "var encNr= this.getLabtests().down('#encounterNo').getValue();",
                    "",
                    "if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "    form.submit({",
                    "        params:{",
                    "            encNr:encNr",
                    "        },",
                    "        success: function (form, action) {",
                    "            Ext.Msg.alert('Thank you!', 'Saved Lab Request Successfully.');",
                    "//             button.up('form').getForm().reset();",
                    "//             button.up('window').close();",
                    "            this.loadLabTest(encNr);",
                    "        },",
                    "        failure: function (form, action) {",
                    "            var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "            Ext.Msg.alert('Failed', 'There was a problem with the Request. \\n Error=' + jsonResp.error);",
                    "        },",
                    "          scope:this",
                    "    });",
                    "} else { // display error alert if the data is invalid",
                    "    Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveLabTest",
            "designerId": "7a16e8cb-f001-45fa-a1f8-8fc0a0271921"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadEncounterLogs",
                "implHandler": [
                    "var notesStore=Ext.data.StoreManager.lookup(\"NotesStore\");",
                    "notesStore.load({",
                    "    params:{",
                    "        //encNr:encounterNr",
                    "    }",
                    "});",
                    "",
                    "",
                    "var tpl=new Ext.XTemplate(",
                    "    '<Table id=notes>',",
                    "    '<tr><td colspan=5>Vitals</td></tr>',",
                    "    '<tr><td>Weight</td><td>Height</td><td>Temperature</td><td>BP</td><td>Pulse</td><td>Respiratory</td></tr>',",
                    "",
                    "    '</table>'",
                    ");",
                    "",
                    "var data = [];",
                    "notesStore.each(function(record) {",
                    "    data.push(record.getData());",
                    "});",
                    "",
                    "tpl.overwrite(component.body,data);"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadEncounterLogs",
            "designerId": "7a684c85-4dbe-43ca-b96d-493d07970d56"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "searchPatientRegister",
                "implHandler": [
                    "if(newValue.length>2){",
                    "    //Ext.Msg.alert('test',newValue);",
                    "    var ptsStore=Ext.data.StoreManager.lookup(\"PatientDetails\");",
                    "",
                    "        ptsStore.load({",
                    "            params: {",
                    "                searchParam:newValue",
                    "            },",
                    "            callback: function(records, operation, success) {",
                    "            },",
                    "            scope: this",
                    "        });",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "searchPatientRegister",
            "designerId": "591a028c-dc06-4ef8-93c9-a4643683c137"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "e",
                    "options"
                ],
                "fn": "getPressedKey2",
                "implHandler": [
                    "var ptsStore=Ext.data.StoreManager.lookup(\"PatientDetails\");",
                    "",
                    "ptsStore.load({",
                    "    params: {",
                    "        searchParam:field.getValue()",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "    },",
                    "    scope: this",
                    "});",
                    "        "
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getPressedKey2",
            "designerId": "78294552-7033-48aa-9833-c9aa41ca509b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "updatePatientInfo",
                "implHandler": [
                    "var rec = button.lookupViewModel().get('record');",
                    "//Ext.Msg.alert('Test',rec.get('FirstName'));",
                    "register=Ext.create(\"CarePortal.view.Register\",{});",
                    "",
                    "var containterWindows=Ext.create('Ext.window.Window', {",
                    "    title: \"Patient Registration\",",
                    "    resizable:false,",
                    "    closable:true",
                    "});",
                    "",
                    "containterWindows.add(register);",
                    "containterWindows.show();",
                    "",
                    "register.down('#Pid').setValue(rec.get('Pid'));",
                    "register.down('#name_first').setValue(rec.get('FirstName'));",
                    "register.down('#name_2').setValue(rec.get('LastName'));",
                    "register.down('#name_last').setValue(rec.get('SurName'));",
                    "register.down('#date_birth').setValue(rec.get('DateOfBirth'));",
                    "register.down('#age').setValue(rec.get('Gender'));",
                    "register.down('#months').setValue(rec.get('Months'));",
                    "register.down('#sex').setValue(rec.get('MaritalStatus'));",
                    "register.down('#citizenship').setValue(rec.get('Village'));",
                    "register.down('#county').setValue(rec.get('County'));",
                    "register.down('#addr_zip').setValue(rec.get('Address'));",
                    "register.down('#phone_1_nr').setValue(rec.get('Phone'));",
                    "register.down('#nat_id_nr').setValue(rec.get('IDNumber'));",
                    "register.down('#next_of_kin').setValue(rec.get('NextOfKin'));",
                    "register.down('#kin_relations').setValue(rec.get('KinRelations'));",
                    "register.down('#next_of_kin2').setValue(rec.get('NextOfKin'));",
                    "register.down('#kin_relations2').setValue(rec.get('KinRelations'));",
                    "register.down('#formStatus').setValue(\"Update\");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "updatePatientInfo",
            "designerId": "e93326be-60cf-46a2-b29b-27c85434cfae"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encounterNr"
                ],
                "fn": "getStatusLogs",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "logsPanel=this.getAdmissiondata().down(\"#statusLogs\");",
                    "vitalsPanel=this.getAdmissiondata().down(\"#vitalsLog\");",
                    "",
                    "var vitalsStore=Ext.data.StoreManager.lookup(\"VitalsStore\");",
                    "vitalsStore.load({",
                    "    params: {",
                    "        encNr:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        var tpl=new Ext.XTemplate(",
                    "            '<Table id=vitals>',",
                    "            '<tr><td colspan=7 class=titles>PATIENTS VITALS</td></tr>',",
                    "            '<tr><td class=titles>Weight</td>',",
                    "            '<td class=titles>Height</td>',",
                    "            '<td class=titles>BP</td>',",
                    "            '<td class=titles>Temp</td>',",
                    "            '<td class=titles>Pulse</td>',",
                    "            '<td class=titles>Respiration</td>',",
                    "            '<td class=titles>BMI</td>',",
                    "            '<tpl for=\".\">',",
                    "            '<tr>',",
                    "            '<td>{Weight}</td>',",
                    "            '<td>{Height}</td>',",
                    "            '<td>{Systolic}/{Diastolic}</td>',",
                    "            '<td>{Temperature}</td>',",
                    "            '<td>{Pulse}</td>',",
                    "            '<td>{Respiration}</td>',",
                    "            '<td>{Bmi}</td>',",
                    "            '</tr>',",
                    "            '</tpl>',",
                    "            '</table>'",
                    "        );",
                    "",
                    "        var data = [];",
                    "",
                    "        vitalsStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "        //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(vitalsPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});",
                    "",
                    "var logsStore=Ext.data.StoreManager.lookup(\"StatusLogsStore\");",
                    "",
                    "logsStore.load({",
                    "    params: {",
                    "        labNo:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "        var tpl=new Ext.XTemplate(",
                    "            '<Table id=notes>',",
                    "            '<tr><td colspan=4 class=titles>PATIENT ENCOUNTERS LOGS</td></tr>',",
                    "            '<tr><td class=titles>Time</td>',",
                    "            '<td class=titles>Type</td>',",
                    "            '<td class=titles>Status</td>',",
                    "            '<td class=titles>InputBy</td>',",
                    "            '<tpl for=\".\">',",
                    "            '<tr>',",
                    "            '<td>{UpdateTime}</td>',",
                    "            '<td>{StatusType}</td>',",
                    "            '<td style=\"width:400px;\"><div class=content>{Status}</div></td>',",
                    "            '<td>{InputBy}</td>',",
                    "            '</tr>',",
                    "            '</tpl>',",
                    "            '</table>'",
                    "        );",
                    "",
                    "        var data2 = [];",
                    "",
                    "        logsStore.each(function(record) {",
                    "            data2.push(record.getData());",
                    "        });",
                    "",
                    "        //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(logsPanel.body,data2);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getStatusLogs",
            "designerId": "5cca0249-6001-4050-811b-61430c32941f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveProceduresAndServices",
                "implHandler": [
                    "var pid=button.up('form').down('#pid').getValue();",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "var Services=button.up('form').down('#Services').getValue();",
                    "var Qty=button.up('form').down('#Qty').getValue();",
                    "var price=button.up('form').down('#Price').getValue();",
                    "var comment=button.up('form').down('#Comments').getValue();",
                    "",
                    "var servicesPanel=button.up('form').down('#servicesPanel');",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=saveProcedures',",
                    "    params: {",
                    "        pid:pid,",
                    "        encNr:encounterNo,",
                    "        service:Services,",
                    "        price:price,",
                    "        qty:Qty,",
                    "        comments:comment",
                    "    },",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Success','Procedure/Service Added Successfully');",
                    "",
                    "        //this.getNotes(encounterNo);",
                    "",
                    "    },",
                    "    scope:this",
                    "});",
                    "this.loadServices(encounterNo,servicesPanel);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveProceduresAndServices",
            "designerId": "d6316c40-f302-4638-bb67-e59ce3f248e4"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "services",
                "selector": "services",
                "xtype": "services"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "services",
            "designerId": "843c1228-b7ad-400c-90d0-b43818bcb498"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "fn": "getDob",
                "implHandler": [
                    "if(field.getItemId()=='age'){",
                    "    var params='age';",
                    "}else if(field.getItemId()=='months'){",
                    "     var params='months';",
                    "}",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=getDOB',",
                    "    params: {",
                    "        params:newValue,",
                    "        dateVal:params",
                    "    },",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        //Ext.Msg.alert('Error',resp.dob);",
                    "",
                    "        field.up('form').down('#date_birth').setValue(resp.dob);",
                    "",
                    "    },",
                    "    scope:this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getDob",
            "designerId": "d0d0e856-ccdf-4955-b344-dcbeab73e4b2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveDiagnosis",
                "implHandler": [
                    "var pid=button.up('form').down('#pid').getValue();",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "var icdCode=button.up('form').down('#ICD_10_code').getValue();",
                    "var comment=button.up('form').down('#comment').getValue();",
                    "var patientStatus=button.up('form').down('#patientStatus').getValue();",
                    "var visitType=button.up('form').down('#type').getValue();",
                    "",
                    "var diagnosisPanel=button.up('form').down('#diagnosisPanel');",
                    "",
                    "        Ext.Ajax.request({",
                    "             url: 'data/getDataFunctions.php?task=saveDiagnosis',",
                    "            params: {",
                    "                pid:pid,",
                    "                encNr:encounterNo,",
                    "                icdCode:icdCode,",
                    "                patientStatus:patientStatus,",
                    "                visitType:visitType,",
                    "                comment:comment",
                    "            },",
                    "            success: function(response){",
                    "               var resp = Ext.JSON.decode(response.responseText);",
                    "                Ext.Msg.alert('Success',resp.Error);",
                    "",
                    "                //this.getNotes(encounterNo);",
                    "",
                    "            },",
                    "            scope:this",
                    "        });",
                    "this.loadDiagnosis(encounterNo,diagnosisPanel);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveDiagnosis",
            "designerId": "cd523226-9299-4266-acff-4ce8bc55a557"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#Services",
                "designer|params": [
                    "field",
                    "newValue",
                    "oldValue",
                    "eOpts"
                ],
                "designer|targetType": "Ext.form.field.ComboBox",
                "fn": "onServicesChange",
                "implHandler": [
                    "var v = field.getValue();",
                    "var record = field.findRecord(field.valueField || field.displayField, v);",
                    "//Ext.Msg.alert('Test',record.get('Price'));",
                    "",
                    "field.up('form').down('#Price').setValue(record.get('Price'));",
                    "field.up('form').down('#Qty').setValue(1);"
                ],
                "name": "change"
            },
            "configAlternates": {
                "designer|controlQuery": "string",
                "designer|params": "typedarray",
                "designer|targetType": "view",
                "fn": "string",
                "implHandler": "code",
                "name": "string"
            },
            "name": "onServicesChange",
            "designerId": "aa88c9f6-4cf7-407d-9b0a-458fc5bd3626"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "diagnosis",
                "selector": "diagnosis",
                "xtype": "diagnosis"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "diagnosis",
            "designerId": "2ade320e-b84c-4224-9f6d-36d2be1f18cd"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mch",
                "selector": "mch",
                "xtype": "mch"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "mch",
            "designerId": "151eaf87-57d3-48dd-83ba-3a93bec7c0e5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "createMch",
                "implHandler": [
                    "",
                    "",
                    "component.getEl().on('click', function() {",
                    "",
                    "        var mch=Ext.create(\"CarePortal.view.MCH\",{});",
                    "        //centerContainer.removeAll();",
                    "        var containterWindows=Ext.create('Ext.window.Window', {",
                    "            title:\"MCH Entry Form\",",
                    "            resizable:false,",
                    "            closable:true",
                    "        });",
                    "",
                    "        containterWindows.add(mch);",
                    "        containterWindows.show();",
                    "",
                    "    mch.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "    mch.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "    mch.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());",
                    "    mch.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createMch",
            "designerId": "c75ac479-1e62-4450-b301-f943de46fb0c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveMch",
                "implHandler": [
                    "Ext.Msg.alert('Thank you!', 'Saved MCH Request Successfully.');",
                    "var pid=button.up('form').down('#pid').getValue();",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "",
                    "var form = button.up('panel').getForm(); // get the basic form",
                    "        var encNr= this.getMch().down('#encounterNo').getValue();",
                    "",
                    "        if (form.isValid()) { // make sure the form contains valid data before submitting",
                    "            form.submit({",
                    "                params:{",
                    "                    encNr:encounterNo,",
                    "                    pid:pid",
                    "                },",
                    "                success: function (form, action) {",
                    "                    Ext.Msg.alert('Thank you!', 'Saved MCH Request Successfully.');",
                    "                    button.up('form').getForm().reset();",
                    "                    button.up('window').close();",
                    "                },",
                    "                failure: function (form, action) {",
                    "                    var jsonResp = Ext.decode(action.response.responseText);",
                    "",
                    "                    Ext.Msg.alert('Failed', 'There was a problem with the Request. \\n Error=' + jsonResp.error);",
                    "                }",
                    "            });",
                    "        } else { // display error alert if the data is invalid",
                    "            Ext.Msg.alert('Invalid Data', 'Please correct form errors.');",
                    "        }",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveMch",
            "designerId": "e413d73a-5c76-4022-9f26-be7a3cf0419c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "addAllergies",
                "implHandler": [
                    "var allergy=button.up('form').down('#allergyName').getValue();",
                    "var allergyDescription=button.up('form').down('#allergyDescription').getValue();",
                    "var allergiesPanel=button.up('form').down('#allergiesPanel');",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=saveAllergy',",
                    "    params: {",
                    "        allergy:allergy,",
                    "        allergyDescription:allergyDescription",
                    "    },",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Success',resp.Error);",
                    "",
                    "        //this.getNotes(encounterNo);",
                    "",
                    "    },",
                    "    scope:this",
                    "});",
                    "",
                    "this.loadAllergies(allergiesPanel);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addAllergies",
            "designerId": "e70494b0-12ad-4d14-84cf-e89aaed18394"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "register",
                "selector": "register",
                "xtype": "register"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "register",
            "designerId": "b3ae4434-fb3d-4751-b041-6408eee22a93"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "addInsurance",
                "implHandler": [
                    "var allergy=button.up('form').down('#allergyName').getValue();",
                    "var allergyDescription=button.up('form').down('#allergyDescription').getValue();",
                    "var allergiesPanel=button.up('form').down('#allergiesPanel');",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=saveAllergy',",
                    "    params: {",
                    "        allergy:allergy,",
                    "        allergyDescription:allergyDescription",
                    "    },",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Success',resp.Error);",
                    "",
                    "        //this.getNotes(encounterNo);",
                    "",
                    "    },",
                    "    scope:this",
                    "});",
                    "",
                    "this.loadAllergies(allergiesPanel);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "addInsurance",
            "designerId": "4f3f9f8d-0379-493b-b5fe-d503ebb8f7e8"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "immunization",
                "selector": "immunization",
                "xtype": "immunization"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string",
                "xtype": "string"
            },
            "name": "immunization",
            "designerId": "ae3df560-574e-4197-9112-5b8f095b936f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "createImmunization",
                "implHandler": [
                    "component.getEl().on('click', function() {",
                    "",
                    "    var immunization=Ext.create(\"CarePortal.view.Immunization\",{});",
                    "    var containterWindows=Ext.create('Ext.window.Window', {",
                    "        title:\"Immunization Entry Form\",",
                    "        resizable:false,",
                    "        closable:true",
                    "    });",
                    "",
                    "    containterWindows.add(immunization);",
                    "    containterWindows.show();",
                    "",
                    "    immunization.down('#pid').setValue(component.up('panel').up('panel').down('#pid').getValue());",
                    "    immunization.down('#names').setValue(component.up('panel').up('panel').down('#names').getValue());",
                    "    immunization.down('#encounterNo').setValue(component.up('panel').up('panel').down('#encounterNr').getValue());",
                    "    immunization.down('#Dob').setValue(component.up('panel').up('panel').down('#dob').getValue());",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "createImmunization",
            "designerId": "20260dcb-8a81-4624-a0ef-5ed6e2196bbe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "saveRadiology",
                "implHandler": [
                    "var pid=button.up('form').down('#pid').getValue();",
                    "var encounterNo=button.up('form').down('#encounterNo').getValue();",
                    "var xrayTest=button.up('form').down('#Radiology').getValue();",
                    "var comment=button.up('form').down('#Comments').getValue();",
                    "var price=button.up('form').down('#Price').getValue();",
                    "// var visitType=button.up('form').down('#type').getValue();",
                    "",
                    "var radiologyPanel=button.up('form').down('#radiologyPanel');",
                    "",
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=saveRadiology',",
                    "    params: {",
                    "        pid:pid,",
                    "        encNr:encounterNo,",
                    "        radiology:xrayTest,",
                    "         price:price,",
                    "       // visitType:visitType,",
                    "        comment:comment",
                    "    },",
                    "    success: function(response){",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        Ext.Msg.alert('Success',resp.Error);",
                    "",
                    "        //this.getNotes(encounterNo);",
                    "",
                    "    },",
                    "    scope:this",
                    "});",
                    "this.loadRadiology(encounterNo);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveRadiology",
            "designerId": "8d052224-7ad7-4eac-b6cb-7732ea074bf1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encounterNo"
                ],
                "fn": "loadRadiology",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "radiologyPanel=this.getRadiology().down(\"#radiologyPanel\");",
                    "encounterNr=this.getRadiology().down(\"#encounterNo\").getValue();",
                    "",
                    "var radiologyStore=Ext.data.StoreManager.lookup(\"RadiologyStore\");",
                    "",
                    "radiologyStore.load({",
                    "    params: {",
                    "        encNr:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=investigations>',",
                    "                        '<tr><td colspan=5 class=titles>RADIOLOGY TESTS</td></tr>',",
                    "                                '<tr><td class=titles>Status</td>',",
                    "                                    '<td class=titles>Description</td>',",
                    "                                    '<td class=titles>TimeRequested</td>',",
                    "                                    '<td class=titles>BatchNo</td>',",
                    "                                    '<td class=titles>RequestedBy</td>',",
                    "                                '</tr>',",
                    "                         '<tpl for=\".\">',",
                    "",
                    "                                '<tr>',",
                    "                                    '<tpl if=\"Status == pending\">',",
                    "                                        '<td class=status1>{Status}</td>',",
                    "                                    '<tpl else>',",
                    "                                         '<td class=status1>{Status}</td>',",
                    "                                    '</tpl>',",
                    "                                    '<td>{Description}</td>',",
                    "                                    '<td>{TimeRequested}</td>',",
                    "                                    '<td>{BatchNo}</td>',",
                    "                                    '<td>{RequestedBy}</td>',",
                    "                                '</tr>',",
                    "                        '</tpl>',",
                    "                        '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        radiologyStore.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(radiologyPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadRadiology",
            "designerId": "e968609e-3a30-45c5-ba8f-b169db6f2d21"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "encounterNo"
                ],
                "fn": "loadLabTest",
                "implHandler": [
                    "//vitalsPanel = Ext.create('CarePortal.view.Vitals', {});",
                    "labTestPanel=this.getLabtests().down(\"#labTestPanel\");",
                    "encounterNr=this.getLabtests().down(\"#encounterNo\").getValue();",
                    "",
                    "var ltest=Ext.data.StoreManager.lookup(\"LabTestStore\");",
                    "",
                    "ltest.load({",
                    "    params: {",
                    "        encNr:encounterNr",
                    "    },",
                    "    callback: function(records, operation, success) {",
                    "            var tpl=new Ext.XTemplate(",
                    "                '<Table id=investigations>',",
                    "                        '<tr><td colspan=5 class=titles>LABORATORY TESTS</td></tr>',",
                    "                                '<tr><td class=titles>Status</td>',",
                    "                                    '<td class=titles>Description</td>',",
                    "                                    '<td class=titles>TimeRequested</td>',",
                    "                                    '<td class=titles>BatchNo</td>',",
                    "                                    '<td class=titles>RequestedBy</td>',",
                    "                                '</tr>',",
                    "                         '<tpl for=\".\">',",
                    "",
                    "                                '<tr>',",
                    "                                    '<tpl if=\"Status == pending\">',",
                    "                                        '<td class=status1>{Status}</td>',",
                    "                                    '<tpl else>',",
                    "                                         '<td class=status1>{Status}</td>',",
                    "                                    '</tpl>',",
                    "                                    '<td>{TestName}</td>',",
                    "                                    '<td>{TimeRequested}</td>',",
                    "                                    '<td>{BatchNo}</td>',",
                    "                                    '<td>{Requestedby}</td>',",
                    "                                '</tr>',",
                    "                        '</tpl>',",
                    "                        '</table>'",
                    "            );",
                    "",
                    "        var data = [];",
                    "",
                    "        ltest.each(function(record) {",
                    "            data.push(record.getData());",
                    "        });",
                    "",
                    "         //var data1=notesStore.proxy.reader.rawData;",
                    "        tpl.overwrite(labTestPanel.body,data);",
                    "    },",
                    "    scope: this",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadLabTest",
            "designerId": "5c167ed3-ed4c-4917-87f9-e92af130e6c4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button"
                ],
                "fn": "openTransferForm",
                "implHandler": [
                    "",
                    "//Ext.Msg.alert('Test',button.getItemId());",
                    "",
                    "var rec = button.lookupViewModel().get('record');",
                    "encounterNo=rec.get('EncounterNo');",
                    "pid=rec.get('Pid');",
                    "names=rec.get('Names');",
                    "",
                    "",
                    "var admission=Ext.create(\"CarePortal.view.IpTransfer\",{});",
                    "var admission=Ext.create(\"CarePortal.view.AdmitInpatient\",{});",
                    "admission.down('#encounter_nr').setValue(encounterNo);",
                    "admission.down('#pid3').setValue(pid);",
                    "admission.down('#Names').setValue(names);",
                    "admission.down('#sourcePanel').setValue('transfer');",
                    "var containterWindows=Ext.create('Ext.window.Window', {",
                    "    title:\"Inpatient Admission Form\",",
                    "    resizable:false,",
                    "    closable:true",
                    "});",
                    "",
                    "containterWindows.add(admission);",
                    "containterWindows.show();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "openTransferForm",
            "designerId": "37dfe564-4fa9-457d-afa2-6a8ab57b09bd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getLastPatient",
                "implHandler": [
                    "Ext.Ajax.request({",
                    "    url: 'data/getDataFunctions.php?task=getlastPatient',",
                    "    waitMsg: 'checkin user patient ...',",
                    "    success: function(response){",
                    "",
                    "        var resp = Ext.JSON.decode(response.responseText);",
                    "        sessionStorage.setItem(\"pid\",resp.pid);",
                    "        sessionStorage.setItem(\"pid2\",resp.pid);",
                    "        sessionStorage.setItem(\"pid3\",resp.pid);",
                    "",
                    "",
                    "    },",
                    "    failure:function(response){",
                    "//         var resp = JSON.parseJSON(response);",
                    "//         Ext.Msg.alert('Access Denied','Access Denied, contact Systems Administrator');",
                    "    },",
                    "    scope: this",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getLastPatient",
            "designerId": "67a0f0cb-e980-4a84-847d-8636e29cc7bb"
        }
    ]
}